

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Jun 01 04:18:07 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16LF1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     	;# 
    27  0001                     	;# 
    28  0002                     	;# 
    29  0003                     	;# 
    30  0004                     	;# 
    31  0005                     	;# 
    32  0006                     	;# 
    33  0007                     	;# 
    34  0008                     	;# 
    35  0009                     	;# 
    36  000A                     	;# 
    37  000B                     	;# 
    38  000C                     	;# 
    39  000D                     	;# 
    40  000E                     	;# 
    41  0010                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0015                     	;# 
    46  0016                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001B                     	;# 
    53  001C                     	;# 
    54  001E                     	;# 
    55  001F                     	;# 
    56  008C                     	;# 
    57  008D                     	;# 
    58  008E                     	;# 
    59  0090                     	;# 
    60  0091                     	;# 
    61  0092                     	;# 
    62  0093                     	;# 
    63  0095                     	;# 
    64  0096                     	;# 
    65  0097                     	;# 
    66  0098                     	;# 
    67  0099                     	;# 
    68  009A                     	;# 
    69  009B                     	;# 
    70  009B                     	;# 
    71  009C                     	;# 
    72  009D                     	;# 
    73  009E                     	;# 
    74  010C                     	;# 
    75  010D                     	;# 
    76  010E                     	;# 
    77  0110                     	;# 
    78  0111                     	;# 
    79  0112                     	;# 
    80  0113                     	;# 
    81  0114                     	;# 
    82  0115                     	;# 
    83  0116                     	;# 
    84  0117                     	;# 
    85  0118                     	;# 
    86  0119                     	;# 
    87  011A                     	;# 
    88  011B                     	;# 
    89  011D                     	;# 
    90  018C                     	;# 
    91  018D                     	;# 
    92  0191                     	;# 
    93  0191                     	;# 
    94  0192                     	;# 
    95  0193                     	;# 
    96  0193                     	;# 
    97  0193                     	;# 
    98  0194                     	;# 
    99  0195                     	;# 
   100  0196                     	;# 
   101  0199                     	;# 
   102  019A                     	;# 
   103  019B                     	;# 
   104  019B                     	;# 
   105  019B                     	;# 
   106  019B                     	;# 
   107  019C                     	;# 
   108  019C                     	;# 
   109  019D                     	;# 
   110  019E                     	;# 
   111  019F                     	;# 
   112  020D                     	;# 
   113  0210                     	;# 
   114  0211                     	;# 
   115  0212                     	;# 
   116  0213                     	;# 
   117  0214                     	;# 
   118  0215                     	;# 
   119  0215                     	;# 
   120  0216                     	;# 
   121  0217                     	;# 
   122  0291                     	;# 
   123  0291                     	;# 
   124  0292                     	;# 
   125  0293                     	;# 
   126  0294                     	;# 
   127  0295                     	;# 
   128  0295                     	;# 
   129  0296                     	;# 
   130  0298                     	;# 
   131  0298                     	;# 
   132  0299                     	;# 
   133  029A                     	;# 
   134  029B                     	;# 
   135  029C                     	;# 
   136  029C                     	;# 
   137  029D                     	;# 
   138  029E                     	;# 
   139  029F                     	;# 
   140  0311                     	;# 
   141  0311                     	;# 
   142  0312                     	;# 
   143  0313                     	;# 
   144  0314                     	;# 
   145  0315                     	;# 
   146  0315                     	;# 
   147  0316                     	;# 
   148  0318                     	;# 
   149  0318                     	;# 
   150  0319                     	;# 
   151  031A                     	;# 
   152  031C                     	;# 
   153  031C                     	;# 
   154  031D                     	;# 
   155  031E                     	;# 
   156  0394                     	;# 
   157  0395                     	;# 
   158  0396                     	;# 
   159  0415                     	;# 
   160  0416                     	;# 
   161  0417                     	;# 
   162  041C                     	;# 
   163  041D                     	;# 
   164  041E                     	;# 
   165  0791                     	;# 
   166  0792                     	;# 
   167  0793                     	;# 
   168  0794                     	;# 
   169  0795                     	;# 
   170  0798                     	;# 
   171  0799                     	;# 
   172  07A0                     	;# 
   173  07A1                     	;# 
   174  07A3                     	;# 
   175  07A4                     	;# 
   176  07A6                     	;# 
   177  07A7                     	;# 
   178  07A9                     	;# 
   179  07AA                     	;# 
   180  0FE4                     	;# 
   181  0FE5                     	;# 
   182  0FE6                     	;# 
   183  0FE7                     	;# 
   184  0FE8                     	;# 
   185  0FE9                     	;# 
   186  0FEA                     	;# 
   187  0FEB                     	;# 
   188  0FED                     	;# 
   189  0FEE                     	;# 
   190  0FEF                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0008                     	;# 
   200  0009                     	;# 
   201  000A                     	;# 
   202  000B                     	;# 
   203  000C                     	;# 
   204  000D                     	;# 
   205  000E                     	;# 
   206  0010                     	;# 
   207  0011                     	;# 
   208  0012                     	;# 
   209  0013                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  008C                     	;# 
   222  008D                     	;# 
   223  008E                     	;# 
   224  0090                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0095                     	;# 
   229  0096                     	;# 
   230  0097                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  010C                     	;# 
   240  010D                     	;# 
   241  010E                     	;# 
   242  0110                     	;# 
   243  0111                     	;# 
   244  0112                     	;# 
   245  0113                     	;# 
   246  0114                     	;# 
   247  0115                     	;# 
   248  0116                     	;# 
   249  0117                     	;# 
   250  0118                     	;# 
   251  0119                     	;# 
   252  011A                     	;# 
   253  011B                     	;# 
   254  011D                     	;# 
   255  018C                     	;# 
   256  018D                     	;# 
   257  0191                     	;# 
   258  0191                     	;# 
   259  0192                     	;# 
   260  0193                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0199                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019C                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019F                     	;# 
   277  020D                     	;# 
   278  0210                     	;# 
   279  0211                     	;# 
   280  0212                     	;# 
   281  0213                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0216                     	;# 
   286  0217                     	;# 
   287  0291                     	;# 
   288  0291                     	;# 
   289  0292                     	;# 
   290  0293                     	;# 
   291  0294                     	;# 
   292  0295                     	;# 
   293  0295                     	;# 
   294  0296                     	;# 
   295  0298                     	;# 
   296  0298                     	;# 
   297  0299                     	;# 
   298  029A                     	;# 
   299  029B                     	;# 
   300  029C                     	;# 
   301  029C                     	;# 
   302  029D                     	;# 
   303  029E                     	;# 
   304  029F                     	;# 
   305  0311                     	;# 
   306  0311                     	;# 
   307  0312                     	;# 
   308  0313                     	;# 
   309  0314                     	;# 
   310  0315                     	;# 
   311  0315                     	;# 
   312  0316                     	;# 
   313  0318                     	;# 
   314  0318                     	;# 
   315  0319                     	;# 
   316  031A                     	;# 
   317  031C                     	;# 
   318  031C                     	;# 
   319  031D                     	;# 
   320  031E                     	;# 
   321  0394                     	;# 
   322  0395                     	;# 
   323  0396                     	;# 
   324  0415                     	;# 
   325  0416                     	;# 
   326  0417                     	;# 
   327  041C                     	;# 
   328  041D                     	;# 
   329  041E                     	;# 
   330  0791                     	;# 
   331  0792                     	;# 
   332  0793                     	;# 
   333  0794                     	;# 
   334  0795                     	;# 
   335  0798                     	;# 
   336  0799                     	;# 
   337  07A0                     	;# 
   338  07A1                     	;# 
   339  07A3                     	;# 
   340  07A4                     	;# 
   341  07A6                     	;# 
   342  07A7                     	;# 
   343  07A9                     	;# 
   344  07AA                     	;# 
   345  0FE4                     	;# 
   346  0FE5                     	;# 
   347  0FE6                     	;# 
   348  0FE7                     	;# 
   349  0FE8                     	;# 
   350  0FE9                     	;# 
   351  0FEA                     	;# 
   352  0FEB                     	;# 
   353  0FED                     	;# 
   354  0FEE                     	;# 
   355  0FEF                     	;# 
   356                           
   357                           	psect	stringtext
   358  0800                     __pstringtext:	
   359  0800                     _dpowers:	
   360  0800  3401               	retlw	1
   361  0801  3400               	retlw	0
   362  0802  340A               	retlw	10
   363  0803  3400               	retlw	0
   364  0804  3464               	retlw	100
   365  0805  3400               	retlw	0
   366  0806  34E8               	retlw	232
   367  0807  3403               	retlw	3
   368  0808  3410               	retlw	16
   369  0809  3427               	retlw	39
   370  080A                     __end_of_dpowers:	
   371  0011                     _PIR1bits	set	17
   372  0099                     _OSCCONbits	set	153
   373  008E                     _TRISCbits	set	142
   374  019F                     _BAUDCONbits	set	415
   375  0199                     _RCREG	set	409
   376  019D                     _RCSTA	set	413
   377  019D                     _RCSTAbits	set	413
   378  019B                     _SPBRG	set	411
   379  019A                     _TXREG	set	410
   380  019E                     _TXSTA	set	414
   381  019E                     _TXSTAbits	set	414
   382  080A                     __stringdata:	
   383  080A                     STR_1:	
   384  080A  3445               	retlw	69	;'E'
   385  080B  3473               	retlw	115	;'s'
   386  080C  3463               	retlw	99	;'c'
   387  080D  3472               	retlw	114	;'r'
   388  080E  3469               	retlw	105	;'i'
   389  080F  3462               	retlw	98	;'b'
   390  0810  3465               	retlw	101	;'e'
   391  0811  3420               	retlw	32	;' '
   392  0812  346E               	retlw	110	;'n'
   393  0813  3475               	retlw	117	;'u'
   394  0814  346D               	retlw	109	;'m'
   395  0815  343A               	retlw	58	;':'
   396  0816  340A               	retlw	10
   397  0817  3400               	retlw	0
   398  0818                     STR_2:	
   399  0818  3468               	retlw	104	;'h'
   400  0819  346F               	retlw	111	;'o'
   401  081A  346C               	retlw	108	;'l'
   402  081B  3461               	retlw	97	;'a'
   403  081C  3420               	retlw	32	;' '
   404  081D  3425               	retlw	37	;'%'
   405  081E  3475               	retlw	117	;'u'
   406  081F  340A               	retlw	10
   407  0820  3400               	retlw	0
   408  0821                     __end_of__stringdata:	
   409                           
   410                           ; #config settings
   411  0000                     
   412                           	psect	cinit
   413  07F0                     start_initialization:	
   414  07F0                     __initialization:	
   415                           
   416                           ; Clear objects allocated to BANK0
   417  07F0  01B1               	clrf	__pbssBANK0& (0+127)
   418  07F1  01B2               	clrf	(__pbssBANK0+1)& (0+127)
   419  07F2  01B3               	clrf	(__pbssBANK0+2)& (0+127)
   420  07F3  01B4               	clrf	(__pbssBANK0+3)& (0+127)
   421  07F4  01B5               	clrf	(__pbssBANK0+4)& (0+127)
   422  07F5  01B6               	clrf	(__pbssBANK0+5)& (0+127)
   423  07F6  01B7               	clrf	(__pbssBANK0+6)& (0+127)
   424  07F7  01B8               	clrf	(__pbssBANK0+7)& (0+127)
   425  07F8  01B9               	clrf	(__pbssBANK0+8)& (0+127)
   426  07F9  01BA               	clrf	(__pbssBANK0+9)& (0+127)
   427  07FA  01BB               	clrf	(__pbssBANK0+10)& (0+127)
   428  07FB  01BC               	clrf	(__pbssBANK0+11)& (0+127)
   429  07FC                     end_of_initialization:	
   430                           ;End of C runtime variable initialization code
   431                           
   432  07FC                     __end_of__initialization:	
   433  07FC  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   434  07FD  0020               	movlb	0
   435  07FE  3185  2D9D         	ljmp	_main	;jump to C main() function
   436                           
   437                           	psect	bssBANK0
   438  0031                     __pbssBANK0:	
   439  0031                     _num:	
   440  0031                     	ds	2
   441  0033                     _buffer:	
   442  0033                     	ds	10
   443                           
   444                           	psect	cstackCOMMON
   445  0070                     __pcstackCOMMON:	
   446  0070                     ?_isdigit:	
   447  0070                     ??_isdigit:	
   448                           ; 1 bit 
   449                           
   450  0070                     ?_openEUSART:	
   451                           ; 0 bytes @ 0x0
   452                           
   453  0070                     ??_openEUSART:	
   454                           ; 0 bytes @ 0x0
   455                           
   456  0070                     ??_busyEUSART:	
   457                           ; 0 bytes @ 0x0
   458                           
   459  0070                     ??_readEUSART:	
   460                           ; 0 bytes @ 0x0
   461                           
   462  0070                     ?_writeEUSART:	
   463                           ; 0 bytes @ 0x0
   464                           
   465  0070                     ??_writeEUSART:	
   466                           ; 0 bytes @ 0x0
   467                           
   468  0070                     ?_putsEUSART:	
   469                           ; 0 bytes @ 0x0
   470                           
   471  0070                     ??_dataRdyEUSART:	
   472                           ; 0 bytes @ 0x0
   473                           
   474  0070                     ?_setup:	
   475                           ; 0 bytes @ 0x0
   476                           
   477  0070                     ??_setup:	
   478                           ; 0 bytes @ 0x0
   479                           
   480  0070                     ?_leerEusart:	
   481                           ; 0 bytes @ 0x0
   482                           
   483  0070                     ?_loop:	
   484                           ; 0 bytes @ 0x0
   485                           
   486  0070                     ?_main:	
   487                           ; 0 bytes @ 0x0
   488                           
   489  0070                     ?_busyEUSART:	
   490                           ; 0 bytes @ 0x0
   491                           
   492  0070                     ?_readEUSART:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_dataRdyEUSART:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?___wmul:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?___lwdiv:	
   502                           ; 2 bytes @ 0x0
   503                           
   504  0070                     writeEUSART@data:	
   505                           ; 2 bytes @ 0x0
   506                           
   507  0070                     _isdigit$469:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ___wmul@multiplier:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ___lwdiv@divisor:	
   514                           ; 2 bytes @ 0x0
   515                           
   516                           
   517                           ; 2 bytes @ 0x0
   518  0070                     	ds	1
   519  0071                     ??_putsEUSART:	
   520  0071                     readEUSART@data:	
   521                           ; 0 bytes @ 0x1
   522                           
   523  0071                     putsEUSART@buffer:	
   524                           ; 1 bytes @ 0x1
   525                           
   526  0071                     isdigit@c:	
   527                           ; 1 bytes @ 0x1
   528                           
   529                           
   530                           ; 1 bytes @ 0x1
   531  0071                     	ds	1
   532  0072                     ___wmul@multiplicand:	
   533  0072                     ___lwdiv@dividend:	
   534                           ; 2 bytes @ 0x2
   535                           
   536                           
   537                           ; 2 bytes @ 0x2
   538  0072                     	ds	2
   539  0074                     ??___wmul:	
   540  0074                     ??___lwdiv:	
   541                           ; 0 bytes @ 0x4
   542                           
   543  0074                     ___wmul@product:	
   544                           ; 0 bytes @ 0x4
   545                           
   546                           
   547                           ; 2 bytes @ 0x4
   548  0074                     	ds	1
   549  0075                     ___lwdiv@quotient:	
   550                           
   551                           ; 2 bytes @ 0x5
   552  0075                     	ds	1
   553  0076                     ?_atoi:	
   554                           
   555                           ; 2 bytes @ 0x6
   556  0076                     	ds	1
   557  0077                     ___lwdiv@counter:	
   558                           
   559                           ; 1 bytes @ 0x7
   560  0077                     	ds	1
   561  0078                     ??_atoi:	
   562  0078                     ?___lwmod:	
   563                           ; 0 bytes @ 0x8
   564                           
   565  0078                     ___lwmod@divisor:	
   566                           ; 2 bytes @ 0x8
   567                           
   568                           
   569                           ; 2 bytes @ 0x8
   570  0078                     	ds	2
   571  007A                     atoi@sign:	
   572  007A                     ___lwmod@dividend:	
   573                           ; 1 bytes @ 0xA
   574                           
   575                           
   576                           ; 2 bytes @ 0xA
   577  007A                     	ds	1
   578  007B                     atoi@a:	
   579                           
   580                           ; 2 bytes @ 0xB
   581  007B                     	ds	1
   582  007C                     ??___lwmod:	
   583                           
   584                           ; 0 bytes @ 0xC
   585  007C                     	ds	1
   586  007D                     atoi@s:	
   587  007D                     ___lwmod@counter:	
   588                           ; 1 bytes @ 0xD
   589                           
   590                           
   591                           ; 1 bytes @ 0xD
   592  007D                     	ds	1
   593  007E                     ??_loop:	
   594  007E                     ??_main:	
   595                           ; 0 bytes @ 0xE
   596                           
   597                           
   598                           	psect	cstackBANK0
   599  0020                     __pcstackBANK0:	
   600                           ; 0 bytes @ 0xE
   601                           
   602  0020                     ??_leerEusart:	
   603  0020                     ?_sprintf:	
   604                           ; 0 bytes @ 0x0
   605                           
   606  0020                     sprintf@f:	
   607                           ; 2 bytes @ 0x0
   608                           
   609                           
   610                           ; 2 bytes @ 0x0
   611  0020                     	ds	1
   612  0021                     leerEusart@c:	
   613                           
   614                           ; 1 bytes @ 0x1
   615  0021                     	ds	1
   616  0022                     leerEusart@i:	
   617                           
   618                           ; 1 bytes @ 0x2
   619  0022                     	ds	2
   620  0024                     ??_sprintf:	
   621                           
   622                           ; 0 bytes @ 0x4
   623  0024                     	ds	4
   624  0028                     sprintf@flag:	
   625                           
   626                           ; 1 bytes @ 0x8
   627  0028                     	ds	1
   628  0029                     sprintf@ap:	
   629                           
   630                           ; 1 bytes @ 0x9
   631  0029                     	ds	1
   632  002A                     sprintf@_val:	
   633                           
   634                           ; 4 bytes @ 0xA
   635  002A                     	ds	4
   636  002E                     sprintf@prec:	
   637                           
   638                           ; 1 bytes @ 0xE
   639  002E                     	ds	1
   640  002F                     sprintf@sp:	
   641                           
   642                           ; 1 bytes @ 0xF
   643  002F                     	ds	1
   644  0030                     sprintf@c:	
   645                           
   646                           ; 1 bytes @ 0x10
   647  0030                     	ds	1
   648                           
   649                           	psect	maintext
   650  059D                     __pmaintext:	
   651 ;;
   652 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   653 ;;
   654 ;; *************** function _main *****************
   655 ;; Defined at:
   656 ;;		line 66 in file "principalEUSART.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;		None               void
   663 ;; Registers used:
   664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   665 ;; Tracked objects:
   666 ;;		On entry : 17F/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   670 ;;      Params:         0       0       0       0       0       0       0       0
   671 ;;      Locals:         0       0       0       0       0       0       0       0
   672 ;;      Temps:          0       0       0       0       0       0       0       0
   673 ;;      Totals:         0       0       0       0       0       0       0       0
   674 ;;Total ram usage:        0 bytes
   675 ;; Hardware stack levels required when called:    4
   676 ;; This function calls:
   677 ;;		_loop
   678 ;;		_setup
   679 ;; This function is called by:
   680 ;;		Startup code after reset
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           
   685                           ;psect for function _main
   686  059D                     _main:	
   687                           
   688                           ;principalEUSART.c: 67: setup();
   689                           
   690                           ;incstack = 0
   691                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   692  059D  3185  25A4  3185   	fcall	_setup
   693                           
   694                           ;principalEUSART.c: 68: loop();
   695  05A0  3186  265F         	fcall	_loop
   696                           
   697                           ;principalEUSART.c: 69: return;
   698  05A2  3180  2802         	ljmp	start
   699  05A4                     __end_of_main:	
   700                           
   701                           	psect	text1
   702  05A4                     __ptext1:	
   703 ;; *************** function _setup *****************
   704 ;; Defined at:
   705 ;;		line 35 in file "principalEUSART.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;		None               void
   712 ;; Registers used:
   713 ;;		wreg, status,2, status,0, pclath, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   719 ;;      Params:         0       0       0       0       0       0       0       0
   720 ;;      Locals:         0       0       0       0       0       0       0       0
   721 ;;      Temps:          0       0       0       0       0       0       0       0
   722 ;;      Totals:         0       0       0       0       0       0       0       0
   723 ;;Total ram usage:        0 bytes
   724 ;; Hardware stack levels used:    1
   725 ;; Hardware stack levels required when called:    1
   726 ;; This function calls:
   727 ;;		_openEUSART
   728 ;; This function is called by:
   729 ;;		_main
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           
   734                           ;psect for function _setup
   735  05A4                     _setup:	
   736                           
   737                           ;principalEUSART.c: 36: OSCCONbits.IRCF=11;
   738                           
   739                           ;incstack = 0
   740                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   741  05A4  0021               	movlb	1	; select bank1
   742  05A5  0819               	movf	25,w	;volatile
   743  05A6  3987               	andlw	-121
   744  05A7  3858               	iorlw	88
   745  05A8  0099               	movwf	25	;volatile
   746                           
   747                           ;principalEUSART.c: 37: openEUSART();
   748  05A9  3185  25BA         	fcall	_openEUSART
   749  05AB  0008               	return
   750  05AC                     __end_of_setup:	
   751                           
   752                           	psect	text2
   753  05BA                     __ptext2:	
   754 ;; *************** function _openEUSART *****************
   755 ;; Defined at:
   756 ;;		line 11 in file "usart.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;		None
   759 ;; Auto vars:     Size  Location     Type
   760 ;;		None
   761 ;; Return value:  Size  Location     Type
   762 ;;		None               void
   763 ;; Registers used:
   764 ;;		wreg, status,2
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   770 ;;      Params:         0       0       0       0       0       0       0       0
   771 ;;      Locals:         0       0       0       0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0       0
   773 ;;      Totals:         0       0       0       0       0       0       0       0
   774 ;;Total ram usage:        0 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; This function calls:
   777 ;;		Nothing
   778 ;; This function is called by:
   779 ;;		_setup
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           
   784                           ;psect for function _openEUSART
   785  05BA                     _openEUSART:	
   786                           
   787                           ;usart.c: 12: TXSTA=0;
   788                           
   789                           ;incstack = 0
   790                           ; Regs used in _openEUSART: [wreg+status,2]
   791  05BA  0023               	movlb	3	; select bank3
   792  05BB  019E               	clrf	30	;volatile
   793                           
   794                           ;usart.c: 13: RCSTA=0;
   795  05BC  019D               	clrf	29	;volatile
   796                           
   797                           ;usart.c: 14: TXSTAbits.SYNC=0;
   798  05BD  121E               	bcf	30,4	;volatile
   799                           
   800                           ;usart.c: 15: TXSTAbits.BRGH=1;
   801  05BE  151E               	bsf	30,2	;volatile
   802                           
   803                           ;usart.c: 16: BAUDCONbits.BRG16=1;
   804  05BF  159F               	bsf	31,3	;volatile
   805                           
   806                           ;usart.c: 17: RCSTAbits.RX9D=0;
   807  05C0  101D               	bcf	29,0	;volatile
   808                           
   809                           ;usart.c: 18: SPBRG=25;
   810  05C1  3019               	movlw	25
   811  05C2  009B               	movwf	27	;volatile
   812                           
   813                           ;usart.c: 19: PIR1bits.RCIF=0;
   814  05C3  0020               	movlb	0	; select bank0
   815  05C4  1291               	bcf	17,5	;volatile
   816                           
   817                           ;usart.c: 20: PIR1bits.TXIF=0;
   818  05C5  1211               	bcf	17,4	;volatile
   819                           
   820                           ;usart.c: 21: RCSTAbits.SPEN=1;
   821  05C6  0023               	movlb	3	; select bank3
   822  05C7  179D               	bsf	29,7	;volatile
   823                           
   824                           ;usart.c: 22: TXSTAbits.TXEN=1;
   825  05C8  169E               	bsf	30,5	;volatile
   826                           
   827                           ;usart.c: 23: RCSTAbits.CREN=1;
   828  05C9  161D               	bsf	29,4	;volatile
   829                           
   830                           ;usart.c: 24: TRISCbits.TRISC6=0;
   831  05CA  0021               	movlb	1	; select bank1
   832  05CB  130E               	bcf	14,6	;volatile
   833                           
   834                           ;usart.c: 25: TRISCbits.TRISC7=1;
   835  05CC  178E               	bsf	14,7	;volatile
   836  05CD  0008               	return
   837  05CE                     __end_of_openEUSART:	
   838                           
   839                           	psect	text3
   840  065F                     __ptext3:	
   841 ;; *************** function _loop *****************
   842 ;; Defined at:
   843 ;;		line 53 in file "principalEUSART.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;		None
   848 ;; Return value:  Size  Location     Type
   849 ;;		None               void
   850 ;; Registers used:
   851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   857 ;;      Params:         0       0       0       0       0       0       0       0
   858 ;;      Locals:         0       0       0       0       0       0       0       0
   859 ;;      Temps:          0       0       0       0       0       0       0       0
   860 ;;      Totals:         0       0       0       0       0       0       0       0
   861 ;;Total ram usage:        0 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    3
   864 ;; This function calls:
   865 ;;		_busyEUSART
   866 ;;		_leerEusart
   867 ;;		_putsEUSART
   868 ;;		_sprintf
   869 ;; This function is called by:
   870 ;;		_main
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           
   875                           ;psect for function _loop
   876  065F                     _loop:	
   877  065F                     l82:	
   878                           ;incstack = 0
   879                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   880                           ;principalEUSART.c: 54: while(1){
   881                           
   882                           
   883                           ;principalEUSART.c: 55: sprintf(buffer,"Escribe num:\n");
   884  065F  300A               	movlw	low (STR_1| (0+32768))
   885  0660  0020               	movlb	0	; select bank0
   886  0661  00A0               	movwf	sprintf@f
   887  0662  3088               	movlw	high (STR_1| (0+32768))
   888  0663  00A1               	movwf	sprintf@f+1
   889  0664  3033               	movlw	_buffer& (0+255)
   890  0665  3187  2735  3186   	fcall	_sprintf
   891  0668                     l1050:	
   892                           ;principalEUSART.c: 56: while(busyEUSART());
   893                           
   894  0668  3185  2596  3186   	fcall	_busyEUSART
   895  066B  3800               	iorlw	0
   896  066C  1D03               	skipz
   897  066D  2E68               	goto	l1050
   898                           
   899                           ;principalEUSART.c: 57: putsEUSART(buffer);
   900  066E  3033               	movlw	_buffer& (0+255)
   901  066F  3185  25CE  3186   	fcall	_putsEUSART
   902                           
   903                           ;principalEUSART.c: 58: leerEusart();
   904  0672  3186  262F  3186   	fcall	_leerEusart
   905                           
   906                           ;principalEUSART.c: 59: num*=2;
   907  0675  3001               	movlw	1
   908  0676  0020               	movlb	0	; select bank0
   909  0677                     u775:	
   910  0677  35B1               	lslf	_num,f
   911  0678  0DB2               	rlf	_num+1,f
   912  0679  0B89               	decfsz	9,f
   913  067A  2E77               	goto	u775
   914                           
   915                           ;principalEUSART.c: 60: sprintf(buffer,"hola %u\n",num);
   916  067B  3018               	movlw	low (STR_2| (0+32768))
   917  067C  00A0               	movwf	sprintf@f
   918  067D  3088               	movlw	high (STR_2| (0+32768))
   919  067E  00A1               	movwf	sprintf@f+1
   920  067F  0832               	movf	_num+1,w
   921  0680  01A3               	clrf	?_sprintf+3
   922  0681  07A3               	addwf	?_sprintf+3,f
   923  0682  0831               	movf	_num,w
   924  0683  01A2               	clrf	?_sprintf+2
   925  0684  07A2               	addwf	?_sprintf+2,f
   926  0685  3033               	movlw	_buffer& (0+255)
   927  0686  3187  2735  3186   	fcall	_sprintf
   928  0689                     l1058:	
   929                           ;principalEUSART.c: 61: while(busyEUSART());
   930                           
   931  0689  3185  2596  3186   	fcall	_busyEUSART
   932  068C  3800               	iorlw	0
   933  068D  1D03               	skipz
   934  068E  2E89               	goto	l1058
   935                           
   936                           ;principalEUSART.c: 62: putsEUSART(buffer);
   937  068F  3033               	movlw	_buffer& (0+255)
   938  0690  3185  25CE  3186   	fcall	_putsEUSART
   939  0693  2E5F               	goto	l82
   940  0694                     __end_of_loop:	
   941                           
   942                           	psect	text4
   943  0735                     __ptext4:	
   944 ;; *************** function _sprintf *****************
   945 ;; Defined at:
   946 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  sp              1    wreg     PTR unsigned char 
   949 ;;		 -> buffer(10), 
   950 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   951 ;;		 -> STR_2(9), STR_1(14), 
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  sp              1   15[BANK0 ] PTR unsigned char 
   954 ;;		 -> buffer(10), 
   955 ;;  _val            4   10[BANK0 ] struct .
   956 ;;  c               1   16[BANK0 ] char 
   957 ;;  prec            1   14[BANK0 ] char 
   958 ;;  ap              1    9[BANK0 ] PTR void [1]
   959 ;;		 -> ?_sprintf(2), 
   960 ;;  flag            1    8[BANK0 ] unsigned char 
   961 ;; Return value:  Size  Location     Type
   962 ;;                  2    0[BANK0 ] int 
   963 ;; Registers used:
   964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   970 ;;      Params:         0       4       0       0       0       0       0       0
   971 ;;      Locals:         0       9       0       0       0       0       0       0
   972 ;;      Temps:          0       4       0       0       0       0       0       0
   973 ;;      Totals:         0      17       0       0       0       0       0       0
   974 ;;Total ram usage:       17 bytes
   975 ;; Hardware stack levels used:    1
   976 ;; Hardware stack levels required when called:    1
   977 ;; This function calls:
   978 ;;		___lwdiv
   979 ;;		___lwmod
   980 ;; This function is called by:
   981 ;;		_loop
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           
   986                           ;psect for function _sprintf
   987  0735                     _sprintf:	
   988                           
   989                           ;incstack = 0
   990                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   991                           ;sprintf@sp stored from wreg
   992  0735  0020               	movlb	0	; select bank0
   993  0736  00AF               	movwf	sprintf@sp
   994                           
   995                           ;doprnt.c: 494: va_list ap;
   996                           ;doprnt.c: 499: signed char c;
   997                           ;doprnt.c: 506: signed char prec;
   998                           ;doprnt.c: 508: unsigned char flag;
   999                           ;doprnt.c: 527: union {
  1000                           ;doprnt.c: 528: unsigned int _val;
  1001                           ;doprnt.c: 529: struct {
  1002                           ;doprnt.c: 530: const char * _cp;
  1003                           ;doprnt.c: 531: unsigned _len;
  1004                           ;doprnt.c: 532: } _str;
  1005                           ;doprnt.c: 533: } _val;
  1006                           ;doprnt.c: 542: *ap = __va_start();
  1007  0737  3022               	movlw	(?_sprintf+2)& (0+255)
  1008  0738  00A4               	movwf	??_sprintf
  1009  0739  0824               	movf	??_sprintf,w
  1010  073A  00A9               	movwf	sprintf@ap
  1011  073B                     l1042:	
  1012                           ;doprnt.c: 545: while(c = *f++) {
  1013                           
  1014  073B  0821               	movf	sprintf@f+1,w
  1015  073C  00A5               	movwf	??_sprintf+1
  1016  073D  0820               	movf	sprintf@f,w
  1017  073E  00A4               	movwf	??_sprintf
  1018  073F  0AA0               	incf	sprintf@f,f
  1019  0740  1903               	skipnz
  1020  0741  0AA1               	incf	sprintf@f+1,f
  1021  0742  0824               	movf	??_sprintf,w
  1022  0743  0084               	movwf	4
  1023  0744  0825               	movf	??_sprintf+1,w
  1024  0745  0085               	movwf	5
  1025  0746  0800               	movf	0,w	;code access
  1026  0747  00A6               	movwf	??_sprintf+2
  1027  0748  0826               	movf	??_sprintf+2,w
  1028  0749  00B0               	movwf	sprintf@c
  1029  074A  08B0               	movf	sprintf@c,f
  1030  074B  1903               	btfsc	3,2
  1031  074C  2FEB               	goto	l1044
  1032                           
  1033                           ;doprnt.c: 547: if(c != '%')
  1034  074D  0830               	movf	sprintf@c,w
  1035  074E  3A25               	xorlw	37
  1036  074F  1903               	skipnz
  1037  0750  2F5D               	goto	l1006
  1038                           
  1039                           ;doprnt.c: 549: {
  1040                           ;doprnt.c: 550: ((*sp++ = (c)));
  1041  0751  0830               	movf	sprintf@c,w
  1042  0752  00A4               	movwf	??_sprintf
  1043  0753  082F               	movf	sprintf@sp,w
  1044  0754  0086               	movwf	6
  1045  0755  0187               	clrf	7
  1046  0756  0824               	movf	??_sprintf,w
  1047  0757  0081               	movwf	1
  1048  0758  3001               	movlw	1
  1049  0759  00A4               	movwf	??_sprintf
  1050  075A  0824               	movf	??_sprintf,w
  1051  075B  07AF               	addwf	sprintf@sp,f
  1052                           
  1053                           ;doprnt.c: 551: continue;
  1054  075C  2F3B               	goto	l1042
  1055  075D                     l1006:	
  1056                           
  1057                           ;doprnt.c: 552: }
  1058                           ;doprnt.c: 557: flag = 0;
  1059  075D  01A8               	clrf	sprintf@flag
  1060                           
  1061                           ;doprnt.c: 644: switch(c = *f++) {
  1062  075E  2F64               	goto	l1012
  1063  075F                     l1008:	
  1064                           ;doprnt.c: 826: case 'u':
  1065                           
  1066                           ;doprnt.c: 822: continue;
  1067                           
  1068                           ;doprnt.c: 811: default:
  1069                           
  1070                           ;doprnt.c: 647: goto alldone;
  1071                           
  1072                           ;doprnt.c: 646: case 0:
  1073                           
  1074                           
  1075                           ;doprnt.c: 827: flag |= 0xC0;
  1076  075F  30C0               	movlw	192
  1077  0760  00A4               	movwf	??_sprintf
  1078  0761  0824               	movf	??_sprintf,w
  1079  0762  04A8               	iorwf	sprintf@flag,f
  1080                           
  1081                           ;doprnt.c: 831: }
  1082                           
  1083                           ;doprnt.c: 828: break;
  1084  0763  2F78               	goto	l1014
  1085  0764                     l1012:	
  1086  0764  0821               	movf	sprintf@f+1,w
  1087  0765  00A5               	movwf	??_sprintf+1
  1088  0766  0820               	movf	sprintf@f,w
  1089  0767  00A4               	movwf	??_sprintf
  1090  0768  0AA0               	incf	sprintf@f,f
  1091  0769  1903               	skipnz
  1092  076A  0AA1               	incf	sprintf@f+1,f
  1093  076B  0824               	movf	??_sprintf,w
  1094  076C  0084               	movwf	4
  1095  076D  0825               	movf	??_sprintf+1,w
  1096  076E  0085               	movwf	5
  1097  076F  0800               	movf	0,w	;code access
  1098  0770  00B0               	movwf	sprintf@c
  1099                           
  1100                           ; Switch size 1, requested type "space"
  1101                           ; Number of cases is 2, Range of values is 0 to 117
  1102                           ; switch strategies available:
  1103                           ; Name         Instructions Cycles
  1104                           ; simple_byte            7     4 (average)
  1105                           ; direct_byte          242     6 (fixed)
  1106                           ; jumptable            260     6 (fixed)
  1107                           ;	Chosen strategy is simple_byte
  1108  0771  3A00               	xorlw	0	; case 0
  1109  0772  1903               	skipnz
  1110  0773  2FEB               	goto	l1044
  1111  0774  3A75               	xorlw	117	; case 117
  1112  0775  1903               	skipnz
  1113  0776  2F5F               	goto	l1008
  1114  0777  2F3B               	goto	l1042
  1115  0778                     l1014:	
  1116                           
  1117                           ;doprnt.c: 1282: {
  1118                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1119  0778  0829               	movf	sprintf@ap,w
  1120  0779  0086               	movwf	6
  1121  077A  0187               	clrf	7
  1122  077B  3F40               	moviw [0]fsr1
  1123  077C  00AA               	movwf	sprintf@_val
  1124  077D  3F41               	moviw [1]fsr1
  1125  077E  00AB               	movwf	sprintf@_val+1
  1126  077F  3002               	movlw	2
  1127  0780  00A4               	movwf	??_sprintf
  1128  0781  0824               	movf	??_sprintf,w
  1129  0782  07A9               	addwf	sprintf@ap,f
  1130                           
  1131                           ;doprnt.c: 1296: }
  1132                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1133  0783  01B0               	clrf	sprintf@c
  1134  0784  0AB0               	incf	sprintf@c,f
  1135  0785  0830               	movf	sprintf@c,w
  1136  0786  3A05               	xorlw	5
  1137  0787  1903               	btfsc	3,2
  1138  0788  2FA8               	goto	l1032
  1139  0789                     l1024:	
  1140                           
  1141                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1142  0789  0830               	movf	sprintf@c,w
  1143  078A  00A4               	movwf	??_sprintf
  1144  078B  01A5               	clrf	??_sprintf+1
  1145  078C  35A4               	lslf	??_sprintf,f
  1146  078D  0DA5               	rlf	??_sprintf+1,f
  1147  078E  3000               	movlw	low (_dpowers| (0+32768))
  1148  078F  0724               	addwf	??_sprintf,w
  1149  0790  0084               	movwf	4
  1150  0791  3088               	movlw	high (_dpowers| (0+32768))
  1151  0792  3D25               	addwfc	??_sprintf+1,w
  1152  0793  0085               	movwf	5
  1153  0794  3F00               	moviw [0]fsr0
  1154  0795  00A6               	movwf	??_sprintf+2
  1155  0796  3F01               	moviw [1]fsr0
  1156  0797  00A7               	movwf	??_sprintf+3
  1157  0798  0827               	movf	??_sprintf+3,w
  1158  0799  022B               	subwf	sprintf@_val+1,w
  1159  079A  1D03               	skipz
  1160  079B  2F9E               	goto	u725
  1161  079C  0826               	movf	??_sprintf+2,w
  1162  079D  022A               	subwf	sprintf@_val,w
  1163  079E                     u725:	
  1164  079E  1C03               	btfss	3,0
  1165  079F  2FA8               	goto	l1032
  1166                           
  1167                           ;doprnt.c: 1316: break;
  1168  07A0  3001               	movlw	1
  1169  07A1  00A4               	movwf	??_sprintf
  1170  07A2  0824               	movf	??_sprintf,w
  1171  07A3  07B0               	addwf	sprintf@c,f
  1172  07A4  0830               	movf	sprintf@c,w
  1173  07A5  3A05               	xorlw	5
  1174  07A6  1D03               	skipz
  1175  07A7  2F89               	goto	l1024
  1176  07A8                     l1032:	
  1177                           
  1178                           ;doprnt.c: 1431: {
  1179                           ;doprnt.c: 1478: }
  1180                           ;doprnt.c: 1481: prec = c;
  1181  07A8  0830               	movf	sprintf@c,w
  1182  07A9  00A4               	movwf	??_sprintf
  1183  07AA  0824               	movf	??_sprintf,w
  1184  07AB  00AE               	movwf	sprintf@prec
  1185  07AC                     l1040:	
  1186                           ;doprnt.c: 1483: while(prec--) {
  1187                           
  1188  07AC  30FF               	movlw	-1
  1189  07AD  00A4               	movwf	??_sprintf
  1190  07AE  0824               	movf	??_sprintf,w
  1191  07AF  07AE               	addwf	sprintf@prec,f
  1192  07B0  082E               	movf	sprintf@prec,w
  1193  07B1  3AFF               	xorlw	255
  1194  07B2  1903               	btfsc	3,2
  1195  07B3  2F3B               	goto	l1042
  1196                           
  1197                           ;doprnt.c: 1487: {
  1198                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1199  07B4  300A               	movlw	10
  1200  07B5  00F8               	movwf	___lwmod@divisor
  1201  07B6  3000               	movlw	0
  1202  07B7  00F9               	movwf	___lwmod@divisor+1
  1203  07B8  082E               	movf	sprintf@prec,w
  1204  07B9  00A4               	movwf	??_sprintf
  1205  07BA  01A5               	clrf	??_sprintf+1
  1206  07BB  35A4               	lslf	??_sprintf,f
  1207  07BC  0DA5               	rlf	??_sprintf+1,f
  1208  07BD  3000               	movlw	low (_dpowers| (0+32768))
  1209  07BE  0724               	addwf	??_sprintf,w
  1210  07BF  0084               	movwf	4
  1211  07C0  3088               	movlw	high (_dpowers| (0+32768))
  1212  07C1  3D25               	addwfc	??_sprintf+1,w
  1213  07C2  0085               	movwf	5
  1214  07C3  3F00               	moviw [0]fsr0
  1215  07C4  00F0               	movwf	___lwdiv@divisor
  1216  07C5  3F01               	moviw [1]fsr0
  1217  07C6  00F1               	movwf	___lwdiv@divisor+1
  1218  07C7  082B               	movf	sprintf@_val+1,w
  1219  07C8  01F3               	clrf	___lwdiv@dividend+1
  1220  07C9  07F3               	addwf	___lwdiv@dividend+1,f
  1221  07CA  082A               	movf	sprintf@_val,w
  1222  07CB  01F2               	clrf	___lwdiv@dividend
  1223  07CC  07F2               	addwf	___lwdiv@dividend,f
  1224  07CD  3186  2694  3187   	fcall	___lwdiv
  1225  07D0  0871               	movf	?___lwdiv+1,w
  1226  07D1  01FB               	clrf	___lwmod@dividend+1
  1227  07D2  07FB               	addwf	___lwmod@dividend+1,f
  1228  07D3  0870               	movf	?___lwdiv,w
  1229  07D4  01FA               	clrf	___lwmod@dividend
  1230  07D5  07FA               	addwf	___lwmod@dividend,f
  1231  07D6  3186  2601  3187   	fcall	___lwmod
  1232  07D9  0878               	movf	?___lwmod,w
  1233  07DA  3E30               	addlw	48
  1234  07DB  0020               	movlb	0	; select bank0
  1235  07DC  00A6               	movwf	??_sprintf+2
  1236  07DD  0826               	movf	??_sprintf+2,w
  1237  07DE  00B0               	movwf	sprintf@c
  1238                           
  1239                           ;doprnt.c: 1532: }
  1240                           ;doprnt.c: 1533: ((*sp++ = (c)));
  1241  07DF  0830               	movf	sprintf@c,w
  1242  07E0  00A4               	movwf	??_sprintf
  1243  07E1  082F               	movf	sprintf@sp,w
  1244  07E2  0086               	movwf	6
  1245  07E3  0187               	clrf	7
  1246  07E4  0824               	movf	??_sprintf,w
  1247  07E5  0081               	movwf	1
  1248  07E6  3001               	movlw	1
  1249  07E7  00A4               	movwf	??_sprintf
  1250  07E8  0824               	movf	??_sprintf,w
  1251  07E9  07AF               	addwf	sprintf@sp,f
  1252  07EA  2FAC               	goto	l1040
  1253  07EB                     l1044:	
  1254                           ;doprnt.c: 1534: }
  1255                           ;doprnt.c: 1542: }
  1256                           ;doprnt.c: 1544: alldone:
  1257                           
  1258                           
  1259                           ;doprnt.c: 1547: *sp = 0;
  1260  07EB  082F               	movf	sprintf@sp,w
  1261  07EC  0086               	movwf	6
  1262  07ED  0187               	clrf	7
  1263  07EE  0181               	clrf	1
  1264  07EF  0008               	return
  1265  07F0                     __end_of_sprintf:	
  1266                           ;doprnt.c: 1549: return 0;
  1267                           ;	Return value of _sprintf is never used
  1268                           
  1269                           
  1270                           	psect	text5
  1271  0601                     __ptext5:	
  1272 ;; *************** function ___lwmod *****************
  1273 ;; Defined at:
  1274 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  divisor         2    8[COMMON] unsigned int 
  1277 ;;  dividend        2   10[COMMON] unsigned int 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  counter         1   13[COMMON] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  2    8[COMMON] unsigned int 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1289 ;;      Params:         4       0       0       0       0       0       0       0
  1290 ;;      Locals:         1       0       0       0       0       0       0       0
  1291 ;;      Temps:          1       0       0       0       0       0       0       0
  1292 ;;      Totals:         6       0       0       0       0       0       0       0
  1293 ;;Total ram usage:        6 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; This function calls:
  1296 ;;		Nothing
  1297 ;; This function is called by:
  1298 ;;		_sprintf
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           
  1303                           ;psect for function ___lwmod
  1304  0601                     ___lwmod:	
  1305                           
  1306                           ;incstack = 0
  1307                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1308  0601  0879               	movf	___lwmod@divisor+1,w
  1309  0602  0478               	iorwf	___lwmod@divisor,w
  1310  0603  1903               	skipnz
  1311  0604  2E28               	goto	l970
  1312  0605  01FD               	clrf	___lwmod@counter
  1313  0606  0AFD               	incf	___lwmod@counter,f
  1314  0607                     l960:	
  1315  0607  1BF9               	btfsc	___lwmod@divisor+1,7
  1316  0608  2E13               	goto	l962
  1317  0609  3001               	movlw	1
  1318  060A                     u615:	
  1319  060A  35F8               	lslf	___lwmod@divisor,f
  1320  060B  0DF9               	rlf	___lwmod@divisor+1,f
  1321  060C  0B89               	decfsz	9,f
  1322  060D  2E0A               	goto	u615
  1323  060E  3001               	movlw	1
  1324  060F  00FC               	movwf	??___lwmod
  1325  0610  087C               	movf	??___lwmod,w
  1326  0611  07FD               	addwf	___lwmod@counter,f
  1327  0612  2E07               	goto	l960
  1328  0613                     l962:	
  1329  0613  0879               	movf	___lwmod@divisor+1,w
  1330  0614  027B               	subwf	___lwmod@dividend+1,w
  1331  0615  1D03               	skipz
  1332  0616  2E19               	goto	u635
  1333  0617  0878               	movf	___lwmod@divisor,w
  1334  0618  027A               	subwf	___lwmod@dividend,w
  1335  0619                     u635:	
  1336  0619  1C03               	skipc
  1337  061A  2E1F               	goto	l966
  1338  061B  0878               	movf	___lwmod@divisor,w
  1339  061C  02FA               	subwf	___lwmod@dividend,f
  1340  061D  0879               	movf	___lwmod@divisor+1,w
  1341  061E  3BFB               	subwfb	___lwmod@dividend+1,f
  1342  061F                     l966:	
  1343  061F  3001               	movlw	1
  1344  0620                     u645:	
  1345  0620  36F9               	lsrf	___lwmod@divisor+1,f
  1346  0621  0CF8               	rrf	___lwmod@divisor,f
  1347  0622  0B89               	decfsz	9,f
  1348  0623  2E20               	goto	u645
  1349  0624  3001               	movlw	1
  1350  0625  02FD               	subwf	___lwmod@counter,f
  1351  0626  1D03               	btfss	3,2
  1352  0627  2E13               	goto	l962
  1353  0628                     l970:	
  1354  0628  087B               	movf	___lwmod@dividend+1,w
  1355  0629  01F9               	clrf	?___lwmod+1
  1356  062A  07F9               	addwf	?___lwmod+1,f
  1357  062B  087A               	movf	___lwmod@dividend,w
  1358  062C  01F8               	clrf	?___lwmod
  1359  062D  07F8               	addwf	?___lwmod,f
  1360  062E  0008               	return
  1361  062F                     __end_of___lwmod:	
  1362                           
  1363                           	psect	text6
  1364  0694                     __ptext6:	
  1365 ;; *************** function ___lwdiv *****************
  1366 ;; Defined at:
  1367 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  divisor         2    0[COMMON] unsigned int 
  1370 ;;  dividend        2    2[COMMON] unsigned int 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  quotient        2    5[COMMON] unsigned int 
  1373 ;;  counter         1    7[COMMON] unsigned char 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  2    0[COMMON] unsigned int 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2, status,0
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1383 ;;      Params:         4       0       0       0       0       0       0       0
  1384 ;;      Locals:         3       0       0       0       0       0       0       0
  1385 ;;      Temps:          1       0       0       0       0       0       0       0
  1386 ;;      Totals:         8       0       0       0       0       0       0       0
  1387 ;;Total ram usage:        8 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_sprintf
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           
  1397                           ;psect for function ___lwdiv
  1398  0694                     ___lwdiv:	
  1399                           
  1400                           ;incstack = 0
  1401                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1402  0694  01F5               	clrf	___lwdiv@quotient
  1403  0695  01F6               	clrf	___lwdiv@quotient+1
  1404  0696  0871               	movf	___lwdiv@divisor+1,w
  1405  0697  0470               	iorwf	___lwdiv@divisor,w
  1406  0698  1903               	skipnz
  1407  0699  2EC3               	goto	l948
  1408  069A  01F7               	clrf	___lwdiv@counter
  1409  069B  0AF7               	incf	___lwdiv@counter,f
  1410  069C                     l936:	
  1411  069C  1BF1               	btfsc	___lwdiv@divisor+1,7
  1412  069D  2EA8               	goto	l938
  1413  069E  3001               	movlw	1
  1414  069F                     u545:	
  1415  069F  35F0               	lslf	___lwdiv@divisor,f
  1416  06A0  0DF1               	rlf	___lwdiv@divisor+1,f
  1417  06A1  0B89               	decfsz	9,f
  1418  06A2  2E9F               	goto	u545
  1419  06A3  3001               	movlw	1
  1420  06A4  00F4               	movwf	??___lwdiv
  1421  06A5  0874               	movf	??___lwdiv,w
  1422  06A6  07F7               	addwf	___lwdiv@counter,f
  1423  06A7  2E9C               	goto	l936
  1424  06A8                     l938:	
  1425  06A8  3001               	movlw	1
  1426  06A9                     u565:	
  1427  06A9  35F5               	lslf	___lwdiv@quotient,f
  1428  06AA  0DF6               	rlf	___lwdiv@quotient+1,f
  1429  06AB  0B89               	decfsz	9,f
  1430  06AC  2EA9               	goto	u565
  1431  06AD  0871               	movf	___lwdiv@divisor+1,w
  1432  06AE  0273               	subwf	___lwdiv@dividend+1,w
  1433  06AF  1D03               	skipz
  1434  06B0  2EB3               	goto	u575
  1435  06B1  0870               	movf	___lwdiv@divisor,w
  1436  06B2  0272               	subwf	___lwdiv@dividend,w
  1437  06B3                     u575:	
  1438  06B3  1C03               	skipc
  1439  06B4  2EBA               	goto	l944
  1440  06B5  0870               	movf	___lwdiv@divisor,w
  1441  06B6  02F2               	subwf	___lwdiv@dividend,f
  1442  06B7  0871               	movf	___lwdiv@divisor+1,w
  1443  06B8  3BF3               	subwfb	___lwdiv@dividend+1,f
  1444  06B9  1475               	bsf	___lwdiv@quotient,0
  1445  06BA                     l944:	
  1446  06BA  3001               	movlw	1
  1447  06BB                     u585:	
  1448  06BB  36F1               	lsrf	___lwdiv@divisor+1,f
  1449  06BC  0CF0               	rrf	___lwdiv@divisor,f
  1450  06BD  0B89               	decfsz	9,f
  1451  06BE  2EBB               	goto	u585
  1452  06BF  3001               	movlw	1
  1453  06C0  02F7               	subwf	___lwdiv@counter,f
  1454  06C1  1D03               	btfss	3,2
  1455  06C2  2EA8               	goto	l938
  1456  06C3                     l948:	
  1457  06C3  0876               	movf	___lwdiv@quotient+1,w
  1458  06C4  01F1               	clrf	?___lwdiv+1
  1459  06C5  07F1               	addwf	?___lwdiv+1,f
  1460  06C6  0875               	movf	___lwdiv@quotient,w
  1461  06C7  01F0               	clrf	?___lwdiv
  1462  06C8  07F0               	addwf	?___lwdiv,f
  1463  06C9  0008               	return
  1464  06CA                     __end_of___lwdiv:	
  1465                           
  1466                           	psect	text7
  1467  05CE                     __ptext7:	
  1468 ;; *************** function _putsEUSART *****************
  1469 ;; Defined at:
  1470 ;;		line 49 in file "usart.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  buffer          1    wreg     PTR unsigned char 
  1473 ;;		 -> buffer(10), 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  buffer          1    1[COMMON] PTR unsigned char 
  1476 ;;		 -> buffer(10), 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;		None               void
  1479 ;; Registers used:
  1480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1486 ;;      Params:         0       0       0       0       0       0       0       0
  1487 ;;      Locals:         1       0       0       0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0       0
  1489 ;;      Totals:         1       0       0       0       0       0       0       0
  1490 ;;Total ram usage:        1 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    1
  1493 ;; This function calls:
  1494 ;;		_busyEUSART
  1495 ;;		_writeEUSART
  1496 ;; This function is called by:
  1497 ;;		_loop
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           
  1502                           ;psect for function _putsEUSART
  1503  05CE                     _putsEUSART:	
  1504                           
  1505                           ;incstack = 0
  1506                           ; Regs used in _putsEUSART: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1507                           ;putsEUSART@buffer stored from wreg
  1508  05CE  00F1               	movwf	putsEUSART@buffer
  1509  05CF                     l974:	
  1510                           ;usart.c: 51: while(busyEUSART());
  1511                           
  1512                           ;usart.c: 50: do{
  1513                           
  1514  05CF  3185  2596  3185   	fcall	_busyEUSART
  1515  05D2  3800               	iorlw	0
  1516  05D3  1D03               	skipz
  1517  05D4  2DCF               	goto	l974
  1518                           
  1519                           ;usart.c: 52: writeEUSART(*buffer);
  1520  05D5  0871               	movf	putsEUSART@buffer,w
  1521  05D6  0086               	movwf	6
  1522  05D7  0187               	clrf	7
  1523  05D8  0801               	movf	1,w
  1524  05D9  3185  258A  3185   	fcall	_writeEUSART
  1525                           
  1526                           ;usart.c: 53: }while(*buffer++);
  1527  05DC  0871               	movf	putsEUSART@buffer,w
  1528  05DD  0086               	movwf	6
  1529  05DE  0187               	clrf	7
  1530  05DF  0AF1               	incf	putsEUSART@buffer,f
  1531  05E0  0881               	movf	1,f
  1532  05E1  1903               	btfsc	3,2
  1533  05E2  0008               	return
  1534  05E3  2DCF               	goto	l974
  1535  05E4                     __end_of_putsEUSART:	
  1536                           
  1537                           	psect	text8
  1538  058A                     __ptext8:	
  1539 ;; *************** function _writeEUSART *****************
  1540 ;; Defined at:
  1541 ;;		line 45 in file "usart.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  data            1    wreg     unsigned char 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  data            1    0[COMMON] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;		None               void
  1548 ;; Registers used:
  1549 ;;		wreg
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1555 ;;      Params:         0       0       0       0       0       0       0       0
  1556 ;;      Locals:         1       0       0       0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0       0
  1558 ;;      Totals:         1       0       0       0       0       0       0       0
  1559 ;;Total ram usage:        1 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_putsEUSART
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           
  1569                           ;psect for function _writeEUSART
  1570  058A                     _writeEUSART:	
  1571                           
  1572                           ;incstack = 0
  1573                           ; Regs used in _writeEUSART: [wreg]
  1574                           ;writeEUSART@data stored from wreg
  1575  058A  00F0               	movwf	writeEUSART@data
  1576                           
  1577                           ;usart.c: 46: TXREG=data;
  1578  058B  0870               	movf	writeEUSART@data,w
  1579  058C  0023               	movlb	3	; select bank3
  1580  058D  009A               	movwf	26	;volatile
  1581  058E  0008               	return
  1582  058F                     __end_of_writeEUSART:	
  1583                           
  1584                           	psect	text9
  1585  0596                     __ptext9:	
  1586 ;; *************** function _busyEUSART *****************
  1587 ;; Defined at:
  1588 ;;		line 33 in file "usart.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;		None
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      unsigned char 
  1595 ;; Registers used:
  1596 ;;		wreg
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1602 ;;      Params:         0       0       0       0       0       0       0       0
  1603 ;;      Locals:         0       0       0       0       0       0       0       0
  1604 ;;      Temps:          0       0       0       0       0       0       0       0
  1605 ;;      Totals:         0       0       0       0       0       0       0       0
  1606 ;;Total ram usage:        0 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_putsEUSART
  1612 ;;		_loop
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           
  1617                           ;psect for function _busyEUSART
  1618  0596                     _busyEUSART:	
  1619                           
  1620                           ;usart.c: 34: if(!TXSTAbits.TRMT)
  1621                           
  1622                           ;incstack = 0
  1623                           ; Regs used in _busyEUSART: [wreg]
  1624  0596  0023               	movlb	3	; select bank3
  1625  0597  189E               	btfsc	30,1	;volatile
  1626  0598  2D9B               	goto	l878
  1627                           
  1628                           ;usart.c: 35: return 1;
  1629  0599  3001               	movlw	1
  1630  059A  0008               	return
  1631  059B                     l878:	
  1632                           
  1633                           ;usart.c: 36: return 0;
  1634  059B  3000               	movlw	0
  1635  059C  0008               	return
  1636  059D                     __end_of_busyEUSART:	
  1637                           
  1638                           	psect	text10
  1639  062F                     __ptext10:	
  1640 ;; *************** function _leerEusart *****************
  1641 ;; Defined at:
  1642 ;;		line 41 in file "principalEUSART.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  i               1    2[BANK0 ] unsigned char 
  1647 ;;  c               1    1[BANK0 ] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;		None               void
  1650 ;; Registers used:
  1651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1657 ;;      Params:         0       0       0       0       0       0       0       0
  1658 ;;      Locals:         0       2       0       0       0       0       0       0
  1659 ;;      Temps:          0       1       0       0       0       0       0       0
  1660 ;;      Totals:         0       3       0       0       0       0       0       0
  1661 ;;Total ram usage:        3 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    2
  1664 ;; This function calls:
  1665 ;;		_atoi
  1666 ;;		_dataRdyEUSART
  1667 ;;		_readEUSART
  1668 ;; This function is called by:
  1669 ;;		_loop
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           
  1674                           ;psect for function _leerEusart
  1675  062F                     _leerEusart:	
  1676                           
  1677                           ;principalEUSART.c: 42: unsigned char c,i=0;
  1678                           
  1679                           ;incstack = 0
  1680                           ; Regs used in _leerEusart: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1681  062F  0020               	movlb	0	; select bank0
  1682  0630  01A2               	clrf	leerEusart@i
  1683  0631                     l982:	
  1684                           ;principalEUSART.c: 44: while(!dataRdyEUSART());
  1685                           
  1686                           ;principalEUSART.c: 43: do{
  1687                           
  1688  0631  3185  2585  3186   	fcall	_dataRdyEUSART
  1689  0634  3A00               	xorlw	0
  1690  0635  1903               	skipnz
  1691  0636  2E31               	goto	l982
  1692                           
  1693                           ;principalEUSART.c: 45: c=readEUSART();
  1694  0637  3185  258F  3186   	fcall	_readEUSART
  1695  063A  0020               	movlb	0	; select bank0
  1696  063B  00A0               	movwf	??_leerEusart
  1697  063C  0820               	movf	??_leerEusart,w
  1698  063D  00A1               	movwf	leerEusart@c
  1699                           
  1700                           ;principalEUSART.c: 46: if(c=='\n')
  1701  063E  0821               	movf	leerEusart@c,w
  1702  063F  3A0A               	xorlw	10
  1703  0640  1903               	btfsc	3,2
  1704  0641  2E4F               	goto	l994
  1705                           
  1706                           ;principalEUSART.c: 48: buffer[i++]=c;
  1707                           
  1708                           ;principalEUSART.c: 47: break;
  1709  0642  0821               	movf	leerEusart@c,w
  1710  0643  00A0               	movwf	??_leerEusart
  1711  0644  0822               	movf	leerEusart@i,w
  1712  0645  3E33               	addlw	_buffer& (0+255)
  1713  0646  0086               	movwf	6
  1714  0647  0187               	clrf	7
  1715  0648  0820               	movf	??_leerEusart,w
  1716  0649  0081               	movwf	1
  1717  064A  3001               	movlw	1
  1718  064B  00A0               	movwf	??_leerEusart
  1719  064C  0820               	movf	??_leerEusart,w
  1720  064D  07A2               	addwf	leerEusart@i,f
  1721                           
  1722                           ;principalEUSART.c: 49: }while(1);
  1723  064E  2E31               	goto	l982
  1724  064F                     l994:	
  1725                           
  1726                           ;principalEUSART.c: 50: buffer[i]=0;
  1727  064F  0822               	movf	leerEusart@i,w
  1728  0650  3E33               	addlw	_buffer& (0+255)
  1729  0651  0086               	movwf	6
  1730  0652  0187               	clrf	7
  1731  0653  0181               	clrf	1
  1732                           
  1733                           ;principalEUSART.c: 51: num=atoi(buffer);
  1734  0654  3033               	movlw	_buffer& (0+255)
  1735  0655  3186  26CA         	fcall	_atoi
  1736  0657  0877               	movf	?_atoi+1,w
  1737  0658  0020               	movlb	0	; select bank0
  1738  0659  01B2               	clrf	_num+1
  1739  065A  07B2               	addwf	_num+1,f
  1740  065B  0876               	movf	?_atoi,w
  1741  065C  01B1               	clrf	_num
  1742  065D  07B1               	addwf	_num,f
  1743  065E  0008               	return
  1744  065F                     __end_of_leerEusart:	
  1745                           
  1746                           	psect	text11
  1747  058F                     __ptext11:	
  1748 ;; *************** function _readEUSART *****************
  1749 ;; Defined at:
  1750 ;;		line 39 in file "usart.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;		None
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;  data            1    1[COMMON] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      unsigned char 
  1757 ;; Registers used:
  1758 ;;		wreg
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1764 ;;      Params:         0       0       0       0       0       0       0       0
  1765 ;;      Locals:         1       0       0       0       0       0       0       0
  1766 ;;      Temps:          1       0       0       0       0       0       0       0
  1767 ;;      Totals:         2       0       0       0       0       0       0       0
  1768 ;;Total ram usage:        2 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_leerEusart
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           
  1778                           ;psect for function _readEUSART
  1779  058F                     _readEUSART:	
  1780                           
  1781                           ;usart.c: 40: char data;
  1782                           ;usart.c: 41: data=RCREG;
  1783                           
  1784                           ;incstack = 0
  1785                           ; Regs used in _readEUSART: [wreg]
  1786  058F  0023               	movlb	3	; select bank3
  1787  0590  0819               	movf	25,w	;volatile
  1788  0591  00F0               	movwf	??_readEUSART
  1789  0592  0870               	movf	??_readEUSART,w
  1790  0593  00F1               	movwf	readEUSART@data
  1791                           
  1792                           ;usart.c: 42: return data;
  1793  0594  0871               	movf	readEUSART@data,w
  1794  0595  0008               	return
  1795  0596                     __end_of_readEUSART:	
  1796                           
  1797                           	psect	text12
  1798  0585                     __ptext12:	
  1799 ;; *************** function _dataRdyEUSART *****************
  1800 ;; Defined at:
  1801 ;;		line 56 in file "usart.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      unsigned char 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1815 ;;      Params:         0       0       0       0       0       0       0       0
  1816 ;;      Locals:         0       0       0       0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0
  1818 ;;      Totals:         0       0       0       0       0       0       0       0
  1819 ;;Total ram usage:        0 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_leerEusart
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           
  1829                           ;psect for function _dataRdyEUSART
  1830  0585                     _dataRdyEUSART:	
  1831                           
  1832                           ;usart.c: 57: return PIR1bits.RCIF;
  1833                           
  1834                           ;incstack = 0
  1835                           ; Regs used in _dataRdyEUSART: [wreg+status,2+status,0]
  1836  0585  0020               	movlb	0	; select bank0
  1837  0586  0E11               	swapf	17,w	;volatile
  1838  0587  0C89               	rrf	9,f
  1839  0588  3901               	andlw	1
  1840  0589  0008               	return
  1841  058A                     __end_of_dataRdyEUSART:	
  1842                           
  1843                           	psect	text13
  1844  06CA                     __ptext13:	
  1845 ;; *************** function _atoi *****************
  1846 ;; Defined at:
  1847 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\atoi.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  s               1    wreg     PTR const unsigned char 
  1850 ;;		 -> buffer(10), 
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;  s               1   13[COMMON] PTR const unsigned char 
  1853 ;;		 -> buffer(10), 
  1854 ;;  a               2   11[COMMON] int 
  1855 ;;  sign            1   10[COMMON] unsigned char 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  2    6[COMMON] int 
  1858 ;; Registers used:
  1859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1865 ;;      Params:         2       0       0       0       0       0       0       0
  1866 ;;      Locals:         4       0       0       0       0       0       0       0
  1867 ;;      Temps:          2       0       0       0       0       0       0       0
  1868 ;;      Totals:         8       0       0       0       0       0       0       0
  1869 ;;Total ram usage:        8 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    1
  1872 ;; This function calls:
  1873 ;;		___wmul
  1874 ;;		_isdigit
  1875 ;; This function is called by:
  1876 ;;		_leerEusart
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _atoi
  1882  06CA                     _atoi:	
  1883                           
  1884                           ;incstack = 0
  1885                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1886                           ;atoi@s stored from wreg
  1887  06CA  00FD               	movwf	atoi@s
  1888  06CB                     l896:	
  1889  06CB  087D               	movf	atoi@s,w
  1890  06CC  0086               	movwf	6
  1891  06CD  0187               	clrf	7
  1892  06CE  0801               	movf	1,w
  1893  06CF  3A20               	xorlw	32
  1894  06D0  1D03               	btfss	3,2
  1895  06D1  2ED7               	goto	l898
  1896  06D2                     l894:	
  1897  06D2  3001               	movlw	1
  1898  06D3  00F8               	movwf	??_atoi
  1899  06D4  0878               	movf	??_atoi,w
  1900  06D5  07FD               	addwf	atoi@s,f
  1901  06D6  2ECB               	goto	l896
  1902  06D7                     l898:	
  1903  06D7  087D               	movf	atoi@s,w
  1904  06D8  0086               	movwf	6
  1905  06D9  0187               	clrf	7
  1906  06DA  0801               	movf	1,w
  1907  06DB  3A09               	xorlw	9
  1908  06DC  1903               	skipnz
  1909  06DD  2ED2               	goto	l894
  1910  06DE  01FB               	clrf	atoi@a
  1911  06DF  01FC               	clrf	atoi@a+1
  1912  06E0  01FA               	clrf	atoi@sign
  1913  06E1  087D               	movf	atoi@s,w
  1914  06E2  0086               	movwf	6
  1915  06E3  0187               	clrf	7
  1916  06E4  0801               	movf	1,w
  1917  06E5  3A2D               	xorlw	45
  1918  06E6  1D03               	skipz
  1919  06E7  2EED               	goto	l906
  1920  06E8  3001               	movlw	1
  1921  06E9  00F8               	movwf	??_atoi
  1922  06EA  0878               	movf	??_atoi,w
  1923  06EB  07FA               	addwf	atoi@sign,f
  1924  06EC  2EF4               	goto	l912
  1925  06ED                     l906:	
  1926  06ED  087D               	movf	atoi@s,w
  1927  06EE  0086               	movwf	6
  1928  06EF  0187               	clrf	7
  1929  06F0  0801               	movf	1,w
  1930  06F1  3A2B               	xorlw	43
  1931  06F2  1D03               	skipz
  1932  06F3  2EF8               	goto	l914
  1933  06F4                     l912:	
  1934  06F4  3001               	movlw	1
  1935  06F5  00F8               	movwf	??_atoi
  1936  06F6  0878               	movf	??_atoi,w
  1937  06F7  07FD               	addwf	atoi@s,f
  1938  06F8                     l914:	
  1939  06F8  087D               	movf	atoi@s,w
  1940  06F9  0086               	movwf	6
  1941  06FA  0187               	clrf	7
  1942  06FB  0801               	movf	1,w
  1943  06FC  3185  25AC  3186   	fcall	_isdigit
  1944  06FF  1C03               	btfss	3,0
  1945  0700  2F1F               	goto	l916
  1946  0701  087C               	movf	atoi@a+1,w
  1947  0702  01F1               	clrf	___wmul@multiplier+1
  1948  0703  07F1               	addwf	___wmul@multiplier+1,f
  1949  0704  087B               	movf	atoi@a,w
  1950  0705  01F0               	clrf	___wmul@multiplier
  1951  0706  07F0               	addwf	___wmul@multiplier,f
  1952  0707  300A               	movlw	10
  1953  0708  00F2               	movwf	___wmul@multiplicand
  1954  0709  3000               	movlw	0
  1955  070A  00F3               	movwf	___wmul@multiplicand+1
  1956  070B  3185  25E4  3186   	fcall	___wmul
  1957  070E  087D               	movf	atoi@s,w
  1958  070F  0086               	movwf	6
  1959  0710  0187               	clrf	7
  1960  0711  0801               	movf	1,w
  1961  0712  0770               	addwf	?___wmul,w
  1962  0713  00F8               	movwf	??_atoi
  1963  0714  0871               	movf	?___wmul+1,w
  1964  0715  1803               	skipnc
  1965  0716  0A71               	incf	?___wmul+1,w
  1966  0717  00F9               	movwf	??_atoi+1
  1967  0718  0878               	movf	??_atoi,w
  1968  0719  3ED0               	addlw	208
  1969  071A  00FB               	movwf	atoi@a
  1970  071B  30FF               	movlw	255
  1971  071C  3D79               	addwfc	??_atoi+1,w
  1972  071D  00FC               	movwf	atoi@a+1
  1973  071E  2EF4               	goto	l912
  1974  071F                     l916:	
  1975  071F  087A               	movf	atoi@sign,w
  1976  0720  1903               	btfsc	3,2
  1977  0721  2F2E               	goto	l922
  1978  0722  097B               	comf	atoi@a,w
  1979  0723  00F8               	movwf	??_atoi
  1980  0724  097C               	comf	atoi@a+1,w
  1981  0725  00F9               	movwf	??_atoi+1
  1982  0726  0AF8               	incf	??_atoi,f
  1983  0727  1903               	skipnz
  1984  0728  0AF9               	incf	??_atoi+1,f
  1985  0729  0878               	movf	??_atoi,w
  1986  072A  00F6               	movwf	?_atoi
  1987  072B  0879               	movf	??_atoi+1,w
  1988  072C  00F7               	movwf	?_atoi+1
  1989  072D  0008               	return
  1990  072E                     l922:	
  1991  072E  087C               	movf	atoi@a+1,w
  1992  072F  01F7               	clrf	?_atoi+1
  1993  0730  07F7               	addwf	?_atoi+1,f
  1994  0731  087B               	movf	atoi@a,w
  1995  0732  01F6               	clrf	?_atoi
  1996  0733  07F6               	addwf	?_atoi,f
  1997  0734  0008               	return
  1998  0735                     __end_of_atoi:	
  1999                           
  2000                           	psect	text14
  2001  05AC                     __ptext14:	
  2002 ;; *************** function _isdigit *****************
  2003 ;; Defined at:
  2004 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  c               1    wreg     unsigned char 
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;  c               1    1[COMMON] unsigned char 
  2009 ;; Return value:  Size  Location     Type
  2010 ;;		None               void
  2011 ;; Registers used:
  2012 ;;		wreg, status,2, status,0
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2018 ;;      Params:         0       0       0       0       0       0       0       0
  2019 ;;      Locals:         2       0       0       0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0       0       0       0
  2021 ;;      Totals:         2       0       0       0       0       0       0       0
  2022 ;;Total ram usage:        2 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; This function calls:
  2025 ;;		Nothing
  2026 ;; This function is called by:
  2027 ;;		_atoi
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           
  2032                           ;psect for function _isdigit
  2033  05AC                     _isdigit:	
  2034                           
  2035                           ;incstack = 0
  2036                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2037                           ;isdigit@c stored from wreg
  2038  05AC  00F1               	movwf	isdigit@c
  2039  05AD  01F0               	clrf	_isdigit$469
  2040  05AE  303A               	movlw	58
  2041  05AF  0271               	subwf	isdigit@c,w
  2042  05B0  1803               	skipnc
  2043  05B1  2DB8               	goto	l868
  2044  05B2  3030               	movlw	48
  2045  05B3  0271               	subwf	isdigit@c,w
  2046  05B4  1C03               	skipc
  2047  05B5  2DB8               	goto	l868
  2048  05B6  01F0               	clrf	_isdigit$469
  2049  05B7  0AF0               	incf	_isdigit$469,f
  2050  05B8                     l868:	
  2051  05B8  0C70               	rrf	_isdigit$469,w
  2052  05B9  0008               	return
  2053  05BA                     __end_of_isdigit:	
  2054                           
  2055                           	psect	text15
  2056  05E4                     __ptext15:	
  2057 ;; *************** function ___wmul *****************
  2058 ;; Defined at:
  2059 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;  multiplier      2    0[COMMON] unsigned int 
  2062 ;;  multiplicand    2    2[COMMON] unsigned int 
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;  product         2    4[COMMON] unsigned int 
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  2    0[COMMON] unsigned int 
  2067 ;; Registers used:
  2068 ;;		wreg, status,2, status,0
  2069 ;; Tracked objects:
  2070 ;;		On entry : 0/0
  2071 ;;		On exit  : 0/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2074 ;;      Params:         4       0       0       0       0       0       0       0
  2075 ;;      Locals:         2       0       0       0       0       0       0       0
  2076 ;;      Temps:          0       0       0       0       0       0       0       0
  2077 ;;      Totals:         6       0       0       0       0       0       0       0
  2078 ;;Total ram usage:        6 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; This function calls:
  2081 ;;		Nothing
  2082 ;; This function is called by:
  2083 ;;		_atoi
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           
  2088                           ;psect for function ___wmul
  2089  05E4                     ___wmul:	
  2090                           
  2091                           ;incstack = 0
  2092                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2093  05E4  01F4               	clrf	___wmul@product
  2094  05E5  01F5               	clrf	___wmul@product+1
  2095  05E6                     l850:	
  2096  05E6  1C70               	btfss	___wmul@multiplier,0
  2097  05E7  2DEC               	goto	l203
  2098  05E8  0872               	movf	___wmul@multiplicand,w
  2099  05E9  07F4               	addwf	___wmul@product,f
  2100  05EA  0873               	movf	___wmul@multiplicand+1,w
  2101  05EB  3DF5               	addwfc	___wmul@product+1,f
  2102  05EC                     l203:	
  2103  05EC  3001               	movlw	1
  2104  05ED                     u415:	
  2105  05ED  35F2               	lslf	___wmul@multiplicand,f
  2106  05EE  0DF3               	rlf	___wmul@multiplicand+1,f
  2107  05EF  0B89               	decfsz	9,f
  2108  05F0  2DED               	goto	u415
  2109  05F1  3001               	movlw	1
  2110  05F2                     u425:	
  2111  05F2  36F1               	lsrf	___wmul@multiplier+1,f
  2112  05F3  0CF0               	rrf	___wmul@multiplier,f
  2113  05F4  0B89               	decfsz	9,f
  2114  05F5  2DF2               	goto	u425
  2115  05F6  0871               	movf	___wmul@multiplier+1,w
  2116  05F7  0470               	iorwf	___wmul@multiplier,w
  2117  05F8  1D03               	skipz
  2118  05F9  2DE6               	goto	l850
  2119  05FA  0875               	movf	___wmul@product+1,w
  2120  05FB  01F1               	clrf	?___wmul+1
  2121  05FC  07F1               	addwf	?___wmul+1,f
  2122  05FD  0874               	movf	___wmul@product,w
  2123  05FE  01F0               	clrf	?___wmul
  2124  05FF  07F0               	addwf	?___wmul,f
  2125  0600  0008               	return
  2126  0601                     __end_of___wmul:	
  2127  007E                     btemp	set	126	;btemp
  2128  007E                     pic14e$flags	set	126
  2129  007E                     wtemp	set	126
  2130  007E                     wtemp0	set	126
  2131  0080                     wtemp1	set	128
  2132  0082                     wtemp2	set	130
  2133  0084                     wtemp3	set	132
  2134  0086                     wtemp4	set	134
  2135  0088                     wtemp5	set	136
  2136  007F                     wtemp6	set	127
  2137  007E                     ttemp	set	126
  2138  007E                     ttemp0	set	126
  2139  0081                     ttemp1	set	129
  2140  0084                     ttemp2	set	132
  2141  0087                     ttemp3	set	135
  2142  007F                     ttemp4	set	127
  2143  007E                     ltemp	set	126
  2144  007E                     ltemp0	set	126
  2145  0082                     ltemp1	set	130
  2146  0086                     ltemp2	set	134
  2147  0080                     ltemp3	set	128


Data Sizes:
    Strings     23
    Constant    10
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     17      29
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[9]), STR_1(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S264$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    putsEUSART@buffer	PTR unsigned char  size(1) Largest target is 10
		 -> buffer(BANK0[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putsEUSART->_writeEUSART
    _leerEusart->_atoi
    _atoi->___wmul

Critical Paths under _main in BANK0

    _loop->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1835
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
                         _openEUSART
 ---------------------------------------------------------------------------------
 (2) _openEUSART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    1835
                         _busyEUSART
                         _leerEusart
                         _putsEUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             17    13      4    1080
                                              0 BANK0     17    13      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _putsEUSART                                           1     1      0     120
                                              1 COMMON     1     1      0
                         _busyEUSART
                        _writeEUSART
 ---------------------------------------------------------------------------------
 (3) _writeEUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _busyEUSART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _leerEusart                                           3     3      0     635
                                              0 BANK0      3     3      0
                               _atoi
                      _dataRdyEUSART
                         _readEUSART
 ---------------------------------------------------------------------------------
 (3) _readEUSART                                           2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _dataRdyEUSART                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     6      2     521
                                              6 COMMON     8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _busyEUSART
     _leerEusart
       _atoi
         ___wmul
         _isdigit
       _dataRdyEUSART
       _readEUSART
     _putsEUSART
       _busyEUSART
       _writeEUSART
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _setup
     _openEUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      2B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     11      1D       6       36.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      2B      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Jun 01 04:18:07 2015

            __CFG_CP$OFF 0000                       l82 065F      ___wmul@multiplicand 0072  
                    l203 05EC                      l912 06F4                      l850 05E6  
                    l922 072E                      l914 06F8                      l906 06ED  
                    l916 071F                      l944 06BA                      l936 069C  
                    l960 0607                      l938 06A8                      l962 0613  
                    l970 0628                      l868 05B8                      l948 06C3  
                    l894 06D2                      l982 0631                      l878 059B  
                    l974 05CF                      l966 061F                      l896 06CB  
                    l898 06D7                      l994 064F                      u415 05ED  
                    u425 05F2             __CFG_CPD$OFF 0000                      u615 060A  
                    u545 069F                      u635 0619                      u565 06A9  
                    u645 0620                      u725 079E                      u575 06B3  
                    u585 06BB                      u775 0677                      _num 0031  
           __CFG_BORV$LO 0000                      wreg 0009             __CFG_LVP$OFF 0000  
                   l1012 0764                     l1014 0778                     l1006 075D  
                   l1040 07AC                     l1032 07A8                     l1024 0789  
                   l1008 075F                     l1042 073B                     l1050 0668  
                   l1044 07EB                     l1058 0689                     STR_1 080A  
                   STR_2 0818             __CFG_WRT$OFF 0000                     _atoi 06CA  
                   _main 059D                     _loop 065F                     fsr0h 0005  
                   fsr1h 0007                     fsr0l 0004                     indf0 0000  
                   indf1 0001                     fsr1l 0006                     btemp 007E  
                   ltemp 007E           readEUSART@data 0071                     start 0002  
                   ttemp 007E                     wtemp 007E            __CFG_IESO$OFF 0000  
            _writeEUSART 058A                    ?_atoi 0076                    ?_main 0070  
                  ?_loop 0070            __CFG_WDTE$OFF 0000              leerEusart@c 0021  
            leerEusart@i 0022          __end_of___lwdiv 06CA          __end_of___lwmod 062F  
                  _RCREG 0199                    _RCSTA 019D                    _SPBRG 019B  
                  _TXREG 019A                    _TXSTA 019E           __CFG_FCMEN$OFF 0000  
        __end_of_dpowers 080A          __end_of_isdigit 05BA                    atoi@a 007B  
                  _setup 05A4                    atoi@s 007D           __CFG_BOREN$OFF 0000  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __end_of_sprintf 07F0  
         __CFG_MCLRE$OFF 0000          __initialization 07F0             __end_of_atoi 0735  
           __end_of_main 05A4             __end_of_loop 0694                   ??_atoi 0078  
                 ??_main 007E                   ??_loop 007E           __CFG_PLLEN$OFF 0000  
                 ?_setup 0070           __CFG_PWRTE$OFF 0000                   ___wmul 05E4  
              ??___lwdiv 0074                ??___lwmod 007C                   _buffer 0033  
              ??_isdigit 0070                ??_sprintf 0024  __end_of__initialization 07FC  
         __pcstackCOMMON 0070            __end_of_setup 05AC                  ??_setup 0070  
             __pbssBANK0 0031               __pmaintext 059D             ?_writeEUSART 0070  
                ?___wmul 0070   __size_of_dataRdyEUSART 0005          writeEUSART@data 0070  
             _leerEusart 062F               _busyEUSART 0596               _readEUSART 058F  
        __size_of___wmul 001D                  ___lwdiv 0694                  ___lwmod 0601  
        __CFG_STVREN$OFF 0000                  __ptext1 05A4                  __ptext2 05BA  
                __ptext3 065F                  __ptext4 0735                  __ptext5 0601  
                __ptext6 0694                  __ptext7 05CE                  __ptext8 058A  
                __ptext9 0596                  _dpowers 0800                  _isdigit 05AC  
             _openEUSART 05BA                  _sprintf 0735     end_of_initialization 07FC  
              _RCSTAbits 019D            _dataRdyEUSART 0585             __pstringtext 0800  
       __CFG_FOSC$INTOSC 0000               _putsEUSART 05CE                _TRISCbits 008E  
            ?_leerEusart 0070              ?_busyEUSART 0070                _TXSTAbits 019E  
            ?_readEUSART 0070           ?_dataRdyEUSART 0070           __end_of___wmul 0601  
   __size_of_writeEUSART 0005              _BAUDCONbits 019F      start_initialization 07F0  
            ?_openEUSART 0070                 ??___wmul 0074      __size_of_leerEusart 0030  
    __size_of_busyEUSART 0007      __size_of_readEUSART 0007                ___latbits 0002  
            ?_putsEUSART 0070            __pcstackBANK0 0020      __end_of__stringdata 0821  
            sprintf@_val 002A              sprintf@flag 0028              sprintf@prec 002E  
        ??_dataRdyEUSART 0070         ___lwdiv@dividend 0072      __size_of_openEUSART 0014  
               ?___lwdiv 0070                 ?___lwmod 0078                 ?_isdigit 0070  
       ___lwdiv@quotient 0075                 ?_sprintf 0020           __size_of_setup 0008  
         ___wmul@product 0074                 _PIR1bits 0011      __size_of_putsEUSART 0016  
            __stringdata 080A        ___wmul@multiplier 0070             ??_leerEusart 0020  
           ??_busyEUSART 0070             ??_readEUSART 0070         __size_of___lwdiv 0036  
       __size_of___lwmod 002E              _isdigit$469 0070       __end_of_leerEusart 065F  
     __end_of_busyEUSART 059D             ??_openEUSART 0070         __size_of_isdigit 000E  
     __end_of_readEUSART 0596          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
               __ptext10 062F                 __ptext11 058F                 __ptext12 0585  
               __ptext13 06CA                 __ptext14 05AC                 __ptext15 05E4  
       __size_of_sprintf 00BB            __size_of_atoi 006B            __size_of_main 0007  
          __size_of_loop 0035            ??_writeEUSART 0070       __end_of_openEUSART 05CE  
               atoi@sign 007A             ??_putsEUSART 0071                 isdigit@c 0071  
            pic14e$flags 007E         putsEUSART@buffer 0071                sprintf@ap 0029  
              sprintf@sp 002F         ___lwmod@dividend 007A        __CFG_CLKOUTEN$OFF 0000  
             _OSCCONbits 0099       __end_of_putsEUSART 05E4      __end_of_writeEUSART 058F  
               sprintf@c 0030                 sprintf@f 0020          ___lwmod@divisor 0078  
        ___lwmod@counter 007D    __end_of_dataRdyEUSART 058A  

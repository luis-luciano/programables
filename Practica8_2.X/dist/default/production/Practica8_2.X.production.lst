

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Jun 01 04:31:05 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16LF1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  0010                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001B                     	;# 
    67  001C                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  008E                     	;# 
    73  0090                     	;# 
    74  0091                     	;# 
    75  0092                     	;# 
    76  0093                     	;# 
    77  0095                     	;# 
    78  0096                     	;# 
    79  0097                     	;# 
    80  0098                     	;# 
    81  0099                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  010E                     	;# 
    91  0110                     	;# 
    92  0111                     	;# 
    93  0112                     	;# 
    94  0113                     	;# 
    95  0114                     	;# 
    96  0115                     	;# 
    97  0116                     	;# 
    98  0117                     	;# 
    99  0118                     	;# 
   100  0119                     	;# 
   101  011A                     	;# 
   102  011B                     	;# 
   103  011D                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0191                     	;# 
   107  0191                     	;# 
   108  0192                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0194                     	;# 
   113  0195                     	;# 
   114  0196                     	;# 
   115  0199                     	;# 
   116  019A                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019C                     	;# 
   122  019C                     	;# 
   123  019D                     	;# 
   124  019E                     	;# 
   125  019F                     	;# 
   126  020D                     	;# 
   127  0210                     	;# 
   128  0211                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0214                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0217                     	;# 
   136  0291                     	;# 
   137  0291                     	;# 
   138  0292                     	;# 
   139  0293                     	;# 
   140  0294                     	;# 
   141  0295                     	;# 
   142  0295                     	;# 
   143  0296                     	;# 
   144  0298                     	;# 
   145  0298                     	;# 
   146  0299                     	;# 
   147  029A                     	;# 
   148  029B                     	;# 
   149  029C                     	;# 
   150  029C                     	;# 
   151  029D                     	;# 
   152  029E                     	;# 
   153  029F                     	;# 
   154  0311                     	;# 
   155  0311                     	;# 
   156  0312                     	;# 
   157  0313                     	;# 
   158  0314                     	;# 
   159  0315                     	;# 
   160  0315                     	;# 
   161  0316                     	;# 
   162  0318                     	;# 
   163  0318                     	;# 
   164  0319                     	;# 
   165  031A                     	;# 
   166  031C                     	;# 
   167  031C                     	;# 
   168  031D                     	;# 
   169  031E                     	;# 
   170  0394                     	;# 
   171  0395                     	;# 
   172  0396                     	;# 
   173  0415                     	;# 
   174  0416                     	;# 
   175  0417                     	;# 
   176  041C                     	;# 
   177  041D                     	;# 
   178  041E                     	;# 
   179  0791                     	;# 
   180  0792                     	;# 
   181  0793                     	;# 
   182  0794                     	;# 
   183  0795                     	;# 
   184  0798                     	;# 
   185  0799                     	;# 
   186  07A0                     	;# 
   187  07A1                     	;# 
   188  07A3                     	;# 
   189  07A4                     	;# 
   190  07A6                     	;# 
   191  07A7                     	;# 
   192  07A9                     	;# 
   193  07AA                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEF                     	;# 
   205                           
   206                           	psect	stringtext
   207  1000                     __pstringtext:	
   208  1000                     _dpowers:	
   209  1000  3401               	retlw	1
   210  1001  3400               	retlw	0
   211  1002  3400               	retlw	0
   212  1003  3400               	retlw	0
   213  1004  340A               	retlw	10
   214  1005  3400               	retlw	0
   215  1006  3400               	retlw	0
   216  1007  3400               	retlw	0
   217  1008  3464               	retlw	100
   218  1009  3400               	retlw	0
   219  100A  3400               	retlw	0
   220  100B  3400               	retlw	0
   221  100C  34E8               	retlw	232
   222  100D  3403               	retlw	3
   223  100E  3400               	retlw	0
   224  100F  3400               	retlw	0
   225  1010  3410               	retlw	16
   226  1011  3427               	retlw	39
   227  1012  3400               	retlw	0
   228  1013  3400               	retlw	0
   229  1014  34A0               	retlw	160
   230  1015  3486               	retlw	134
   231  1016  3401               	retlw	1
   232  1017  3400               	retlw	0
   233  1018  3440               	retlw	64
   234  1019  3442               	retlw	66
   235  101A  340F               	retlw	15
   236  101B  3400               	retlw	0
   237  101C  3480               	retlw	128
   238  101D  3496               	retlw	150
   239  101E  3498               	retlw	152
   240  101F  3400               	retlw	0
   241  1020  3400               	retlw	0
   242  1021  34E1               	retlw	225
   243  1022  34F5               	retlw	245
   244  1023  3405               	retlw	5
   245  1024  3400               	retlw	0
   246  1025  34CA               	retlw	202
   247  1026  349A               	retlw	154
   248  1027  343B               	retlw	59
   249  1028                     __end_of_dpowers:	
   250  1028                     __npowers_:	
   251  1028  3400               	retlw	0
   252  1029  3480               	retlw	128
   253  102A  343F               	retlw	63
   254  102B  34CD               	retlw	205
   255  102C  34CC               	retlw	204
   256  102D  343D               	retlw	61
   257  102E  34D7               	retlw	215
   258  102F  3423               	retlw	35
   259  1030  343C               	retlw	60
   260  1031  3412               	retlw	18
   261  1032  3483               	retlw	131
   262  1033  343A               	retlw	58
   263  1034  34B7               	retlw	183
   264  1035  34D1               	retlw	209
   265  1036  3438               	retlw	56
   266  1037  34C6               	retlw	198
   267  1038  3427               	retlw	39
   268  1039  3437               	retlw	55
   269  103A  3438               	retlw	56
   270  103B  3486               	retlw	134
   271  103C  3435               	retlw	53
   272  103D  34C0               	retlw	192
   273  103E  34D6               	retlw	214
   274  103F  3433               	retlw	51
   275  1040  34CC               	retlw	204
   276  1041  342B               	retlw	43
   277  1042  3432               	retlw	50
   278  1043  3470               	retlw	112
   279  1044  3489               	retlw	137
   280  1045  3430               	retlw	48
   281  1046  34E7               	retlw	231
   282  1047  34DB               	retlw	219
   283  1048  342E               	retlw	46
   284  1049  34E5               	retlw	229
   285  104A  343C               	retlw	60
   286  104B  341E               	retlw	30
   287  104C  3442               	retlw	66
   288  104D  34A2               	retlw	162
   289  104E  340D               	retlw	13
   290  104F                     __end_of__npowers_:	
   291  104F                     __powers_:	
   292  104F  3400               	retlw	0
   293  1050  3480               	retlw	128
   294  1051  343F               	retlw	63
   295  1052  3400               	retlw	0
   296  1053  3420               	retlw	32
   297  1054  3441               	retlw	65
   298  1055  3400               	retlw	0
   299  1056  34C8               	retlw	200
   300  1057  3442               	retlw	66
   301  1058  3400               	retlw	0
   302  1059  347A               	retlw	122
   303  105A  3444               	retlw	68
   304  105B  3440               	retlw	64
   305  105C  341C               	retlw	28
   306  105D  3446               	retlw	70
   307  105E  3450               	retlw	80
   308  105F  34C3               	retlw	195
   309  1060  3447               	retlw	71
   310  1061  3424               	retlw	36
   311  1062  3474               	retlw	116
   312  1063  3449               	retlw	73
   313  1064  3497               	retlw	151
   314  1065  3418               	retlw	24
   315  1066  344B               	retlw	75
   316  1067  34BC               	retlw	188
   317  1068  34BE               	retlw	190
   318  1069  344C               	retlw	76
   319  106A  346B               	retlw	107
   320  106B  346E               	retlw	110
   321  106C  344E               	retlw	78
   322  106D  3403               	retlw	3
   323  106E  3415               	retlw	21
   324  106F  3450               	retlw	80
   325  1070  3479               	retlw	121
   326  1071  34AD               	retlw	173
   327  1072  3460               	retlw	96
   328  1073  34F3               	retlw	243
   329  1074  3449               	retlw	73
   330  1075  3471               	retlw	113
   331  1076                     __end_of__powers_:	
   332  000C                     _PORTA	set	12
   333  000D                     _PORTBbits	set	13
   334  009D                     _ADCON0bits	set	157
   335  009E                     _ADCON1bits	set	158
   336  009C                     _ADRESH	set	156
   337  009B                     _ADRESL	set	155
   338  0099                     _OSCCONbits	set	153
   339  008C                     _TRISAbits	set	140
   340  008D                     _TRISBbits	set	141
   341  018C                     _ANSELAbits	set	396
   342  018D                     _ANSELB	set	397
   343  1076                     __stringdata:	
   344  1076                     STR_1:	
   345  1076  3474               	retlw	116	;'t'
   346  1077  3465               	retlw	101	;'e'
   347  1078  346D               	retlw	109	;'m'
   348  1079  3470               	retlw	112	;'p'
   349  107A  3420               	retlw	32	;' '
   350  107B  343D               	retlw	61	;'='
   351  107C  3425               	retlw	37	;'%'
   352  107D  3466               	retlw	102	;'f'
   353  107E  3400               	retlw	0
   354  107F                     __end_of__stringdata:	
   355                           
   356                           ; #config settings
   357  0000                     
   358                           	psect	cinit
   359  07F5                     start_initialization:	
   360  07F5                     __initialization:	
   361                           
   362                           ; Clear objects allocated to BANK1
   363  07F5  30CC               	movlw	low __pbssBANK1
   364  07F6  0084               	movwf	4
   365  07F7  3000               	movlw	high __pbssBANK1
   366  07F8  0085               	movwf	5
   367  07F9  301E               	movlw	30
   368  07FA  3195  2579         	fcall	clear_ram0
   369  07FC                     end_of_initialization:	
   370                           ;End of C runtime variable initialization code
   371                           
   372  07FC                     __end_of__initialization:	
   373  07FC  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   374  07FD  0020               	movlb	0
   375  07FE  3195  2D7F         	ljmp	_main	;jump to C main() function
   376                           
   377                           	psect	bssBANK1
   378  00CC                     __pbssBANK1:	
   379  00CC                     _buffer:	
   380  00CC                     	ds	30
   381                           
   382                           	psect	clrtext
   383  1579                     clear_ram0:	
   384                           ;	Called with FSR0 containing the base address, and
   385                           ;	WREG with the size to clear
   386                           
   387  1579  0064               	clrwdt	;clear the watchdog before getting into this loop
   388  157A                     clrloop0:	
   389  157A  0180               	clrf	0	;clear RAM location pointed to by FSR
   390  157B  3101               	addfsr 0,1
   391  157C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   392  157D  2D7A               	goto	clrloop0	;have we reached the end yet?
   393  157E  3400               	retlw	0	;all done for this memory range, return
   394                           
   395                           	psect	cstackBANK1
   396  00A0                     __pcstackBANK1:	
   397  00A0                     _sprintf$792:	
   398                           
   399                           ; 3 bytes @ 0x0
   400  00A0                     	ds	3
   401  00A3                     _sprintf$375:	
   402                           
   403                           ; 4 bytes @ 0x3
   404  00A3                     	ds	4
   405  00A7                     sprintf@ap:	
   406                           
   407                           ; 1 bytes @ 0x7
   408  00A7                     	ds	1
   409  00A8                     sprintf@vd:	
   410                           
   411                           ; 4 bytes @ 0x8
   412  00A8                     	ds	4
   413  00AC                     sprintf@vd_377:	
   414                           
   415                           ; 4 bytes @ 0xC
   416  00AC                     	ds	4
   417  00B0                     sprintf@flag:	
   418                           
   419                           ; 2 bytes @ 0x10
   420  00B0                     	ds	2
   421  00B2                     sprintf@prec:	
   422                           
   423                           ; 2 bytes @ 0x12
   424  00B2                     	ds	2
   425  00B4                     sprintf@_val:	
   426                           
   427                           ; 4 bytes @ 0x14
   428  00B4                     	ds	4
   429  00B8                     sprintf@integ:	
   430                           
   431                           ; 3 bytes @ 0x18
   432  00B8                     	ds	3
   433  00BB                     sprintf@exp:	
   434                           
   435                           ; 2 bytes @ 0x1B
   436  00BB                     	ds	2
   437  00BD                     sprintf@sp:	
   438                           
   439                           ; 1 bytes @ 0x1D
   440  00BD                     	ds	1
   441  00BE                     sprintf@fval:	
   442                           
   443                           ; 3 bytes @ 0x1E
   444  00BE                     	ds	3
   445  00C1                     sprintf@c:	
   446                           
   447                           ; 1 bytes @ 0x21
   448  00C1                     	ds	1
   449  00C2                     loop@ant:	
   450                           
   451                           ; 3 bytes @ 0x22
   452  00C2                     	ds	3
   453  00C5                     loop@result:	
   454                           
   455                           ; 3 bytes @ 0x25
   456  00C5                     	ds	3
   457  00C8                     loop@pos:	
   458                           
   459                           ; 2 bytes @ 0x28
   460  00C8                     	ds	2
   461  00CA                     loop@neg:	
   462                           
   463                           ; 2 bytes @ 0x2A
   464  00CA                     	ds	2
   465                           
   466                           	psect	cstackCOMMON
   467  0070                     __pcstackCOMMON:	
   468  0070                     ?_Lcd_Cmd:	
   469  0070                     ??_Lcd_Cmd:	
   470                           ; 0 bytes @ 0x0
   471                           
   472  0070                     ?_Lcd_Chr_CP:	
   473                           ; 0 bytes @ 0x0
   474                           
   475  0070                     ??_Lcd_Chr_CP:	
   476                           ; 0 bytes @ 0x0
   477                           
   478  0070                     ?_Lcd_Init:	
   479                           ; 0 bytes @ 0x0
   480                           
   481  0070                     ?_setup:	
   482                           ; 0 bytes @ 0x0
   483                           
   484  0070                     ?_loop:	
   485                           ; 0 bytes @ 0x0
   486                           
   487  0070                     ?_main:	
   488                           ; 0 bytes @ 0x0
   489                           
   490  0070                     ?___ftge:	
   491                           ; 0 bytes @ 0x0
   492                           
   493  0070                     ?_convertir:	
   494                           ; 1 bit 
   495                           
   496  0070                     ?___awmod:	
   497                           ; 2 bytes @ 0x0
   498                           
   499  0070                     ?___ftpack:	
   500                           ; 2 bytes @ 0x0
   501                           
   502  0070                     ?___ftneg:	
   503                           ; 3 bytes @ 0x0
   504                           
   505  0070                     ?__tdiv_to_l_:	
   506                           ; 3 bytes @ 0x0
   507                           
   508  0070                     ?__div_to_l_:	
   509                           ; 4 bytes @ 0x0
   510                           
   511  0070                     ?___lldiv:	
   512                           ; 4 bytes @ 0x0
   513                           
   514  0070                     ?___llmod:	
   515                           ; 4 bytes @ 0x0
   516                           
   517  0070                     convertir@channel:	
   518                           ; 4 bytes @ 0x0
   519                           
   520  0070                     ___awmod@divisor:	
   521                           ; 2 bytes @ 0x0
   522                           
   523  0070                     __div_to_l_@f1:	
   524                           ; 2 bytes @ 0x0
   525                           
   526  0070                     ___ftpack@arg:	
   527                           ; 3 bytes @ 0x0
   528                           
   529  0070                     __tdiv_to_l_@f1:	
   530                           ; 3 bytes @ 0x0
   531                           
   532  0070                     ___ftge@ff1:	
   533                           ; 3 bytes @ 0x0
   534                           
   535  0070                     ___ftneg@f1:	
   536                           ; 3 bytes @ 0x0
   537                           
   538  0070                     ___lldiv@divisor:	
   539                           ; 3 bytes @ 0x0
   540                           
   541  0070                     ___llmod@divisor:	
   542                           ; 4 bytes @ 0x0
   543                           
   544                           
   545                           ; 4 bytes @ 0x0
   546  0070                     	ds	2
   547  0072                     ??_convertir:	
   548  0072                     Lcd_Chr_CP@data:	
   549                           ; 0 bytes @ 0x2
   550                           
   551  0072                     Lcd_Cmd@data:	
   552                           ; 1 bytes @ 0x2
   553                           
   554  0072                     ___awmod@dividend:	
   555                           ; 1 bytes @ 0x2
   556                           
   557                           
   558                           ; 2 bytes @ 0x2
   559  0072                     	ds	1
   560  0073                     ??_Lcd_Init:	
   561  0073                     ?_Lcd_Out:	
   562                           ; 0 bytes @ 0x3
   563                           
   564  0073                     ??___ftneg:	
   565                           ; 0 bytes @ 0x3
   566                           
   567  0073                     Lcd_Out@x:	
   568                           ; 0 bytes @ 0x3
   569                           
   570  0073                     ___ftpack@exp:	
   571                           ; 1 bytes @ 0x3
   572                           
   573  0073                     __div_to_l_@f2:	
   574                           ; 1 bytes @ 0x3
   575                           
   576  0073                     __tdiv_to_l_@f2:	
   577                           ; 3 bytes @ 0x3
   578                           
   579  0073                     ___ftge@ff2:	
   580                           ; 3 bytes @ 0x3
   581                           
   582                           
   583                           ; 3 bytes @ 0x3
   584  0073                     	ds	1
   585  0074                     ??___awmod:	
   586  0074                     Lcd_Init@data:	
   587                           ; 0 bytes @ 0x4
   588                           
   589  0074                     Lcd_Out@buffer:	
   590                           ; 1 bytes @ 0x4
   591                           
   592  0074                     ___ftpack@sign:	
   593                           ; 1 bytes @ 0x4
   594                           
   595  0074                     ___lldiv@dividend:	
   596                           ; 1 bytes @ 0x4
   597                           
   598  0074                     ___llmod@dividend:	
   599                           ; 4 bytes @ 0x4
   600                           
   601                           
   602                           ; 4 bytes @ 0x4
   603  0074                     	ds	1
   604  0075                     ??___ftpack:	
   605  0075                     ??_Lcd_Out:	
   606                           ; 0 bytes @ 0x5
   607                           
   608  0075                     ??_setup:	
   609                           ; 0 bytes @ 0x5
   610                           
   611  0075                     ___awmod@counter:	
   612                           ; 0 bytes @ 0x5
   613                           
   614                           
   615                           ; 1 bytes @ 0x5
   616  0075                     	ds	1
   617  0076                     ??__tdiv_to_l_:	
   618  0076                     ??__div_to_l_:	
   619                           ; 0 bytes @ 0x6
   620                           
   621  0076                     ??___ftge:	
   622                           ; 0 bytes @ 0x6
   623                           
   624  0076                     Lcd_Out@y:	
   625                           ; 0 bytes @ 0x6
   626                           
   627  0076                     ___awmod@sign:	
   628                           ; 1 bytes @ 0x6
   629                           
   630                           
   631                           ; 1 bytes @ 0x6
   632  0076                     	ds	1
   633  0077                     ?___awdiv:	
   634  0077                     Lcd_Out@data:	
   635                           ; 2 bytes @ 0x7
   636                           
   637  0077                     ___awdiv@divisor:	
   638                           ; 1 bytes @ 0x7
   639                           
   640                           
   641                           ; 2 bytes @ 0x7
   642  0077                     	ds	1
   643  0078                     ??___lldiv:	
   644  0078                     ??___llmod:	
   645                           ; 0 bytes @ 0x8
   646                           
   647  0078                     ?___awtoft:	
   648                           ; 0 bytes @ 0x8
   649                           
   650  0078                     ?___lltoft:	
   651                           ; 3 bytes @ 0x8
   652                           
   653  0078                     ___awtoft@c:	
   654                           ; 3 bytes @ 0x8
   655                           
   656  0078                     ___lltoft@c:	
   657                           ; 2 bytes @ 0x8
   658                           
   659                           
   660                           ; 4 bytes @ 0x8
   661  0078                     	ds	1
   662  0079                     ___llmod@counter:	
   663  0079                     convertir@i:	
   664                           ; 1 bytes @ 0x9
   665                           
   666  0079                     ___awdiv@dividend:	
   667                           ; 2 bytes @ 0x9
   668                           
   669  0079                     ___lldiv@quotient:	
   670                           ; 2 bytes @ 0x9
   671                           
   672                           
   673                           ; 4 bytes @ 0x9
   674  0079                     	ds	2
   675  007B                     ??___awdiv:	
   676  007B                     ??___awtoft:	
   677                           ; 0 bytes @ 0xB
   678                           
   679                           
   680                           ; 0 bytes @ 0xB
   681  007B                     	ds	1
   682  007C                     ??___wmul:	
   683  007C                     ??___lltoft:	
   684                           ; 0 bytes @ 0xC
   685                           
   686  007C                     ___wmul@product:	
   687                           ; 0 bytes @ 0xC
   688                           
   689                           
   690                           ; 2 bytes @ 0xC
   691  007C                     	ds	1
   692  007D                     ___awtoft@sign:	
   693  007D                     ___lldiv@counter:	
   694                           ; 1 bytes @ 0xD
   695                           
   696  007D                     ___lltoft@exp:	
   697                           ; 1 bytes @ 0xD
   698                           
   699                           
   700                           ; 1 bytes @ 0xD
   701  007D                     	ds	1
   702  007E                     ??_main:	
   703  007E                     ??___ftsub:	
   704                           ; 0 bytes @ 0xE
   705                           
   706                           
   707                           	psect	cstackBANK0
   708  0020                     __pcstackBANK0:	
   709                           ; 0 bytes @ 0xE
   710                           
   711  0020                     ?___ftdiv:	
   712  0020                     ___awdiv@counter:	
   713                           ; 3 bytes @ 0x0
   714                           
   715  0020                     ___ftdiv@f2:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0020                     __div_to_l_@quot:	
   719                           ; 3 bytes @ 0x0
   720                           
   721  0020                     __tdiv_to_l_@quot:	
   722                           ; 4 bytes @ 0x0
   723                           
   724                           
   725                           ; 4 bytes @ 0x0
   726  0020                     	ds	1
   727  0021                     ___awdiv@sign:	
   728                           
   729                           ; 1 bytes @ 0x1
   730  0021                     	ds	1
   731  0022                     ___awdiv@quotient:	
   732                           
   733                           ; 2 bytes @ 0x2
   734  0022                     	ds	1
   735  0023                     ___ftdiv@f1:	
   736                           
   737                           ; 3 bytes @ 0x3
   738  0023                     	ds	1
   739  0024                     ?___wmul:	
   740  0024                     __div_to_l_@cntr:	
   741                           ; 2 bytes @ 0x4
   742                           
   743  0024                     __tdiv_to_l_@cntr:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0024                     ___wmul@multiplier:	
   747                           ; 1 bytes @ 0x4
   748                           
   749                           
   750                           ; 2 bytes @ 0x4
   751  0024                     	ds	1
   752  0025                     __div_to_l_@exp1:	
   753  0025                     __tdiv_to_l_@exp1:	
   754                           ; 1 bytes @ 0x5
   755                           
   756                           
   757                           ; 1 bytes @ 0x5
   758  0025                     	ds	1
   759  0026                     ??___ftdiv:	
   760  0026                     ___wmul@multiplicand:	
   761                           ; 0 bytes @ 0x6
   762                           
   763                           
   764                           ; 2 bytes @ 0x6
   765  0026                     	ds	4
   766  002A                     ___ftdiv@cntr:	
   767                           
   768                           ; 1 bytes @ 0xA
   769  002A                     	ds	1
   770  002B                     ___ftdiv@f3:	
   771                           
   772                           ; 3 bytes @ 0xB
   773  002B                     	ds	3
   774  002E                     ___ftdiv@exp:	
   775                           
   776                           ; 1 bytes @ 0xE
   777  002E                     	ds	1
   778  002F                     ___ftdiv@sign:	
   779                           
   780                           ; 1 bytes @ 0xF
   781  002F                     	ds	1
   782  0030                     ?___ftmul:	
   783  0030                     ___ftmul@f1:	
   784                           ; 3 bytes @ 0x10
   785                           
   786                           
   787                           ; 3 bytes @ 0x10
   788  0030                     	ds	3
   789  0033                     ___ftmul@f2:	
   790                           
   791                           ; 3 bytes @ 0x13
   792  0033                     	ds	3
   793  0036                     ??___ftmul:	
   794                           
   795                           ; 0 bytes @ 0x16
   796  0036                     	ds	4
   797  003A                     ___ftmul@exp:	
   798                           
   799                           ; 1 bytes @ 0x1A
   800  003A                     	ds	1
   801  003B                     ___ftmul@f3_as_product:	
   802                           
   803                           ; 3 bytes @ 0x1B
   804  003B                     	ds	3
   805  003E                     ___ftmul@cntr:	
   806                           
   807                           ; 1 bytes @ 0x1E
   808  003E                     	ds	1
   809  003F                     ___ftmul@sign:	
   810                           
   811                           ; 1 bytes @ 0x1F
   812  003F                     	ds	1
   813  0040                     ?_fround:	
   814  0040                     ?_scale:	
   815                           ; 3 bytes @ 0x20
   816                           
   817                           
   818                           ; 3 bytes @ 0x20
   819  0040                     	ds	3
   820  0043                     ??_fround:	
   821  0043                     ??_scale:	
   822                           ; 0 bytes @ 0x23
   823                           
   824                           
   825                           ; 0 bytes @ 0x23
   826  0043                     	ds	2
   827  0045                     _scale$791:	
   828                           
   829                           ; 3 bytes @ 0x25
   830  0045                     	ds	2
   831  0047                     _fround$790:	
   832                           
   833                           ; 3 bytes @ 0x27
   834  0047                     	ds	1
   835  0048                     scale@scl:	
   836                           
   837                           ; 1 bytes @ 0x28
   838  0048                     	ds	1
   839  0049                     ?___fttol:	
   840  0049                     ___fttol@f1:	
   841                           ; 4 bytes @ 0x29
   842                           
   843                           
   844                           ; 3 bytes @ 0x29
   845  0049                     	ds	1
   846  004A                     _fround$789:	
   847                           
   848                           ; 3 bytes @ 0x2A
   849  004A                     	ds	3
   850  004D                     ??___fttol:	
   851  004D                     fround@prec:	
   852                           ; 0 bytes @ 0x2D
   853                           
   854                           
   855                           ; 1 bytes @ 0x2D
   856  004D                     	ds	1
   857  004E                     ?___ftadd:	
   858  004E                     ___ftadd@f1:	
   859                           ; 3 bytes @ 0x2E
   860                           
   861                           
   862                           ; 3 bytes @ 0x2E
   863  004E                     	ds	3
   864  0051                     ___fttol@sign1:	
   865  0051                     ___ftadd@f2:	
   866                           ; 1 bytes @ 0x31
   867                           
   868                           
   869                           ; 3 bytes @ 0x31
   870  0051                     	ds	1
   871  0052                     ___fttol@lval:	
   872                           
   873                           ; 4 bytes @ 0x32
   874  0052                     	ds	2
   875  0054                     ??___ftadd:	
   876                           
   877                           ; 0 bytes @ 0x34
   878  0054                     	ds	2
   879  0056                     ___fttol@exp1:	
   880                           
   881                           ; 1 bytes @ 0x36
   882  0056                     	ds	2
   883  0058                     ___ftadd@sign:	
   884                           
   885                           ; 1 bytes @ 0x38
   886  0058                     	ds	1
   887  0059                     ___ftadd@exp2:	
   888                           
   889                           ; 1 bytes @ 0x39
   890  0059                     	ds	1
   891  005A                     ___ftadd@exp1:	
   892                           
   893                           ; 1 bytes @ 0x3A
   894  005A                     	ds	1
   895  005B                     ?___ftsub:	
   896  005B                     ___ftsub@f2:	
   897                           ; 3 bytes @ 0x3B
   898                           
   899                           
   900                           ; 3 bytes @ 0x3B
   901  005B                     	ds	3
   902  005E                     ___ftsub@f1:	
   903                           
   904                           ; 3 bytes @ 0x3E
   905  005E                     	ds	3
   906  0061                     ?_sprintf:	
   907  0061                     sprintf@f:	
   908                           ; 2 bytes @ 0x41
   909                           
   910                           
   911                           ; 2 bytes @ 0x41
   912  0061                     	ds	5
   913  0066                     ??_sprintf:	
   914                           
   915                           ; 0 bytes @ 0x46
   916  0066                     	ds	6
   917  006C                     ??_loop:	
   918                           
   919                           ; 0 bytes @ 0x4C
   920  006C                     	ds	2
   921                           
   922                           	psect	maintext
   923  157F                     __pmaintext:	
   924 ;;
   925 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   926 ;;
   927 ;; *************** function _main *****************
   928 ;; Defined at:
   929 ;;		line 104 in file "principal.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;		None
   934 ;; Return value:  Size  Location     Type
   935 ;;		None               void
   936 ;; Registers used:
   937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 17F/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   943 ;;      Params:         0       0       0       0       0       0       0       0
   944 ;;      Locals:         0       0       0       0       0       0       0       0
   945 ;;      Temps:          0       0       0       0       0       0       0       0
   946 ;;      Totals:         0       0       0       0       0       0       0       0
   947 ;;Total ram usage:        0 bytes
   948 ;; Hardware stack levels required when called:    5
   949 ;; This function calls:
   950 ;;		_loop
   951 ;;		_setup
   952 ;; This function is called by:
   953 ;;		Startup code after reset
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _main
   959  157F                     _main:	
   960                           
   961                           ;principal.c: 106: setup();
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   965  157F  3195  25C5  3195   	fcall	_setup
   966                           
   967                           ;principal.c: 107: loop();
   968  1582  318D  259B         	fcall	_loop
   969                           
   970                           ;principal.c: 108: return;
   971  1584  3180  2802         	ljmp	start
   972  1586                     __end_of_main:	
   973                           
   974                           	psect	text1
   975  15C5                     __ptext1:	
   976 ;; *************** function _setup *****************
   977 ;; Defined at:
   978 ;;		line 37 in file "principal.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;		None
   981 ;; Auto vars:     Size  Location     Type
   982 ;;		None
   983 ;; Return value:  Size  Location     Type
   984 ;;		None               void
   985 ;; Registers used:
   986 ;;		wreg, status,2, status,0, pclath, cstack
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   992 ;;      Params:         0       0       0       0       0       0       0       0
   993 ;;      Locals:         0       0       0       0       0       0       0       0
   994 ;;      Temps:          0       0       0       0       0       0       0       0
   995 ;;      Totals:         0       0       0       0       0       0       0       0
   996 ;;Total ram usage:        0 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; Hardware stack levels required when called:    2
   999 ;; This function calls:
  1000 ;;		_Lcd_Cmd
  1001 ;;		_Lcd_Init
  1002 ;; This function is called by:
  1003 ;;		_main
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           
  1008                           ;psect for function _setup
  1009  15C5                     _setup:	
  1010                           
  1011                           ;principal.c: 39: OSCCONbits.IRCF=11;
  1012                           
  1013                           ;incstack = 0
  1014                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1015  15C5  0021               	movlb	1	; select bank1
  1016  15C6  0819               	movf	25,w	;volatile
  1017  15C7  3987               	andlw	-121
  1018  15C8  3858               	iorlw	88
  1019  15C9  0099               	movwf	25	;volatile
  1020                           
  1021                           ;principal.c: 41: ANSELAbits.ANSA0=1;
  1022  15CA  0023               	movlb	3	; select bank3
  1023  15CB  140C               	bsf	12,0	;volatile
  1024                           
  1025                           ;principal.c: 42: TRISAbits.TRISA0=1;
  1026  15CC  0021               	movlb	1	; select bank1
  1027  15CD  140C               	bsf	12,0	;volatile
  1028                           
  1029                           ;principal.c: 44: ANSELAbits.ANSA1=1;
  1030  15CE  0023               	movlb	3	; select bank3
  1031  15CF  148C               	bsf	12,1	;volatile
  1032                           
  1033                           ;principal.c: 45: TRISAbits.TRISA1=1;
  1034  15D0  0021               	movlb	1	; select bank1
  1035  15D1  148C               	bsf	12,1	;volatile
  1036                           
  1037                           ;principal.c: 46: PORTA=0x00;
  1038  15D2  0020               	movlb	0	; select bank0
  1039  15D3  018C               	clrf	12	;volatile
  1040                           
  1041                           ;principal.c: 48: ADCON0bits.ADON=0;
  1042  15D4  0021               	movlb	1	; select bank1
  1043  15D5  101D               	bcf	29,0	;volatile
  1044                           
  1045                           ;principal.c: 49: ADCON0bits.GO=0;
  1046  15D6  109D               	bcf	29,1	;volatile
  1047                           
  1048                           ;principal.c: 50: ADCON1bits.ADFM=1;
  1049  15D7  179E               	bsf	30,7	;volatile
  1050                           
  1051                           ;principal.c: 51: ADCON1bits.ADCS=6;
  1052  15D8  081E               	movf	30,w	;volatile
  1053  15D9  398F               	andlw	-113
  1054  15DA  3860               	iorlw	96
  1055  15DB  009E               	movwf	30	;volatile
  1056                           
  1057                           ;principal.c: 52: ADCON1bits.ADNREF=0;
  1058  15DC  111E               	bcf	30,2	;volatile
  1059                           
  1060                           ;principal.c: 53: ADCON1bits.ADPREF=0;
  1061  15DD  30FC               	movlw	-4
  1062  15DE  059E               	andwf	30,f	;volatile
  1063                           
  1064                           ;principal.c: 55: ADRESL=0x00;
  1065  15DF  019B               	clrf	27	;volatile
  1066                           
  1067                           ;principal.c: 56: ADRESH=0x00;
  1068  15E0  019C               	clrf	28	;volatile
  1069                           
  1070                           ;principal.c: 57: Lcd_Init();
  1071  15E1  3189  21FC  3195   	fcall	_Lcd_Init
  1072                           
  1073                           ;principal.c: 58: Lcd_Cmd(1);
  1074  15E4  3001               	movlw	1
  1075  15E5  3188  20D9  3195   	fcall	_Lcd_Cmd
  1076                           
  1077                           ;principal.c: 59: Lcd_Cmd(12);
  1078  15E8  300C               	movlw	12
  1079  15E9  3188  20D9         	fcall	_Lcd_Cmd
  1080  15EB  0008               	return
  1081  15EC                     __end_of_setup:	
  1082                           
  1083                           	psect	text2
  1084  09FC                     __ptext2:	
  1085 ;; *************** function _Lcd_Init *****************
  1086 ;; Defined at:
  1087 ;;		line 58 in file "lcd.h"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  data            1    4[COMMON] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;		None               void
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0, pclath, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1101 ;;      Params:         0       0       0       0       0       0       0       0
  1102 ;;      Locals:         1       0       0       0       0       0       0       0
  1103 ;;      Temps:          1       0       0       0       0       0       0       0
  1104 ;;      Totals:         2       0       0       0       0       0       0       0
  1105 ;;Total ram usage:        2 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    1
  1108 ;; This function calls:
  1109 ;;		_Lcd_Cmd
  1110 ;; This function is called by:
  1111 ;;		_setup
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           
  1116                           ;psect for function _Lcd_Init
  1117  09FC                     _Lcd_Init:	
  1118                           
  1119                           ;lcd.h: 59: unsigned char data;
  1120                           ;lcd.h: 60: ANSELB=0x00;
  1121                           
  1122                           ;incstack = 0
  1123                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1124  09FC  0023               	movlb	3	; select bank3
  1125  09FD  018D               	clrf	13	;volatile
  1126                           
  1127                           ;lcd.h: 61: TRISBbits.TRISB7 = 0;
  1128  09FE  0021               	movlb	1	; select bank1
  1129  09FF  138D               	bcf	13,7	;volatile
  1130                           
  1131                           ;lcd.h: 62: TRISBbits.TRISB6 = 0;
  1132  0A00  130D               	bcf	13,6	;volatile
  1133                           
  1134                           ;lcd.h: 63: TRISBbits.TRISB5 = 0;
  1135  0A01  128D               	bcf	13,5	;volatile
  1136                           
  1137                           ;lcd.h: 64: TRISBbits.TRISB4 = 0;
  1138  0A02  120D               	bcf	13,4	;volatile
  1139                           
  1140                           ;lcd.h: 65: TRISBbits.TRISB2 = 0;
  1141  0A03  110D               	bcf	13,2	;volatile
  1142                           
  1143                           ;lcd.h: 66: TRISBbits.TRISB1 = 0;
  1144  0A04  108D               	bcf	13,1	;volatile
  1145                           
  1146                           ;lcd.h: 67: PORTBbits.RB7 = 0;
  1147  0A05  0020               	movlb	0	; select bank0
  1148  0A06  138D               	bcf	13,7	;volatile
  1149                           
  1150                           ;lcd.h: 68: PORTBbits.RB6 = 0;
  1151  0A07  130D               	bcf	13,6	;volatile
  1152                           
  1153                           ;lcd.h: 69: PORTBbits.RB5 = 0;
  1154  0A08  128D               	bcf	13,5	;volatile
  1155                           
  1156                           ;lcd.h: 70: PORTBbits.RB4 = 0;
  1157  0A09  120D               	bcf	13,4	;volatile
  1158                           
  1159                           ;lcd.h: 71: PORTBbits.RB2 = 0;
  1160  0A0A  110D               	bcf	13,2	;volatile
  1161                           
  1162                           ;lcd.h: 72: PORTBbits.RB1 = 0;
  1163  0A0B  108D               	bcf	13,1	;volatile
  1164                           
  1165                           ;lcd.h: 73: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1166  0A0C  30E5               	movlw	229
  1167  0A0D  00F3               	movwf	??_Lcd_Init
  1168  0A0E                     u3717:	
  1169  0A0E  3200               	nop2
  1170  0A0F  0000               	nop
  1171  0A10  0BF3               	decfsz	??_Lcd_Init,f
  1172  0A11  2A0E               	goto	u3717
  1173                           
  1174                           ;lcd.h: 74: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1175  0A12  30E5               	movlw	229
  1176  0A13  00F3               	movwf	??_Lcd_Init
  1177  0A14                     u3727:	
  1178  0A14  3200               	nop2
  1179  0A15  0000               	nop
  1180  0A16  0BF3               	decfsz	??_Lcd_Init,f
  1181  0A17  2A14               	goto	u3727
  1182                           
  1183                           ;lcd.h: 75: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1184  0A18  30E5               	movlw	229
  1185  0A19  00F3               	movwf	??_Lcd_Init
  1186  0A1A                     u3737:	
  1187  0A1A  3200               	nop2
  1188  0A1B  0000               	nop
  1189  0A1C  0BF3               	decfsz	??_Lcd_Init,f
  1190  0A1D  2A1A               	goto	u3737
  1191                           
  1192                           ;lcd.h: 76: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1193  0A1E  30E5               	movlw	229
  1194  0A1F  00F3               	movwf	??_Lcd_Init
  1195  0A20                     u3747:	
  1196  0A20  3200               	nop2
  1197  0A21  0000               	nop
  1198  0A22  0BF3               	decfsz	??_Lcd_Init,f
  1199  0A23  2A20               	goto	u3747
  1200                           
  1201                           ;lcd.h: 77: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1202  0A24  30E5               	movlw	229
  1203  0A25  00F3               	movwf	??_Lcd_Init
  1204  0A26                     u3757:	
  1205  0A26  3200               	nop2
  1206  0A27  0000               	nop
  1207  0A28  0BF3               	decfsz	??_Lcd_Init,f
  1208  0A29  2A26               	goto	u3757
  1209                           
  1210                           ;lcd.h: 78: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1211  0A2A  30E5               	movlw	229
  1212  0A2B  00F3               	movwf	??_Lcd_Init
  1213  0A2C                     u3767:	
  1214  0A2C  3200               	nop2
  1215  0A2D  0000               	nop
  1216  0A2E  0BF3               	decfsz	??_Lcd_Init,f
  1217  0A2F  2A2C               	goto	u3767
  1218                           
  1219                           ;lcd.h: 79: for(data = 1; data < 4; data ++)
  1220  0A30  01F4               	clrf	Lcd_Init@data
  1221  0A31  0AF4               	incf	Lcd_Init@data,f
  1222  0A32  3004               	movlw	4
  1223  0A33  0274               	subwf	Lcd_Init@data,w
  1224  0A34  1803               	btfsc	3,0
  1225  0A35  2A59               	goto	l34
  1226  0A36                     l33:	
  1227                           
  1228                           ;lcd.h: 80: {
  1229                           ;lcd.h: 81: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 1; 
      +                          PORTBbits.RB2 = 0;
  1230  0A36  0020               	movlb	0	; select bank0
  1231  0A37  138D               	bcf	13,7	;volatile
  1232  0A38  130D               	bcf	13,6	;volatile
  1233  0A39  168D               	bsf	13,5	;volatile
  1234  0A3A  160D               	bsf	13,4	;volatile
  1235  0A3B  110D               	bcf	13,2	;volatile
  1236                           
  1237                           ;lcd.h: 82: PORTBbits.RB1 = 0; PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; 
      +                          PORTBbits.RB4 = 1;
  1238  0A3C  108D               	bcf	13,1	;volatile
  1239  0A3D  138D               	bcf	13,7	;volatile
  1240  0A3E  130D               	bcf	13,6	;volatile
  1241  0A3F  168D               	bsf	13,5	;volatile
  1242  0A40  160D               	bsf	13,4	;volatile
  1243                           
  1244                           ;lcd.h: 83: PORTBbits.RB2 = 1; PORTBbits.RB1 = 0;
  1245  0A41  150D               	bsf	13,2	;volatile
  1246  0A42  108D               	bcf	13,1	;volatile
  1247                           
  1248                           ;lcd.h: 84: _delay((unsigned long)((5)*(1000000/4000000.0)));
  1249  0A43  0000               	nop
  1250                           
  1251                           ;lcd.h: 85: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 1; 
      +                          PORTBbits.RB2 = 0;
  1252  0A44  0020               	movlb	0	; select bank0
  1253  0A45  138D               	bcf	13,7	;volatile
  1254  0A46  130D               	bcf	13,6	;volatile
  1255  0A47  168D               	bsf	13,5	;volatile
  1256  0A48  160D               	bsf	13,4	;volatile
  1257  0A49  110D               	bcf	13,2	;volatile
  1258                           
  1259                           ;lcd.h: 86: PORTBbits.RB1 = 0;
  1260  0A4A  108D               	bcf	13,1	;volatile
  1261                           
  1262                           ;lcd.h: 87: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1263  0A4B  30E5               	movlw	229
  1264  0A4C  00F3               	movwf	??_Lcd_Init
  1265  0A4D                     u3777:	
  1266  0A4D  3200               	nop2
  1267  0A4E  0000               	nop
  1268  0A4F  0BF3               	decfsz	??_Lcd_Init,f
  1269  0A50  2A4D               	goto	u3777
  1270  0A51  3001               	movlw	1
  1271  0A52  00F3               	movwf	??_Lcd_Init
  1272  0A53  0873               	movf	??_Lcd_Init,w
  1273  0A54  07F4               	addwf	Lcd_Init@data,f
  1274  0A55  3004               	movlw	4
  1275  0A56  0274               	subwf	Lcd_Init@data,w
  1276  0A57  1C03               	skipc
  1277  0A58  2A36               	goto	l33
  1278  0A59                     l34:	
  1279                           
  1280                           ;lcd.h: 88: }
  1281                           ;lcd.h: 89: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 0; PORTBbits.RB1 = 0;
  1282  0A59  0020               	movlb	0	; select bank0
  1283  0A5A  138D               	bcf	13,7	;volatile
  1284  0A5B  130D               	bcf	13,6	;volatile
  1285  0A5C  168D               	bsf	13,5	;volatile
  1286  0A5D  120D               	bcf	13,4	;volatile
  1287  0A5E  110D               	bcf	13,2	;volatile
  1288  0A5F  108D               	bcf	13,1	;volatile
  1289                           
  1290                           ;lcd.h: 90: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 1; PORTBbits.RB1 = 0;
  1291  0A60  138D               	bcf	13,7	;volatile
  1292  0A61  130D               	bcf	13,6	;volatile
  1293  0A62  168D               	bsf	13,5	;volatile
  1294  0A63  120D               	bcf	13,4	;volatile
  1295  0A64  150D               	bsf	13,2	;volatile
  1296  0A65  108D               	bcf	13,1	;volatile
  1297                           
  1298                           ;lcd.h: 91: _delay((unsigned long)((5)*(1000000/4000000.0)));
  1299  0A66  0000               	nop
  1300                           
  1301                           ;lcd.h: 92: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 0; PORTBbits.RB1 = 0;
  1302  0A67  0020               	movlb	0	; select bank0
  1303  0A68  138D               	bcf	13,7	;volatile
  1304  0A69  130D               	bcf	13,6	;volatile
  1305  0A6A  168D               	bsf	13,5	;volatile
  1306  0A6B  120D               	bcf	13,4	;volatile
  1307  0A6C  110D               	bcf	13,2	;volatile
  1308  0A6D  108D               	bcf	13,1	;volatile
  1309                           
  1310                           ;lcd.h: 93: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1311  0A6E  30E5               	movlw	229
  1312  0A6F  00F3               	movwf	??_Lcd_Init
  1313  0A70                     u3787:	
  1314  0A70  3200               	nop2
  1315  0A71  0000               	nop
  1316  0A72  0BF3               	decfsz	??_Lcd_Init,f
  1317  0A73  2A70               	goto	u3787
  1318                           
  1319                           ;lcd.h: 94: data = 40; Lcd_Cmd(data);
  1320  0A74  3028               	movlw	40
  1321  0A75  00F3               	movwf	??_Lcd_Init
  1322  0A76  0873               	movf	??_Lcd_Init,w
  1323  0A77  00F4               	movwf	Lcd_Init@data
  1324  0A78  0874               	movf	Lcd_Init@data,w
  1325  0A79  3188  20D9  3189   	fcall	_Lcd_Cmd
  1326                           
  1327                           ;lcd.h: 95: data = 16; Lcd_Cmd(data);
  1328  0A7C  3010               	movlw	16
  1329  0A7D  00F3               	movwf	??_Lcd_Init
  1330  0A7E  0873               	movf	??_Lcd_Init,w
  1331  0A7F  00F4               	movwf	Lcd_Init@data
  1332  0A80  0874               	movf	Lcd_Init@data,w
  1333  0A81  3188  20D9  3189   	fcall	_Lcd_Cmd
  1334                           
  1335                           ;lcd.h: 96: data = 1; Lcd_Cmd(data);
  1336  0A84  01F4               	clrf	Lcd_Init@data
  1337  0A85  0AF4               	incf	Lcd_Init@data,f
  1338  0A86  0874               	movf	Lcd_Init@data,w
  1339  0A87  3188  20D9  3189   	fcall	_Lcd_Cmd
  1340                           
  1341                           ;lcd.h: 97: data = 15; Lcd_Cmd(data);
  1342  0A8A  300F               	movlw	15
  1343  0A8B  00F3               	movwf	??_Lcd_Init
  1344  0A8C  0873               	movf	??_Lcd_Init,w
  1345  0A8D  00F4               	movwf	Lcd_Init@data
  1346  0A8E  0874               	movf	Lcd_Init@data,w
  1347  0A8F  3188  20D9         	fcall	_Lcd_Cmd
  1348  0A91  0008               	return
  1349  0A92                     __end_of_Lcd_Init:	
  1350                           
  1351                           	psect	text3
  1352  0D9B                     __ptext3:	
  1353 ;; *************** function _loop *****************
  1354 ;; Defined at:
  1355 ;;		line 78 in file "principal.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  result          3   37[BANK1 ] float 
  1360 ;;  ant             3   34[BANK1 ] float 
  1361 ;;  neg             2   42[BANK1 ] int 
  1362 ;;  pos             2   40[BANK1 ] int 
  1363 ;; Return value:  Size  Location     Type
  1364 ;;		None               void
  1365 ;; Registers used:
  1366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1372 ;;      Params:         0       0       0       0       0       0       0       0
  1373 ;;      Locals:         0       0      10       0       0       0       0       0
  1374 ;;      Temps:          0       2       0       0       0       0       0       0
  1375 ;;      Totals:         0       2      10       0       0       0       0       0
  1376 ;;Total ram usage:       12 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    4
  1379 ;; This function calls:
  1380 ;;		_Lcd_Cmd
  1381 ;;		_Lcd_Out
  1382 ;;		___awtoft
  1383 ;;		___ftdiv
  1384 ;;		___ftmul
  1385 ;;		_convertir
  1386 ;;		_sprintf
  1387 ;; This function is called by:
  1388 ;;		_main
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           
  1393                           ;psect for function _loop
  1394  0D9B                     _loop:	
  1395                           
  1396                           ;principal.c: 80: int pos=0;
  1397                           
  1398                           ;incstack = 0
  1399                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1400  0D9B  0021               	movlb	1	; select bank1
  1401  0D9C  01C8               	clrf	loop@pos^(0+128)
  1402  0D9D  01C9               	clrf	(loop@pos+1)^(0+128)
  1403                           
  1404                           ;principal.c: 81: int neg=0;
  1405  0D9E  01CA               	clrf	loop@neg^(0+128)
  1406  0D9F  01CB               	clrf	(loop@neg+1)^(0+128)
  1407                           
  1408                           ;principal.c: 82: float result=0.0f,ant;
  1409  0DA0  3000               	movlw	0
  1410  0DA1  00C5               	movwf	loop@result^(0+128)
  1411  0DA2  3000               	movlw	0
  1412  0DA3  00C6               	movwf	(loop@result+1)^(0+128)
  1413  0DA4  3000               	movlw	0
  1414  0DA5  00C7               	movwf	(loop@result+2)^(0+128)
  1415  0DA6                     l2685:	
  1416                           ;principal.c: 83: while(1)
  1417                           
  1418                           
  1419                           ;principal.c: 84: {
  1420                           ;principal.c: 85: ant=result;
  1421  0DA6  0021               	movlb	1	; select bank1
  1422  0DA7  0845               	movf	loop@result^(0+128),w
  1423  0DA8  00C2               	movwf	loop@ant^(0+128)
  1424  0DA9  0846               	movf	(loop@result+1)^(0+128),w
  1425  0DAA  00C3               	movwf	(loop@ant+1)^(0+128)
  1426  0DAB  0847               	movf	(loop@result+2)^(0+128),w
  1427  0DAC  00C4               	movwf	(loop@ant+2)^(0+128)
  1428                           
  1429                           ;principal.c: 86: pos=convertir(0);
  1430  0DAD  3000               	movlw	0
  1431  0DAE  00F0               	movwf	convertir@channel
  1432  0DAF  3000               	movlw	0
  1433  0DB0  00F1               	movwf	convertir@channel+1
  1434  0DB1  3196  2684  318D   	fcall	_convertir
  1435  0DB4  0871               	movf	?_convertir+1,w
  1436  0DB5  0021               	movlb	1	; select bank1
  1437  0DB6  01C9               	clrf	(loop@pos+1)^(0+128)
  1438  0DB7  07C9               	addwf	(loop@pos+1)^(0+128),f
  1439  0DB8  0870               	movf	?_convertir,w
  1440  0DB9  01C8               	clrf	loop@pos^(0+128)
  1441  0DBA  07C8               	addwf	loop@pos^(0+128),f
  1442                           
  1443                           ;principal.c: 87: neg=convertir(1);
  1444  0DBB  3001               	movlw	1
  1445  0DBC  00F0               	movwf	convertir@channel
  1446  0DBD  3000               	movlw	0
  1447  0DBE  00F1               	movwf	convertir@channel+1
  1448  0DBF  3196  2684  318D   	fcall	_convertir
  1449  0DC2  0871               	movf	?_convertir+1,w
  1450  0DC3  0021               	movlb	1	; select bank1
  1451  0DC4  01CB               	clrf	(loop@neg+1)^(0+128)
  1452  0DC5  07CB               	addwf	(loop@neg+1)^(0+128),f
  1453  0DC6  0870               	movf	?_convertir,w
  1454  0DC7  01CA               	clrf	loop@neg^(0+128)
  1455  0DC8  07CA               	addwf	loop@neg^(0+128),f
  1456                           
  1457                           ;principal.c: 89: if(pos>neg)
  1458  0DC9  084B               	movf	(loop@neg+1)^(0+128),w
  1459  0DCA  3A80               	xorlw	128
  1460  0DCB  0020               	movlb	0	; select bank0
  1461  0DCC  00EC               	movwf	??_loop
  1462  0DCD  0021               	movlb	1	; select bank1
  1463  0DCE  0849               	movf	(loop@pos+1)^(0+128),w
  1464  0DCF  3A80               	xorlw	128
  1465  0DD0  0020               	movlb	0	; select bank0
  1466  0DD1  026C               	subwf	??_loop,w
  1467  0DD2  1D03               	skipz
  1468  0DD3  2DD7               	goto	u3675
  1469  0DD4  0021               	movlb	1	; select bank1
  1470  0DD5  0848               	movf	loop@pos^(0+128),w
  1471  0DD6  024A               	subwf	loop@neg^(0+128),w
  1472  0DD7                     u3675:	
  1473  0DD7  1803               	skipnc
  1474  0DD8  2E0D               	goto	l2695
  1475                           
  1476                           ;principal.c: 90: result=(pos-neg)/2f;
  1477  0DD9  3000               	movlw	0
  1478  0DDA  0020               	movlb	0	; select bank0
  1479  0DDB  00A0               	movwf	___ftdiv@f2
  1480  0DDC  3000               	movlw	0
  1481  0DDD  00A1               	movwf	___ftdiv@f2+1
  1482  0DDE  3040               	movlw	64
  1483  0DDF  00A2               	movwf	___ftdiv@f2+2
  1484  0DE0  0021               	movlb	1	; select bank1
  1485  0DE1  094A               	comf	loop@neg^(0+128),w
  1486  0DE2  0020               	movlb	0	; select bank0
  1487  0DE3  00EC               	movwf	??_loop
  1488  0DE4  0021               	movlb	1	; select bank1
  1489  0DE5  094B               	comf	(loop@neg+1)^(0+128),w
  1490  0DE6  0020               	movlb	0	; select bank0
  1491  0DE7  00ED               	movwf	??_loop+1
  1492  0DE8  0AEC               	incf	??_loop,f
  1493  0DE9  1903               	skipnz
  1494  0DEA  0AED               	incf	??_loop+1,f
  1495  0DEB  0021               	movlb	1	; select bank1
  1496  0DEC  0848               	movf	loop@pos^(0+128),w
  1497  0DED  0020               	movlb	0	; select bank0
  1498  0DEE  076C               	addwf	??_loop,w
  1499  0DEF  00F8               	movwf	___awtoft@c
  1500  0DF0  0021               	movlb	1	; select bank1
  1501  0DF1  0849               	movf	(loop@pos+1)^(0+128),w
  1502  0DF2  0020               	movlb	0	; select bank0
  1503  0DF3  3D6D               	addwfc	??_loop+1,w
  1504  0DF4  00F9               	movwf	___awtoft@c+1
  1505  0DF5  3180  2004  318D   	fcall	___awtoft
  1506  0DF8  0878               	movf	?___awtoft,w
  1507  0DF9  0020               	movlb	0	; select bank0
  1508  0DFA  00A3               	movwf	___ftdiv@f1
  1509  0DFB  0879               	movf	?___awtoft+1,w
  1510  0DFC  00A4               	movwf	___ftdiv@f1+1
  1511  0DFD  087A               	movf	?___awtoft+2,w
  1512  0DFE  00A5               	movwf	___ftdiv@f1+2
  1513  0DFF  318A  2292  318D   	fcall	___ftdiv
  1514  0E02  0020               	movlb	0	; select bank0
  1515  0E03  0820               	movf	?___ftdiv,w
  1516  0E04  0021               	movlb	1	; select bank1
  1517  0E05  00C5               	movwf	loop@result^(0+128)
  1518  0E06  0020               	movlb	0	; select bank0
  1519  0E07  0821               	movf	?___ftdiv+1,w
  1520  0E08  0021               	movlb	1	; select bank1
  1521  0E09  00C6               	movwf	(loop@result+1)^(0+128)
  1522  0E0A  0020               	movlb	0	; select bank0
  1523  0E0B  0822               	movf	?___ftdiv+2,w
  1524  0E0C  2E61               	goto	L1
  1525  0E0D                     l2695:	
  1526                           
  1527                           ;principal.c: 91: else
  1528                           ;principal.c: 92: if(pos<neg)
  1529  0E0D  0021               	movlb	1	; select bank1
  1530  0E0E  0849               	movf	(loop@pos+1)^(0+128),w
  1531  0E0F  3A80               	xorlw	128
  1532  0E10  0020               	movlb	0	; select bank0
  1533  0E11  00EC               	movwf	??_loop
  1534  0E12  0021               	movlb	1	; select bank1
  1535  0E13  084B               	movf	(loop@neg+1)^(0+128),w
  1536  0E14  3A80               	xorlw	128
  1537  0E15  0020               	movlb	0	; select bank0
  1538  0E16  026C               	subwf	??_loop,w
  1539  0E17  1D03               	skipz
  1540  0E18  2E1C               	goto	u3685
  1541  0E19  0021               	movlb	1	; select bank1
  1542  0E1A  084A               	movf	loop@neg^(0+128),w
  1543  0E1B  0248               	subwf	loop@pos^(0+128),w
  1544  0E1C                     u3685:	
  1545  0E1C  1803               	skipnc
  1546  0E1D  2E63               	goto	l2699
  1547                           
  1548                           ;principal.c: 93: result=((neg-pos)/2f)*-1;
  1549  0E1E  3000               	movlw	0
  1550  0E1F  0020               	movlb	0	; select bank0
  1551  0E20  00B0               	movwf	___ftmul@f1
  1552  0E21  3080               	movlw	128
  1553  0E22  00B1               	movwf	___ftmul@f1+1
  1554  0E23  30BF               	movlw	191
  1555  0E24  00B2               	movwf	___ftmul@f1+2
  1556  0E25  3000               	movlw	0
  1557  0E26  00A0               	movwf	___ftdiv@f2
  1558  0E27  3000               	movlw	0
  1559  0E28  00A1               	movwf	___ftdiv@f2+1
  1560  0E29  3040               	movlw	64
  1561  0E2A  00A2               	movwf	___ftdiv@f2+2
  1562  0E2B  0021               	movlb	1	; select bank1
  1563  0E2C  0948               	comf	loop@pos^(0+128),w
  1564  0E2D  0020               	movlb	0	; select bank0
  1565  0E2E  00EC               	movwf	??_loop
  1566  0E2F  0021               	movlb	1	; select bank1
  1567  0E30  0949               	comf	(loop@pos+1)^(0+128),w
  1568  0E31  0020               	movlb	0	; select bank0
  1569  0E32  00ED               	movwf	??_loop+1
  1570  0E33  0AEC               	incf	??_loop,f
  1571  0E34  1903               	skipnz
  1572  0E35  0AED               	incf	??_loop+1,f
  1573  0E36  0021               	movlb	1	; select bank1
  1574  0E37  084A               	movf	loop@neg^(0+128),w
  1575  0E38  0020               	movlb	0	; select bank0
  1576  0E39  076C               	addwf	??_loop,w
  1577  0E3A  00F8               	movwf	___awtoft@c
  1578  0E3B  0021               	movlb	1	; select bank1
  1579  0E3C  084B               	movf	(loop@neg+1)^(0+128),w
  1580  0E3D  0020               	movlb	0	; select bank0
  1581  0E3E  3D6D               	addwfc	??_loop+1,w
  1582  0E3F  00F9               	movwf	___awtoft@c+1
  1583  0E40  3180  2004  318D   	fcall	___awtoft
  1584  0E43  0878               	movf	?___awtoft,w
  1585  0E44  0020               	movlb	0	; select bank0
  1586  0E45  00A3               	movwf	___ftdiv@f1
  1587  0E46  0879               	movf	?___awtoft+1,w
  1588  0E47  00A4               	movwf	___ftdiv@f1+1
  1589  0E48  087A               	movf	?___awtoft+2,w
  1590  0E49  00A5               	movwf	___ftdiv@f1+2
  1591  0E4A  318A  2292  318D   	fcall	___ftdiv
  1592  0E4D  0020               	movlb	0	; select bank0
  1593  0E4E  0820               	movf	?___ftdiv,w
  1594  0E4F  00B3               	movwf	___ftmul@f2
  1595  0E50  0821               	movf	?___ftdiv+1,w
  1596  0E51  00B4               	movwf	___ftmul@f2+1
  1597  0E52  0822               	movf	?___ftdiv+2,w
  1598  0E53  00B5               	movwf	___ftmul@f2+2
  1599  0E54  318B  233B  318D   	fcall	___ftmul
  1600  0E57  0020               	movlb	0	; select bank0
  1601  0E58  0830               	movf	?___ftmul,w
  1602  0E59  0021               	movlb	1	; select bank1
  1603  0E5A  00C5               	movwf	loop@result^(0+128)
  1604  0E5B  0020               	movlb	0	; select bank0
  1605  0E5C  0831               	movf	?___ftmul+1,w
  1606  0E5D  0021               	movlb	1	; select bank1
  1607  0E5E  00C6               	movwf	(loop@result+1)^(0+128)
  1608  0E5F  0020               	movlb	0	; select bank0
  1609  0E60  0832               	movf	?___ftmul+2,w
  1610  0E61                     L1:	
  1611  0E61  0021               	movlb	1	; select bank1
  1612  0E62  00C7               	movwf	(loop@result+2)^(0+128)
  1613  0E63                     l2699:	
  1614                           
  1615                           ;principal.c: 95: if(ant!=result)
  1616  0E63  0021               	movlb	1	; select bank1
  1617  0E64  0847               	movf	(loop@result+2)^(0+128),w
  1618  0E65  0644               	xorwf	(loop@ant+2)^(0+128),w
  1619  0E66  1D03               	skipz
  1620  0E67  2E6E               	goto	u3695
  1621  0E68  0846               	movf	(loop@result+1)^(0+128),w
  1622  0E69  0643               	xorwf	(loop@ant+1)^(0+128),w
  1623  0E6A  1D03               	skipz
  1624  0E6B  2E6E               	goto	u3695
  1625  0E6C  0845               	movf	loop@result^(0+128),w
  1626  0E6D  0642               	xorwf	loop@ant^(0+128),w
  1627  0E6E                     u3695:	
  1628  0E6E  1903               	skipnz
  1629  0E6F  2DA6               	goto	l2685
  1630                           
  1631                           ;principal.c: 96: {
  1632                           ;principal.c: 97: sprintf(buffer,"temp =%f",result);
  1633  0E70  3076               	movlw	low (STR_1| (0+32768))
  1634  0E71  0020               	movlb	0	; select bank0
  1635  0E72  00E1               	movwf	sprintf@f
  1636  0E73  3090               	movlw	high (STR_1| (0+32768))
  1637  0E74  00E2               	movwf	sprintf@f+1
  1638  0E75  0021               	movlb	1	; select bank1
  1639  0E76  0845               	movf	loop@result^(0+128),w
  1640  0E77  0020               	movlb	0	; select bank0
  1641  0E78  00E3               	movwf	?_sprintf+2
  1642  0E79  0021               	movlb	1	; select bank1
  1643  0E7A  0846               	movf	(loop@result+1)^(0+128),w
  1644  0E7B  0020               	movlb	0	; select bank0
  1645  0E7C  00E4               	movwf	?_sprintf+3
  1646  0E7D  0021               	movlb	1	; select bank1
  1647  0E7E  0847               	movf	(loop@result+2)^(0+128),w
  1648  0E7F  0020               	movlb	0	; select bank0
  1649  0E80  00E5               	movwf	?_sprintf+4
  1650  0E81  30CC               	movlw	_buffer& (0+255)
  1651  0E82  3183  2391  318D   	fcall	_sprintf
  1652                           
  1653                           ;principal.c: 98: Lcd_Cmd(1);
  1654  0E85  3001               	movlw	1
  1655  0E86  3188  20D9  318D   	fcall	_Lcd_Cmd
  1656                           
  1657                           ;principal.c: 99: Lcd_Out(1,1,buffer);
  1658  0E89  01F3               	clrf	Lcd_Out@x
  1659  0E8A  0AF3               	incf	Lcd_Out@x,f
  1660  0E8B  30CC               	movlw	_buffer& (0+255)
  1661  0E8C  0020               	movlb	0	; select bank0
  1662  0E8D  00EC               	movwf	??_loop
  1663  0E8E  086C               	movf	??_loop,w
  1664  0E8F  00F4               	movwf	Lcd_Out@buffer
  1665  0E90  3001               	movlw	1
  1666  0E91  3196  2614  318D   	fcall	_Lcd_Out
  1667  0E94  2DA6               	goto	l2685
  1668  0E95                     __end_of_loop:	
  1669                           
  1670                           	psect	text4
  1671  0391                     __ptext4:	
  1672 ;; *************** function _sprintf *****************
  1673 ;; Defined at:
  1674 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  sp              1    wreg     PTR unsigned char 
  1677 ;;		 -> buffer(30), 
  1678 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  1679 ;;		 -> STR_1(9), 
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  sp              1   29[BANK1 ] PTR unsigned char 
  1682 ;;		 -> buffer(30), 
  1683 ;;  vd              4    8[BANK1 ] unsigned long 
  1684 ;;  vd              4   12[BANK1 ] unsigned long 
  1685 ;;  _val            4   20[BANK1 ] struct .
  1686 ;;  fval            3   30[BANK1 ] struct .
  1687 ;;  integ           3   24[BANK1 ] struct .
  1688 ;;  ival            3    0        struct .
  1689 ;;  exp             2   27[BANK1 ] int 
  1690 ;;  prec            2   18[BANK1 ] int 
  1691 ;;  flag            2   16[BANK1 ] unsigned short 
  1692 ;;  width           2    0        int 
  1693 ;;  c               1   33[BANK1 ] char 
  1694 ;;  ap              1    7[BANK1 ] PTR void [1]
  1695 ;;		 -> ?_sprintf(2), 
  1696 ;;  d               1    0        unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  2   65[BANK0 ] int 
  1699 ;; Registers used:
  1700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1706 ;;      Params:         0       5       0       0       0       0       0       0
  1707 ;;      Locals:         0       0      34       0       0       0       0       0
  1708 ;;      Temps:          0       6       0       0       0       0       0       0
  1709 ;;      Totals:         0      11      34       0       0       0       0       0
  1710 ;;Total ram usage:       45 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    3
  1713 ;; This function calls:
  1714 ;;		___awdiv
  1715 ;;		___ftadd
  1716 ;;		___ftge
  1717 ;;		___ftmul
  1718 ;;		___ftneg
  1719 ;;		___ftsub
  1720 ;;		___fttol
  1721 ;;		___lldiv
  1722 ;;		___llmod
  1723 ;;		___lltoft
  1724 ;;		___wmul
  1725 ;;		__div_to_l_
  1726 ;;		__tdiv_to_l_
  1727 ;;		_fround
  1728 ;;		_scale
  1729 ;; This function is called by:
  1730 ;;		_loop
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           
  1735                           ;psect for function _sprintf
  1736  0391                     _sprintf:	
  1737                           
  1738                           ;incstack = 0
  1739                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1740                           ;sprintf@sp stored from wreg
  1741  0391  0021               	movlb	1	; select bank1
  1742  0392  00BD               	movwf	sprintf@sp^(0+128)
  1743                           
  1744                           ;doprnt.c: 494: va_list ap;
  1745                           ;doprnt.c: 499: signed char c;
  1746                           ;doprnt.c: 501: int width;
  1747                           ;doprnt.c: 504: int prec;
  1748                           ;doprnt.c: 508: unsigned short flag;
  1749                           ;doprnt.c: 515: char d;
  1750                           ;doprnt.c: 516: double fval, integ;
  1751                           ;doprnt.c: 517: int exp;
  1752                           ;doprnt.c: 518: double ival;
  1753                           ;doprnt.c: 519: union {
  1754                           ;doprnt.c: 520: unsigned long _val;
  1755                           ;doprnt.c: 521: struct {
  1756                           ;doprnt.c: 522: const char * _cp;
  1757                           ;doprnt.c: 523: unsigned _len;
  1758                           ;doprnt.c: 524: } _str;
  1759                           ;doprnt.c: 525: } _val;
  1760                           ;doprnt.c: 542: *ap = __va_start();
  1761  0393  3063               	movlw	(?_sprintf+2)& (0+255)
  1762  0394  0020               	movlb	0	; select bank0
  1763  0395  00E6               	movwf	??_sprintf
  1764  0396  0866               	movf	??_sprintf,w
  1765  0397  0021               	movlb	1	; select bank1
  1766  0398  00A7               	movwf	sprintf@ap^(0+128)
  1767  0399                     l2587:	
  1768                           ;doprnt.c: 545: while(c = *f++) {
  1769                           
  1770  0399  0020               	movlb	0	; select bank0
  1771  039A  0862               	movf	sprintf@f+1,w
  1772  039B  00E7               	movwf	??_sprintf+1
  1773  039C  0861               	movf	sprintf@f,w
  1774  039D  00E6               	movwf	??_sprintf
  1775  039E  0AE1               	incf	sprintf@f,f
  1776  039F  1903               	skipnz
  1777  03A0  0AE2               	incf	sprintf@f+1,f
  1778  03A1  0866               	movf	??_sprintf,w
  1779  03A2  0084               	movwf	4
  1780  03A3  0867               	movf	??_sprintf+1,w
  1781  03A4  0085               	movwf	5
  1782  03A5  0800               	movf	0,w	;code access
  1783  03A6  00E8               	movwf	??_sprintf+2
  1784  03A7  0868               	movf	??_sprintf+2,w
  1785  03A8  0021               	movlb	1	; select bank1
  1786  03A9  00C1               	movwf	sprintf@c^(0+128)
  1787  03AA  08C1               	movf	sprintf@c^(0+128),f
  1788  03AB  1903               	btfsc	3,2
  1789  03AC  2FF0               	goto	l2589
  1790                           
  1791                           ;doprnt.c: 547: if(c != '%')
  1792  03AD  0841               	movf	sprintf@c^(0+128),w
  1793  03AE  3A25               	xorlw	37
  1794  03AF  1903               	skipnz
  1795  03B0  2BB4               	goto	l2431
  1796                           
  1797                           ;doprnt.c: 549: {
  1798                           ;doprnt.c: 550: ((*sp++ = (c)));
  1799  03B1  0841               	movf	sprintf@c^(0+128),w
  1800  03B2  0020               	movlb	0	; select bank0
  1801  03B3  2FE2               	goto	L6
  1802  03B4                     l2431:	
  1803                           ;doprnt.c: 551: continue;
  1804                           
  1805                           
  1806                           ;doprnt.c: 552: }
  1807                           ;doprnt.c: 557: flag = 0;
  1808  03B4  01B0               	clrf	sprintf@flag^(0+128)
  1809  03B5  01B1               	clrf	(sprintf@flag+1)^(0+128)
  1810                           
  1811                           ;doprnt.c: 644: switch(c = *f++) {
  1812  03B6  2BB9               	goto	l2435
  1813  03B7                     l130:	
  1814                           ;doprnt.c: 671: case 'f':
  1815                           
  1816                           ;doprnt.c: 647: goto alldone;
  1817                           
  1818                           ;doprnt.c: 646: case 0:
  1819                           
  1820                           
  1821                           ;doprnt.c: 672: flag |= 0x400;
  1822  03B7  1531               	bsf	(sprintf@flag^(0+128)+1),2
  1823                           
  1824                           ;doprnt.c: 673: break;
  1825  03B8  2BCF               	goto	l2437
  1826  03B9                     l2435:	
  1827                           ;doprnt.c: 831: }
  1828                           
  1829                           ;doprnt.c: 822: continue;
  1830                           
  1831                           ;doprnt.c: 811: default:
  1832                           
  1833  03B9  0020               	movlb	0	; select bank0
  1834  03BA  0862               	movf	sprintf@f+1,w
  1835  03BB  00E7               	movwf	??_sprintf+1
  1836  03BC  0861               	movf	sprintf@f,w
  1837  03BD  00E6               	movwf	??_sprintf
  1838  03BE  0AE1               	incf	sprintf@f,f
  1839  03BF  1903               	skipnz
  1840  03C0  0AE2               	incf	sprintf@f+1,f
  1841  03C1  0866               	movf	??_sprintf,w
  1842  03C2  0084               	movwf	4
  1843  03C3  0867               	movf	??_sprintf+1,w
  1844  03C4  0085               	movwf	5
  1845  03C5  0800               	movf	0,w	;code access
  1846  03C6  0021               	movlb	1	; select bank1
  1847  03C7  00C1               	movwf	sprintf@c^(0+128)
  1848                           
  1849                           ; Switch size 1, requested type "space"
  1850                           ; Number of cases is 2, Range of values is 0 to 102
  1851                           ; switch strategies available:
  1852                           ; Name         Instructions Cycles
  1853                           ; simple_byte            7     4 (average)
  1854                           ; direct_byte          212     6 (fixed)
  1855                           ; jumptable            260     6 (fixed)
  1856                           ;	Chosen strategy is simple_byte
  1857  03C8  3A00               	xorlw	0	; case 0
  1858  03C9  1903               	skipnz
  1859  03CA  2FF0               	goto	l2589
  1860  03CB  3A66               	xorlw	102	; case 102
  1861  03CC  1903               	skipnz
  1862  03CD  2BB7               	goto	l130
  1863  03CE  2B99               	goto	l2587
  1864  03CF                     l2437:	
  1865                           
  1866                           ;doprnt.c: 834: if(flag & (0x700)) {
  1867  03CF  3000               	movlw	0
  1868  03D0  0530               	andwf	sprintf@flag^(0+128),w
  1869  03D1  0020               	movlb	0	; select bank0
  1870  03D2  00E6               	movwf	??_sprintf
  1871  03D3  3007               	movlw	7
  1872  03D4  0021               	movlb	1	; select bank1
  1873  03D5  0531               	andwf	(sprintf@flag+1)^(0+128),w
  1874  03D6  0020               	movlb	0	; select bank0
  1875  03D7  00E7               	movwf	??_sprintf+1
  1876  03D8  0867               	movf	??_sprintf+1,w
  1877  03D9  0466               	iorwf	??_sprintf,w
  1878  03DA  1903               	skipnz
  1879  03DB  2FD3               	goto	l2581
  1880                           
  1881                           ;doprnt.c: 838: prec = 6;
  1882  03DC  3006               	movlw	6
  1883  03DD  0021               	movlb	1	; select bank1
  1884  03DE  00B2               	movwf	sprintf@prec^(0+128)
  1885  03DF  3000               	movlw	0
  1886  03E0  00B3               	movwf	(sprintf@prec^(0+128)+1)
  1887                           
  1888                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1889  03E1  0827               	movf	sprintf@ap^(0+128),w
  1890  03E2  0086               	movwf	6
  1891  03E3  0187               	clrf	7
  1892  03E4  3F40               	moviw [0]fsr1
  1893  03E5  00BE               	movwf	sprintf@fval^(0+128)
  1894  03E6  3F41               	moviw [1]fsr1
  1895  03E7  00BF               	movwf	(sprintf@fval+1)^(0+128)
  1896  03E8  3F42               	moviw [2]fsr1
  1897  03E9  00C0               	movwf	(sprintf@fval+2)^(0+128)
  1898  03EA  3003               	movlw	3
  1899  03EB  0020               	movlb	0	; select bank0
  1900  03EC  00E6               	movwf	??_sprintf
  1901  03ED  0866               	movf	??_sprintf,w
  1902  03EE  0021               	movlb	1	; select bank1
  1903  03EF  07A7               	addwf	sprintf@ap^(0+128),f
  1904                           
  1905                           ;doprnt.c: 840: if(fval < 0.0) {
  1906  03F0  083E               	movf	sprintf@fval^(0+128),w
  1907  03F1  00F0               	movwf	___ftge@ff1
  1908  03F2  083F               	movf	(sprintf@fval+1)^(0+128),w
  1909  03F3  00F1               	movwf	___ftge@ff1+1
  1910  03F4  0840               	movf	(sprintf@fval+2)^(0+128),w
  1911  03F5  00F2               	movwf	___ftge@ff1+2
  1912  03F6  3000               	movlw	0
  1913  03F7  00F3               	movwf	___ftge@ff2
  1914  03F8  3000               	movlw	0
  1915  03F9  00F4               	movwf	___ftge@ff2+1
  1916  03FA  3000               	movlw	0
  1917  03FB  00F5               	movwf	___ftge@ff2+2
  1918  03FC  3196  2649  3183   	fcall	___ftge
  1919  03FF  1803               	btfsc	3,0
  1920  0400  2C16               	goto	l2451
  1921                           
  1922                           ;doprnt.c: 841: fval = -fval;
  1923  0401  0021               	movlb	1	; select bank1
  1924  0402  083E               	movf	sprintf@fval^(0+128),w
  1925  0403  00F0               	movwf	___ftneg@f1
  1926  0404  083F               	movf	(sprintf@fval+1)^(0+128),w
  1927  0405  00F1               	movwf	___ftneg@f1+1
  1928  0406  0840               	movf	(sprintf@fval+2)^(0+128),w
  1929  0407  00F2               	movwf	___ftneg@f1+2
  1930  0408  3195  2586  3183   	fcall	___ftneg
  1931  040B  0870               	movf	?___ftneg,w
  1932  040C  0021               	movlb	1	; select bank1
  1933  040D  00BE               	movwf	sprintf@fval^(0+128)
  1934  040E  0871               	movf	?___ftneg+1,w
  1935  040F  00BF               	movwf	(sprintf@fval+1)^(0+128)
  1936  0410  0872               	movf	?___ftneg+2,w
  1937  0411  00C0               	movwf	(sprintf@fval+2)^(0+128)
  1938                           
  1939                           ;doprnt.c: 842: flag |= 0x03;
  1940  0412  3003               	movlw	3
  1941  0413  04B0               	iorwf	sprintf@flag^(0+128),f
  1942  0414  3000               	movlw	0
  1943  0415  04B1               	iorwf	(sprintf@flag+1)^(0+128),f
  1944  0416                     l2451:	
  1945                           
  1946                           ;doprnt.c: 843: }
  1947                           ;doprnt.c: 844: exp = 0;
  1948  0416  0021               	movlb	1	; select bank1
  1949  0417  01BB               	clrf	sprintf@exp^(0+128)
  1950  0418  01BC               	clrf	(sprintf@exp+1)^(0+128)
  1951                           
  1952                           ;doprnt.c: 845: if( fval!=0) {
  1953  0419  0840               	movf	(sprintf@fval+2)^(0+128),w
  1954  041A  043F               	iorwf	(sprintf@fval+1)^(0+128),w
  1955  041B  043E               	iorwf	sprintf@fval^(0+128),w
  1956  041C  1903               	skipnz
  1957  041D  2CDE               	goto	l135
  1958                           
  1959                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1960  041E  30BE               	movlw	low sprintf@fval
  1961  041F  0086               	movwf	6
  1962  0420  0187               	clrf	7
  1963  0421  3F40               	moviw [0]fsr1
  1964  0422  0020               	movlb	0	; select bank0
  1965  0423  00E6               	movwf	??_sprintf
  1966  0424  3F41               	moviw [1]fsr1
  1967  0425  00E7               	movwf	??_sprintf+1
  1968  0426  3F42               	moviw [2]fsr1
  1969  0427  00E8               	movwf	??_sprintf+2
  1970  0428  3F43               	moviw [3]fsr1
  1971  0429  00E9               	movwf	??_sprintf+3
  1972  042A  300F               	movlw	15
  1973  042B                     u3365:	
  1974  042B  36E9               	lsrf	??_sprintf+3,f
  1975  042C  0CE8               	rrf	??_sprintf+2,f
  1976  042D  0CE7               	rrf	??_sprintf+1,f
  1977  042E  0CE6               	rrf	??_sprintf,f
  1978  042F  0B89               	decfsz	9,f
  1979  0430  2C2B               	goto	u3365
  1980  0431  30FF               	movlw	255
  1981  0432  0566               	andwf	??_sprintf,w
  1982  0433  00EA               	movwf	??_sprintf+4
  1983  0434  3000               	movlw	0
  1984  0435  0567               	andwf	??_sprintf+1,w
  1985  0436  00EB               	movwf	??_sprintf+5
  1986  0437  086A               	movf	??_sprintf+4,w
  1987  0438  3E82               	addlw	130
  1988  0439  0021               	movlb	1	; select bank1
  1989  043A  00BB               	movwf	sprintf@exp^(0+128)
  1990  043B  30FF               	movlw	255
  1991  043C  0020               	movlb	0	; select bank0
  1992  043D  3D6B               	addwfc	??_sprintf+5,w
  1993  043E  0021               	movlb	1	; select bank1
  1994  043F  00BC               	movwf	(sprintf@exp+1)^(0+128)
  1995                           
  1996                           ;doprnt.c: 847: exp--;
  1997  0440  30FF               	movlw	255
  1998  0441  07BB               	addwf	sprintf@exp^(0+128),f
  1999  0442  30FF               	movlw	255
  2000  0443  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2001                           
  2002                           ;doprnt.c: 848: exp *= 3;
  2003  0444  3003               	movlw	3
  2004  0445  0020               	movlb	0	; select bank0
  2005  0446  00A4               	movwf	___wmul@multiplier
  2006  0447  3000               	movlw	0
  2007  0448  00A5               	movwf	___wmul@multiplier+1
  2008  0449  0021               	movlb	1	; select bank1
  2009  044A  083C               	movf	(sprintf@exp+1)^(0+128),w
  2010  044B  0020               	movlb	0	; select bank0
  2011  044C  01A7               	clrf	___wmul@multiplicand+1
  2012  044D  07A7               	addwf	___wmul@multiplicand+1,f
  2013  044E  0021               	movlb	1	; select bank1
  2014  044F  083B               	movf	sprintf@exp^(0+128),w
  2015  0450  0020               	movlb	0	; select bank0
  2016  0451  01A6               	clrf	___wmul@multiplicand
  2017  0452  07A6               	addwf	___wmul@multiplicand,f
  2018  0453  3195  25A7  3183   	fcall	___wmul
  2019  0456  0020               	movlb	0	; select bank0
  2020  0457  0825               	movf	?___wmul+1,w
  2021  0458  0021               	movlb	1	; select bank1
  2022  0459  01BC               	clrf	(sprintf@exp+1)^(0+128)
  2023  045A  07BC               	addwf	(sprintf@exp+1)^(0+128),f
  2024  045B  0020               	movlb	0	; select bank0
  2025  045C  0824               	movf	?___wmul,w
  2026  045D  0021               	movlb	1	; select bank1
  2027  045E  01BB               	clrf	sprintf@exp^(0+128)
  2028  045F  07BB               	addwf	sprintf@exp^(0+128),f
  2029                           
  2030                           ;doprnt.c: 849: exp /= 10;
  2031  0460  300A               	movlw	10
  2032  0461  00F7               	movwf	___awdiv@divisor
  2033  0462  3000               	movlw	0
  2034  0463  00F8               	movwf	___awdiv@divisor+1
  2035  0464  083C               	movf	(sprintf@exp+1)^(0+128),w
  2036  0465  01FA               	clrf	___awdiv@dividend+1
  2037  0466  07FA               	addwf	___awdiv@dividend+1,f
  2038  0467  083B               	movf	sprintf@exp^(0+128),w
  2039  0468  01F9               	clrf	___awdiv@dividend
  2040  0469  07F9               	addwf	___awdiv@dividend,f
  2041  046A  3197  274C  3183   	fcall	___awdiv
  2042  046D  0878               	movf	?___awdiv+1,w
  2043  046E  0021               	movlb	1	; select bank1
  2044  046F  01BC               	clrf	(sprintf@exp+1)^(0+128)
  2045  0470  07BC               	addwf	(sprintf@exp+1)^(0+128),f
  2046  0471  0877               	movf	?___awdiv,w
  2047  0472  01BB               	clrf	sprintf@exp^(0+128)
  2048  0473  07BB               	addwf	sprintf@exp^(0+128),f
  2049                           
  2050                           ;doprnt.c: 850: if(exp < 0)
  2051  0474  1FBC               	btfss	(sprintf@exp+1)^(0+128),7
  2052  0475  2C7A               	goto	l2467
  2053                           
  2054                           ;doprnt.c: 851: exp--;
  2055  0476  30FF               	movlw	255
  2056  0477  07BB               	addwf	sprintf@exp^(0+128),f
  2057  0478  30FF               	movlw	255
  2058  0479  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2059  047A                     l2467:	
  2060                           
  2061                           ;doprnt.c: 855: integ = scale(-exp);
  2062  047A  033B               	decf	sprintf@exp^(0+128),w
  2063  047B  3AFF               	xorlw	255
  2064  047C  3181  2141  3183   	fcall	_scale
  2065  047F  0020               	movlb	0	; select bank0
  2066  0480  0840               	movf	?_scale,w
  2067  0481  0021               	movlb	1	; select bank1
  2068  0482  00B8               	movwf	sprintf@integ^(0+128)
  2069  0483  0020               	movlb	0	; select bank0
  2070  0484  0841               	movf	?_scale+1,w
  2071  0485  0021               	movlb	1	; select bank1
  2072  0486  00B9               	movwf	(sprintf@integ+1)^(0+128)
  2073  0487  0020               	movlb	0	; select bank0
  2074  0488  0842               	movf	?_scale+2,w
  2075  0489  0021               	movlb	1	; select bank1
  2076  048A  00BA               	movwf	(sprintf@integ+2)^(0+128)
  2077                           
  2078                           ;doprnt.c: 856: integ *= fval;
  2079  048B  083E               	movf	sprintf@fval^(0+128),w
  2080  048C  0020               	movlb	0	; select bank0
  2081  048D  00B0               	movwf	___ftmul@f1
  2082  048E  0021               	movlb	1	; select bank1
  2083  048F  083F               	movf	(sprintf@fval+1)^(0+128),w
  2084  0490  0020               	movlb	0	; select bank0
  2085  0491  00B1               	movwf	___ftmul@f1+1
  2086  0492  0021               	movlb	1	; select bank1
  2087  0493  0840               	movf	(sprintf@fval+2)^(0+128),w
  2088  0494  0020               	movlb	0	; select bank0
  2089  0495  00B2               	movwf	___ftmul@f1+2
  2090  0496  0021               	movlb	1	; select bank1
  2091  0497  0838               	movf	sprintf@integ^(0+128),w
  2092  0498  0020               	movlb	0	; select bank0
  2093  0499  00B3               	movwf	___ftmul@f2
  2094  049A  0021               	movlb	1	; select bank1
  2095  049B  0839               	movf	(sprintf@integ+1)^(0+128),w
  2096  049C  0020               	movlb	0	; select bank0
  2097  049D  00B4               	movwf	___ftmul@f2+1
  2098  049E  0021               	movlb	1	; select bank1
  2099  049F  083A               	movf	(sprintf@integ+2)^(0+128),w
  2100  04A0  0020               	movlb	0	; select bank0
  2101  04A1  00B5               	movwf	___ftmul@f2+2
  2102  04A2  318B  233B  3183   	fcall	___ftmul
  2103  04A5  0020               	movlb	0	; select bank0
  2104  04A6  0830               	movf	?___ftmul,w
  2105  04A7  0021               	movlb	1	; select bank1
  2106  04A8  00B8               	movwf	sprintf@integ^(0+128)
  2107  04A9  0020               	movlb	0	; select bank0
  2108  04AA  0831               	movf	?___ftmul+1,w
  2109  04AB  0021               	movlb	1	; select bank1
  2110  04AC  00B9               	movwf	(sprintf@integ+1)^(0+128)
  2111  04AD  0020               	movlb	0	; select bank0
  2112  04AE  0832               	movf	?___ftmul+2,w
  2113  04AF  0021               	movlb	1	; select bank1
  2114  04B0  00BA               	movwf	(sprintf@integ+2)^(0+128)
  2115                           
  2116                           ;doprnt.c: 857: if(integ < 1.0)
  2117  04B1  0838               	movf	sprintf@integ^(0+128),w
  2118  04B2  00F0               	movwf	___ftge@ff1
  2119  04B3  0839               	movf	(sprintf@integ+1)^(0+128),w
  2120  04B4  00F1               	movwf	___ftge@ff1+1
  2121  04B5  083A               	movf	(sprintf@integ+2)^(0+128),w
  2122  04B6  00F2               	movwf	___ftge@ff1+2
  2123  04B7  3000               	movlw	0
  2124  04B8  00F3               	movwf	___ftge@ff2
  2125  04B9  3080               	movlw	128
  2126  04BA  00F4               	movwf	___ftge@ff2+1
  2127  04BB  303F               	movlw	63
  2128  04BC  00F5               	movwf	___ftge@ff2+2
  2129  04BD  3196  2649  3183   	fcall	___ftge
  2130  04C0  1803               	btfsc	3,0
  2131  04C1  2CC7               	goto	l2475
  2132                           
  2133                           ;doprnt.c: 858: exp--;
  2134  04C2  30FF               	movlw	255
  2135  04C3  0021               	movlb	1	; select bank1
  2136  04C4  07BB               	addwf	sprintf@exp^(0+128),f
  2137  04C5  30FF               	movlw	255
  2138  04C6  2CDD               	goto	L2
  2139  04C7                     l2475:	
  2140                           
  2141                           ;doprnt.c: 859: else if(integ >= 10.0)
  2142  04C7  0021               	movlb	1	; select bank1
  2143  04C8  0838               	movf	sprintf@integ^(0+128),w
  2144  04C9  00F0               	movwf	___ftge@ff1
  2145  04CA  0839               	movf	(sprintf@integ+1)^(0+128),w
  2146  04CB  00F1               	movwf	___ftge@ff1+1
  2147  04CC  083A               	movf	(sprintf@integ+2)^(0+128),w
  2148  04CD  00F2               	movwf	___ftge@ff1+2
  2149  04CE  3000               	movlw	0
  2150  04CF  00F3               	movwf	___ftge@ff2
  2151  04D0  3020               	movlw	32
  2152  04D1  00F4               	movwf	___ftge@ff2+1
  2153  04D2  3041               	movlw	65
  2154  04D3  00F5               	movwf	___ftge@ff2+2
  2155  04D4  3196  2649  3183   	fcall	___ftge
  2156  04D7  1C03               	btfss	3,0
  2157  04D8  2CDE               	goto	l135
  2158                           
  2159                           ;doprnt.c: 860: exp++;
  2160  04D9  3001               	movlw	1
  2161  04DA  0021               	movlb	1	; select bank1
  2162  04DB  07BB               	addwf	sprintf@exp^(0+128),f
  2163  04DC  3000               	movlw	0
  2164  04DD                     L2:	
  2165  04DD  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2166  04DE                     l135:	
  2167                           
  2168                           ;doprnt.c: 861: }
  2169                           ;doprnt.c: 1121: if(prec <= 12)
  2170  04DE  0021               	movlb	1	; select bank1
  2171  04DF  0833               	movf	(sprintf@prec+1)^(0+128),w
  2172  04E0  3A80               	xorlw	128
  2173  04E1  0020               	movlb	0	; select bank0
  2174  04E2  00E6               	movwf	??_sprintf
  2175  04E3  3080               	movlw	128
  2176  04E4  0266               	subwf	??_sprintf,w
  2177  04E5  1D03               	skipz
  2178  04E6  2CEA               	goto	u3405
  2179  04E7  300D               	movlw	13
  2180  04E8  0021               	movlb	1	; select bank1
  2181  04E9  0232               	subwf	sprintf@prec^(0+128),w
  2182  04EA                     u3405:	
  2183  04EA  1803               	skipnc
  2184  04EB  2D13               	goto	l2481
  2185                           
  2186                           ;doprnt.c: 1122: fval += fround(prec);
  2187  04EC  0021               	movlb	1	; select bank1
  2188  04ED  0832               	movf	sprintf@prec^(0+128),w
  2189  04EE  318E  2695  3183   	fcall	_fround
  2190  04F1  0020               	movlb	0	; select bank0
  2191  04F2  0840               	movf	?_fround,w
  2192  04F3  00CE               	movwf	___ftadd@f1
  2193  04F4  0841               	movf	?_fround+1,w
  2194  04F5  00CF               	movwf	___ftadd@f1+1
  2195  04F6  0842               	movf	?_fround+2,w
  2196  04F7  00D0               	movwf	___ftadd@f1+2
  2197  04F8  0021               	movlb	1	; select bank1
  2198  04F9  083E               	movf	sprintf@fval^(0+128),w
  2199  04FA  0020               	movlb	0	; select bank0
  2200  04FB  00D1               	movwf	___ftadd@f2
  2201  04FC  0021               	movlb	1	; select bank1
  2202  04FD  083F               	movf	(sprintf@fval+1)^(0+128),w
  2203  04FE  0020               	movlb	0	; select bank0
  2204  04FF  00D2               	movwf	___ftadd@f2+1
  2205  0500  0021               	movlb	1	; select bank1
  2206  0501  0840               	movf	(sprintf@fval+2)^(0+128),w
  2207  0502  0020               	movlb	0	; select bank0
  2208  0503  00D3               	movwf	___ftadd@f2+2
  2209  0504  318C  24A5  3183   	fcall	___ftadd
  2210  0507  0020               	movlb	0	; select bank0
  2211  0508  084E               	movf	?___ftadd,w
  2212  0509  0021               	movlb	1	; select bank1
  2213  050A  00BE               	movwf	sprintf@fval^(0+128)
  2214  050B  0020               	movlb	0	; select bank0
  2215  050C  084F               	movf	?___ftadd+1,w
  2216  050D  0021               	movlb	1	; select bank1
  2217  050E  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2218  050F  0020               	movlb	0	; select bank0
  2219  0510  0850               	movf	?___ftadd+2,w
  2220  0511  0021               	movlb	1	; select bank1
  2221  0512  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2222  0513                     l2481:	
  2223                           
  2224                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2225  0513  0021               	movlb	1	; select bank1
  2226  0514  083C               	movf	(sprintf@exp+1)^(0+128),w
  2227  0515  3A80               	xorlw	128
  2228  0516  0020               	movlb	0	; select bank0
  2229  0517  00E6               	movwf	??_sprintf
  2230  0518  3080               	movlw	128
  2231  0519  0266               	subwf	??_sprintf,w
  2232  051A  1D03               	skipz
  2233  051B  2D1F               	goto	u3415
  2234  051C  300A               	movlw	10
  2235  051D  0021               	movlb	1	; select bank1
  2236  051E  023B               	subwf	sprintf@exp^(0+128),w
  2237  051F                     u3415:	
  2238  051F  1803               	skipnc
  2239  0520  2D4A               	goto	l2489
  2240  0521  0021               	movlb	1	; select bank1
  2241  0522  0840               	movf	(sprintf@fval+2)^(0+128),w
  2242  0523  043F               	iorwf	(sprintf@fval+1)^(0+128),w
  2243  0524  043E               	iorwf	sprintf@fval^(0+128),w
  2244  0525  1903               	skipnz
  2245  0526  2D9A               	goto	l2505
  2246  0527  083E               	movf	sprintf@fval^(0+128),w
  2247  0528  0020               	movlb	0	; select bank0
  2248  0529  00C9               	movwf	___fttol@f1
  2249  052A  0021               	movlb	1	; select bank1
  2250  052B  083F               	movf	(sprintf@fval+1)^(0+128),w
  2251  052C  0020               	movlb	0	; select bank0
  2252  052D  00CA               	movwf	___fttol@f1+1
  2253  052E  0021               	movlb	1	; select bank1
  2254  052F  0840               	movf	(sprintf@fval+2)^(0+128),w
  2255  0530  0020               	movlb	0	; select bank0
  2256  0531  00CB               	movwf	___fttol@f1+2
  2257  0532  3188  2052  3183   	fcall	___fttol
  2258  0535  0020               	movlb	0	; select bank0
  2259  0536  084C               	movf	?___fttol+3,w
  2260  0537  044B               	iorwf	?___fttol+2,w
  2261  0538  044A               	iorwf	?___fttol+1,w
  2262  0539  0449               	iorwf	?___fttol,w
  2263  053A  1D03               	skipz
  2264  053B  2D9A               	goto	l2505
  2265  053C  0021               	movlb	1	; select bank1
  2266  053D  083C               	movf	(sprintf@exp+1)^(0+128),w
  2267  053E  3A80               	xorlw	128
  2268  053F  0020               	movlb	0	; select bank0
  2269  0540  00E6               	movwf	??_sprintf
  2270  0541  3080               	movlw	128
  2271  0542  0266               	subwf	??_sprintf,w
  2272  0543  1D03               	skipz
  2273  0544  2D48               	goto	u3445
  2274  0545  3002               	movlw	2
  2275  0546  0021               	movlb	1	; select bank1
  2276  0547  023B               	subwf	sprintf@exp^(0+128),w
  2277  0548                     u3445:	
  2278  0548  1C03               	skipc
  2279  0549  2D9A               	goto	l2505
  2280  054A                     l2489:	
  2281                           
  2282                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2283  054A  0021               	movlb	1	; select bank1
  2284  054B  0838               	movf	sprintf@integ^(0+128),w
  2285  054C  00F0               	movwf	___ftge@ff1
  2286  054D  0839               	movf	(sprintf@integ+1)^(0+128),w
  2287  054E  00F1               	movwf	___ftge@ff1+1
  2288  054F  083A               	movf	(sprintf@integ+2)^(0+128),w
  2289  0550  00F2               	movwf	___ftge@ff1+2
  2290  0551  3070               	movlw	112
  2291  0552  00F3               	movwf	___ftge@ff2
  2292  0553  3089               	movlw	137
  2293  0554  00F4               	movwf	___ftge@ff2+1
  2294  0555  3040               	movlw	64
  2295  0556  00F5               	movwf	___ftge@ff2+2
  2296  0557  3196  2649  3183   	fcall	___ftge
  2297  055A  1803               	btfsc	3,0
  2298  055B  2D5E               	goto	l2493
  2299                           
  2300                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2301  055C  30F7               	movlw	247
  2302  055D  2D5F               	goto	L3
  2303  055E                     l2493:	
  2304                           ;doprnt.c: 1131: }else{
  2305                           
  2306                           
  2307                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2308  055E  30F8               	movlw	248
  2309  055F                     L3:	
  2310  055F  0021               	movlb	1	; select bank1
  2311  0560  07BB               	addwf	sprintf@exp^(0+128),f
  2312  0561  30FF               	movlw	255
  2313  0562  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2314                           
  2315                           ;doprnt.c: 1133: }
  2316                           ;doprnt.c: 1134: integ = scale(exp);
  2317  0563  083B               	movf	sprintf@exp^(0+128),w
  2318  0564  3181  2141  3183   	fcall	_scale
  2319  0567  0020               	movlb	0	; select bank0
  2320  0568  0840               	movf	?_scale,w
  2321  0569  0021               	movlb	1	; select bank1
  2322  056A  00B8               	movwf	sprintf@integ^(0+128)
  2323  056B  0020               	movlb	0	; select bank0
  2324  056C  0841               	movf	?_scale+1,w
  2325  056D  0021               	movlb	1	; select bank1
  2326  056E  00B9               	movwf	(sprintf@integ+1)^(0+128)
  2327  056F  0020               	movlb	0	; select bank0
  2328  0570  0842               	movf	?_scale+2,w
  2329  0571  0021               	movlb	1	; select bank1
  2330  0572  00BA               	movwf	(sprintf@integ+2)^(0+128)
  2331                           
  2332                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2333  0573  083E               	movf	sprintf@fval^(0+128),w
  2334  0574  00F0               	movwf	__tdiv_to_l_@f1
  2335  0575  083F               	movf	(sprintf@fval+1)^(0+128),w
  2336  0576  00F1               	movwf	__tdiv_to_l_@f1+1
  2337  0577  0840               	movf	(sprintf@fval+2)^(0+128),w
  2338  0578  00F2               	movwf	__tdiv_to_l_@f1+2
  2339  0579  0838               	movf	sprintf@integ^(0+128),w
  2340  057A  00F3               	movwf	__tdiv_to_l_@f2
  2341  057B  0839               	movf	(sprintf@integ+1)^(0+128),w
  2342  057C  00F4               	movwf	__tdiv_to_l_@f2+1
  2343  057D  083A               	movf	(sprintf@integ+2)^(0+128),w
  2344  057E  00F5               	movwf	__tdiv_to_l_@f2+2
  2345  057F  318B  23EF  3183   	fcall	__tdiv_to_l_
  2346  0582  0873               	movf	?__tdiv_to_l_+3,w
  2347  0583  0021               	movlb	1	; select bank1
  2348  0584  00A6               	movwf	(_sprintf$375+3)^(0+128)
  2349  0585  0872               	movf	?__tdiv_to_l_+2,w
  2350  0586  00A5               	movwf	(_sprintf$375+2)^(0+128)
  2351  0587  0871               	movf	?__tdiv_to_l_+1,w
  2352  0588  00A4               	movwf	(_sprintf$375+1)^(0+128)
  2353  0589  0870               	movf	?__tdiv_to_l_,w
  2354  058A  00A3               	movwf	_sprintf$375^(0+128)
  2355  058B  0826               	movf	(_sprintf$375+3)^(0+128),w
  2356  058C  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2357  058D  0825               	movf	(_sprintf$375+2)^(0+128),w
  2358  058E  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2359  058F  0824               	movf	(_sprintf$375+1)^(0+128),w
  2360  0590  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2361  0591  0823               	movf	_sprintf$375^(0+128),w
  2362  0592  00B4               	movwf	sprintf@_val^(0+128)
  2363                           
  2364                           ;doprnt.c: 1138: fval = 0.0;
  2365  0593  3000               	movlw	0
  2366  0594  00BE               	movwf	sprintf@fval^(0+128)
  2367  0595  3000               	movlw	0
  2368  0596  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2369  0597  3000               	movlw	0
  2370  0598  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2371                           
  2372                           ;doprnt.c: 1139: } else {
  2373  0599  2DE8               	goto	l2509
  2374  059A                     l2505:	
  2375                           
  2376                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2377  059A  0021               	movlb	1	; select bank1
  2378  059B  083E               	movf	sprintf@fval^(0+128),w
  2379  059C  0020               	movlb	0	; select bank0
  2380  059D  00C9               	movwf	___fttol@f1
  2381  059E  0021               	movlb	1	; select bank1
  2382  059F  083F               	movf	(sprintf@fval+1)^(0+128),w
  2383  05A0  0020               	movlb	0	; select bank0
  2384  05A1  00CA               	movwf	___fttol@f1+1
  2385  05A2  0021               	movlb	1	; select bank1
  2386  05A3  0840               	movf	(sprintf@fval+2)^(0+128),w
  2387  05A4  0020               	movlb	0	; select bank0
  2388  05A5  00CB               	movwf	___fttol@f1+2
  2389  05A6  3188  2052  3183   	fcall	___fttol
  2390  05A9  0020               	movlb	0	; select bank0
  2391  05AA  084C               	movf	?___fttol+3,w
  2392  05AB  0021               	movlb	1	; select bank1
  2393  05AC  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2394  05AD  0020               	movlb	0	; select bank0
  2395  05AE  084B               	movf	?___fttol+2,w
  2396  05AF  0021               	movlb	1	; select bank1
  2397  05B0  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2398  05B1  0020               	movlb	0	; select bank0
  2399  05B2  084A               	movf	?___fttol+1,w
  2400  05B3  0021               	movlb	1	; select bank1
  2401  05B4  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2402  05B5  0020               	movlb	0	; select bank0
  2403  05B6  0849               	movf	?___fttol,w
  2404  05B7  0021               	movlb	1	; select bank1
  2405  05B8  00B4               	movwf	sprintf@_val^(0+128)
  2406                           
  2407                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2408  05B9  0837               	movf	(sprintf@_val+3)^(0+128),w
  2409  05BA  00FB               	movwf	___lltoft@c+3
  2410  05BB  0836               	movf	(sprintf@_val+2)^(0+128),w
  2411  05BC  00FA               	movwf	___lltoft@c+2
  2412  05BD  0835               	movf	(sprintf@_val+1)^(0+128),w
  2413  05BE  00F9               	movwf	___lltoft@c+1
  2414  05BF  0834               	movf	sprintf@_val^(0+128),w
  2415  05C0  00F8               	movwf	___lltoft@c
  2416  05C1  3195  25EC  3183   	fcall	___lltoft
  2417  05C4  0878               	movf	?___lltoft,w
  2418  05C5  0020               	movlb	0	; select bank0
  2419  05C6  00DB               	movwf	___ftsub@f2
  2420  05C7  0879               	movf	?___lltoft+1,w
  2421  05C8  00DC               	movwf	___ftsub@f2+1
  2422  05C9  087A               	movf	?___lltoft+2,w
  2423  05CA  00DD               	movwf	___ftsub@f2+2
  2424  05CB  0021               	movlb	1	; select bank1
  2425  05CC  083E               	movf	sprintf@fval^(0+128),w
  2426  05CD  0020               	movlb	0	; select bank0
  2427  05CE  00DE               	movwf	___ftsub@f1
  2428  05CF  0021               	movlb	1	; select bank1
  2429  05D0  083F               	movf	(sprintf@fval+1)^(0+128),w
  2430  05D1  0020               	movlb	0	; select bank0
  2431  05D2  00DF               	movwf	___ftsub@f1+1
  2432  05D3  0021               	movlb	1	; select bank1
  2433  05D4  0840               	movf	(sprintf@fval+2)^(0+128),w
  2434  05D5  0020               	movlb	0	; select bank0
  2435  05D6  00E0               	movwf	___ftsub@f1+2
  2436  05D7  3195  258E  3183   	fcall	___ftsub
  2437  05DA  0020               	movlb	0	; select bank0
  2438  05DB  085B               	movf	?___ftsub,w
  2439  05DC  0021               	movlb	1	; select bank1
  2440  05DD  00BE               	movwf	sprintf@fval^(0+128)
  2441  05DE  0020               	movlb	0	; select bank0
  2442  05DF  085C               	movf	?___ftsub+1,w
  2443  05E0  0021               	movlb	1	; select bank1
  2444  05E1  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2445  05E2  0020               	movlb	0	; select bank0
  2446  05E3  085D               	movf	?___ftsub+2,w
  2447  05E4  0021               	movlb	1	; select bank1
  2448  05E5  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2449                           
  2450                           ;doprnt.c: 1142: exp = 0;
  2451  05E6  01BB               	clrf	sprintf@exp^(0+128)
  2452  05E7  01BC               	clrf	(sprintf@exp+1)^(0+128)
  2453  05E8                     l2509:	
  2454                           
  2455                           ;doprnt.c: 1143: }
  2456                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2457  05E8  01C1               	clrf	sprintf@c^(0+128)
  2458  05E9  0AC1               	incf	sprintf@c^(0+128),f
  2459  05EA  0841               	movf	sprintf@c^(0+128),w
  2460  05EB  3A0A               	xorlw	10
  2461  05EC  1903               	btfsc	3,2
  2462  05ED  2E25               	goto	l2523
  2463  05EE                     l2515:	
  2464                           
  2465                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2466  05EE  0841               	movf	sprintf@c^(0+128),w
  2467  05EF  0020               	movlb	0	; select bank0
  2468  05F0  00E6               	movwf	??_sprintf
  2469  05F1  01E7               	clrf	??_sprintf+1
  2470  05F2  35E6               	lslf	??_sprintf,f
  2471  05F3  0DE7               	rlf	??_sprintf+1,f
  2472  05F4  35E6               	lslf	??_sprintf,f
  2473  05F5  0DE7               	rlf	??_sprintf+1,f
  2474  05F6  3000               	movlw	low (_dpowers| (0+32768))
  2475  05F7  0766               	addwf	??_sprintf,w
  2476  05F8  0084               	movwf	4
  2477  05F9  3090               	movlw	high (_dpowers| (0+32768))
  2478  05FA  3D67               	addwfc	??_sprintf+1,w
  2479  05FB  0085               	movwf	5
  2480  05FC  3F00               	moviw [0]fsr0
  2481  05FD  00E8               	movwf	??_sprintf+2
  2482  05FE  3F01               	moviw [1]fsr0
  2483  05FF  00E9               	movwf	??_sprintf+3
  2484  0600  3F02               	moviw [2]fsr0
  2485  0601  00EA               	movwf	??_sprintf+4
  2486  0602  3F03               	moviw [3]fsr0
  2487  0603  00EB               	movwf	??_sprintf+5
  2488  0604  086B               	movf	??_sprintf+5,w
  2489  0605  0021               	movlb	1	; select bank1
  2490  0606  0237               	subwf	(sprintf@_val+3)^(0+128),w
  2491  0607  1D03               	skipz
  2492  0608  2E19               	goto	u3475
  2493  0609  0020               	movlb	0	; select bank0
  2494  060A  086A               	movf	??_sprintf+4,w
  2495  060B  0021               	movlb	1	; select bank1
  2496  060C  0236               	subwf	(sprintf@_val+2)^(0+128),w
  2497  060D  1D03               	skipz
  2498  060E  2E19               	goto	u3475
  2499  060F  0020               	movlb	0	; select bank0
  2500  0610  0869               	movf	??_sprintf+3,w
  2501  0611  0021               	movlb	1	; select bank1
  2502  0612  0235               	subwf	(sprintf@_val+1)^(0+128),w
  2503  0613  1D03               	skipz
  2504  0614  2E19               	goto	u3475
  2505  0615  0020               	movlb	0	; select bank0
  2506  0616  0868               	movf	??_sprintf+2,w
  2507  0617  0021               	movlb	1	; select bank1
  2508  0618  0234               	subwf	sprintf@_val^(0+128),w
  2509  0619                     u3475:	
  2510  0619  1C03               	btfss	3,0
  2511  061A  2E25               	goto	l2523
  2512                           
  2513                           ;doprnt.c: 1147: break;
  2514  061B  3001               	movlw	1
  2515  061C  0020               	movlb	0	; select bank0
  2516  061D  00E6               	movwf	??_sprintf
  2517  061E  0866               	movf	??_sprintf,w
  2518  061F  0021               	movlb	1	; select bank1
  2519  0620  07C1               	addwf	sprintf@c^(0+128),f
  2520  0621  0841               	movf	sprintf@c^(0+128),w
  2521  0622  3A0A               	xorlw	10
  2522  0623  1D03               	skipz
  2523  0624  2DEE               	goto	l2515
  2524  0625                     l2523:	
  2525                           
  2526                           ;doprnt.c: 1184: {
  2527                           ;doprnt.c: 1197: if(flag & 0x03)
  2528  0625  3003               	movlw	3
  2529  0626  0530               	andwf	sprintf@flag^(0+128),w
  2530  0627  0020               	movlb	0	; select bank0
  2531  0628  00E6               	movwf	??_sprintf
  2532  0629  3000               	movlw	0
  2533  062A  0021               	movlb	1	; select bank1
  2534  062B  0531               	andwf	(sprintf@flag+1)^(0+128),w
  2535  062C  0020               	movlb	0	; select bank0
  2536  062D  00E7               	movwf	??_sprintf+1
  2537  062E  0867               	movf	??_sprintf+1,w
  2538  062F  0466               	iorwf	??_sprintf,w
  2539  0630  1903               	skipnz
  2540  0631  2E40               	goto	l2537
  2541                           
  2542                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  2543  0632  302D               	movlw	45
  2544  0633                     L7:	
  2545  0633  00E6               	movwf	??_sprintf
  2546  0634  0021               	movlb	1	; select bank1
  2547  0635  083D               	movf	sprintf@sp^(0+128),w
  2548  0636  0086               	movwf	6
  2549  0637  0187               	clrf	7
  2550  0638  0020               	movlb	0	; select bank0
  2551  0639  0866               	movf	??_sprintf,w
  2552  063A  0081               	movwf	1
  2553  063B  3001               	movlw	1
  2554  063C  00E6               	movwf	??_sprintf
  2555  063D  0866               	movf	??_sprintf,w
  2556  063E  0021               	movlb	1	; select bank1
  2557  063F  07BD               	addwf	sprintf@sp^(0+128),f
  2558  0640                     l2537:	
  2559  0640  30FF               	movlw	-1
  2560  0641  0020               	movlb	0	; select bank0
  2561  0642  00E6               	movwf	??_sprintf
  2562  0643  0866               	movf	??_sprintf,w
  2563  0644  0021               	movlb	1	; select bank1
  2564  0645  07C1               	addwf	sprintf@c^(0+128),f
  2565  0646  0841               	movf	sprintf@c^(0+128),w
  2566  0647  3AFF               	xorlw	255
  2567  0648  1903               	btfsc	3,2
  2568  0649  2EA8               	goto	l2545
  2569                           
  2570                           ;doprnt.c: 1209: {
  2571                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  2572                           
  2573                           ;doprnt.c: 1204: }
  2574                           ;doprnt.c: 1205: while(c--) {
  2575  064A  0841               	movf	sprintf@c^(0+128),w
  2576  064B  0020               	movlb	0	; select bank0
  2577  064C  00E6               	movwf	??_sprintf
  2578  064D  01E7               	clrf	??_sprintf+1
  2579  064E  35E6               	lslf	??_sprintf,f
  2580  064F  0DE7               	rlf	??_sprintf+1,f
  2581  0650  35E6               	lslf	??_sprintf,f
  2582  0651  0DE7               	rlf	??_sprintf+1,f
  2583  0652  3000               	movlw	low (_dpowers| (0+32768))
  2584  0653  0766               	addwf	??_sprintf,w
  2585  0654  0084               	movwf	4
  2586  0655  3090               	movlw	high (_dpowers| (0+32768))
  2587  0656  3D67               	addwfc	??_sprintf+1,w
  2588  0657  0085               	movwf	5
  2589  0658  3F00               	moviw [0]fsr0
  2590  0659  00F0               	movwf	___lldiv@divisor
  2591  065A  3F01               	moviw [1]fsr0
  2592  065B  00F1               	movwf	___lldiv@divisor+1
  2593  065C  3F02               	moviw [2]fsr0
  2594  065D  00F2               	movwf	___lldiv@divisor+2
  2595  065E  3F03               	moviw [3]fsr0
  2596  065F  00F3               	movwf	___lldiv@divisor+3
  2597  0660  0021               	movlb	1	; select bank1
  2598  0661  0837               	movf	(sprintf@_val+3)^(0+128),w
  2599  0662  00F7               	movwf	___lldiv@dividend+3
  2600  0663  0836               	movf	(sprintf@_val+2)^(0+128),w
  2601  0664  00F6               	movwf	___lldiv@dividend+2
  2602  0665  0835               	movf	(sprintf@_val+1)^(0+128),w
  2603  0666  00F5               	movwf	___lldiv@dividend+1
  2604  0667  0834               	movf	sprintf@_val^(0+128),w
  2605  0668  00F4               	movwf	___lldiv@dividend
  2606  0669  3188  2000  3183   	fcall	___lldiv
  2607  066C  0873               	movf	?___lldiv+3,w
  2608  066D  0021               	movlb	1	; select bank1
  2609  066E  00AB               	movwf	(sprintf@vd+3)^(0+128)
  2610  066F  0872               	movf	?___lldiv+2,w
  2611  0670  00AA               	movwf	(sprintf@vd+2)^(0+128)
  2612  0671  0871               	movf	?___lldiv+1,w
  2613  0672  00A9               	movwf	(sprintf@vd+1)^(0+128)
  2614  0673  0870               	movf	?___lldiv,w
  2615  0674  00A8               	movwf	sprintf@vd^(0+128)
  2616                           
  2617                           ;doprnt.c: 1211: vd %= 10;
  2618  0675  3000               	movlw	0
  2619  0676  00F3               	movwf	___llmod@divisor+3
  2620  0677  3000               	movlw	0
  2621  0678  00F2               	movwf	___llmod@divisor+2
  2622  0679  3000               	movlw	0
  2623  067A  00F1               	movwf	___llmod@divisor+1
  2624  067B  300A               	movlw	10
  2625  067C  00F0               	movwf	___llmod@divisor
  2626  067D  082B               	movf	(sprintf@vd+3)^(0+128),w
  2627  067E  00F7               	movwf	___llmod@dividend+3
  2628  067F  082A               	movf	(sprintf@vd+2)^(0+128),w
  2629  0680  00F6               	movwf	___llmod@dividend+2
  2630  0681  0829               	movf	(sprintf@vd+1)^(0+128),w
  2631  0682  00F5               	movwf	___llmod@dividend+1
  2632  0683  0828               	movf	sprintf@vd^(0+128),w
  2633  0684  00F4               	movwf	___llmod@dividend
  2634  0685  3196  26C3  3183   	fcall	___llmod
  2635  0688  0873               	movf	?___llmod+3,w
  2636  0689  0021               	movlb	1	; select bank1
  2637  068A  00AB               	movwf	(sprintf@vd+3)^(0+128)
  2638  068B  0872               	movf	?___llmod+2,w
  2639  068C  00AA               	movwf	(sprintf@vd+2)^(0+128)
  2640  068D  0871               	movf	?___llmod+1,w
  2641  068E  00A9               	movwf	(sprintf@vd+1)^(0+128)
  2642  068F  0870               	movf	?___llmod,w
  2643  0690  00A8               	movwf	sprintf@vd^(0+128)
  2644                           
  2645                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  2646  0691  0828               	movf	sprintf@vd^(0+128),w
  2647  0692  3E30               	addlw	48
  2648  0693  0020               	movlb	0	; select bank0
  2649  0694  2E33               	goto	L7
  2650  0695                     l2539:	
  2651                           ;doprnt.c: 1213: }
  2652                           ;doprnt.c: 1215: }
  2653                           ;doprnt.c: 1216: while(exp > 0) {
  2654                           
  2655                           
  2656                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  2657  0695  3030               	movlw	48
  2658  0696  0020               	movlb	0	; select bank0
  2659  0697  00E6               	movwf	??_sprintf
  2660  0698  0021               	movlb	1	; select bank1
  2661  0699  083D               	movf	sprintf@sp^(0+128),w
  2662  069A  0086               	movwf	6
  2663  069B  0187               	clrf	7
  2664  069C  0020               	movlb	0	; select bank0
  2665  069D  0866               	movf	??_sprintf,w
  2666  069E  0081               	movwf	1
  2667  069F  3001               	movlw	1
  2668  06A0  00E6               	movwf	??_sprintf
  2669  06A1  0866               	movf	??_sprintf,w
  2670  06A2  0021               	movlb	1	; select bank1
  2671  06A3  07BD               	addwf	sprintf@sp^(0+128),f
  2672                           
  2673                           ;doprnt.c: 1218: exp--;
  2674  06A4  30FF               	movlw	255
  2675  06A5  07BB               	addwf	sprintf@exp^(0+128),f
  2676  06A6  30FF               	movlw	255
  2677  06A7  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2678  06A8                     l2545:	
  2679  06A8  083C               	movf	(sprintf@exp+1)^(0+128),w
  2680  06A9  3A80               	xorlw	128
  2681  06AA  0020               	movlb	0	; select bank0
  2682  06AB  00E6               	movwf	??_sprintf
  2683  06AC  3080               	movlw	128
  2684  06AD  0266               	subwf	??_sprintf,w
  2685  06AE  1D03               	skipz
  2686  06AF  2EB3               	goto	u3515
  2687  06B0  3001               	movlw	1
  2688  06B1  0021               	movlb	1	; select bank1
  2689  06B2  023B               	subwf	sprintf@exp^(0+128),w
  2690  06B3                     u3515:	
  2691  06B3  1803               	skipnc
  2692  06B4  2E95               	goto	l2539
  2693                           
  2694                           ;doprnt.c: 1219: }
  2695                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2696  06B5  0021               	movlb	1	; select bank1
  2697  06B6  0833               	movf	(sprintf@prec+1)^(0+128),w
  2698  06B7  3A80               	xorlw	128
  2699  06B8  0020               	movlb	0	; select bank0
  2700  06B9  00E6               	movwf	??_sprintf
  2701  06BA  3080               	movlw	128
  2702  06BB  0266               	subwf	??_sprintf,w
  2703  06BC  1D03               	skipz
  2704  06BD  2EC1               	goto	u3525
  2705  06BE  3009               	movlw	9
  2706  06BF  0021               	movlb	1	; select bank1
  2707  06C0  0232               	subwf	sprintf@prec^(0+128),w
  2708  06C1                     u3525:	
  2709  06C1  1C03               	skipc
  2710  06C2  2EC5               	goto	l2551
  2711                           
  2712                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2713  06C3  3008               	movlw	8
  2714  06C4  2EC7               	goto	L4
  2715  06C5                     l2551:	
  2716                           
  2717                           ;doprnt.c: 1222: else
  2718                           ;doprnt.c: 1223: c = prec;
  2719  06C5  0021               	movlb	1	; select bank1
  2720  06C6  0832               	movf	sprintf@prec^(0+128),w
  2721  06C7                     L4:	
  2722  06C7  0020               	movlb	0	; select bank0
  2723  06C8  00E6               	movwf	??_sprintf
  2724  06C9  0866               	movf	??_sprintf,w
  2725  06CA  0021               	movlb	1	; select bank1
  2726  06CB  00C1               	movwf	sprintf@c^(0+128)
  2727                           
  2728                           ;doprnt.c: 1224: prec -= c;
  2729  06CC  0841               	movf	sprintf@c^(0+128),w
  2730  06CD  0020               	movlb	0	; select bank0
  2731  06CE  00E6               	movwf	??_sprintf
  2732  06CF  01E7               	clrf	??_sprintf+1
  2733  06D0  1BE6               	btfsc	??_sprintf,7
  2734  06D1  03E7               	decf	??_sprintf+1,f
  2735  06D2  0866               	movf	??_sprintf,w
  2736  06D3  0021               	movlb	1	; select bank1
  2737  06D4  02B2               	subwf	sprintf@prec^(0+128),f
  2738  06D5  0020               	movlb	0	; select bank0
  2739  06D6  0867               	movf	??_sprintf+1,w
  2740  06D7  0021               	movlb	1	; select bank1
  2741  06D8  3BB3               	subwfb	(sprintf@prec+1)^(0+128),f
  2742                           
  2743                           ;doprnt.c: 1228: if(c)
  2744  06D9  0841               	movf	sprintf@c^(0+128),w
  2745  06DA  1903               	btfsc	3,2
  2746  06DB  2EEB               	goto	l2557
  2747                           
  2748                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  2749  06DC  302E               	movlw	46
  2750  06DD  0020               	movlb	0	; select bank0
  2751  06DE  00E6               	movwf	??_sprintf
  2752  06DF  0021               	movlb	1	; select bank1
  2753  06E0  083D               	movf	sprintf@sp^(0+128),w
  2754  06E1  0086               	movwf	6
  2755  06E2  0187               	clrf	7
  2756  06E3  0020               	movlb	0	; select bank0
  2757  06E4  0866               	movf	??_sprintf,w
  2758  06E5  0081               	movwf	1
  2759  06E6  3001               	movlw	1
  2760  06E7  00E6               	movwf	??_sprintf
  2761  06E8  0866               	movf	??_sprintf,w
  2762  06E9  0021               	movlb	1	; select bank1
  2763  06EA  07BD               	addwf	sprintf@sp^(0+128),f
  2764  06EB                     l2557:	
  2765                           
  2766                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2767  06EB  0841               	movf	sprintf@c^(0+128),w
  2768  06EC  3181  2141  3183   	fcall	_scale
  2769  06EF  0020               	movlb	0	; select bank0
  2770  06F0  0840               	movf	?_scale,w
  2771  06F1  0021               	movlb	1	; select bank1
  2772  06F2  00A0               	movwf	_sprintf$792^(0+128)
  2773  06F3  0020               	movlb	0	; select bank0
  2774  06F4  0841               	movf	?_scale+1,w
  2775  06F5  0021               	movlb	1	; select bank1
  2776  06F6  00A1               	movwf	(_sprintf$792+1)^(0+128)
  2777  06F7  0020               	movlb	0	; select bank0
  2778  06F8  0842               	movf	?_scale+2,w
  2779  06F9  0021               	movlb	1	; select bank1
  2780  06FA  00A2               	movwf	(_sprintf$792+2)^(0+128)
  2781                           
  2782                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2783  06FB  0820               	movf	_sprintf$792^(0+128),w
  2784  06FC  0020               	movlb	0	; select bank0
  2785  06FD  00B3               	movwf	___ftmul@f2
  2786  06FE  0021               	movlb	1	; select bank1
  2787  06FF  0821               	movf	(_sprintf$792+1)^(0+128),w
  2788  0700  0020               	movlb	0	; select bank0
  2789  0701  00B4               	movwf	___ftmul@f2+1
  2790  0702  0021               	movlb	1	; select bank1
  2791  0703  0822               	movf	(_sprintf$792+2)^(0+128),w
  2792  0704  0020               	movlb	0	; select bank0
  2793  0705  00B5               	movwf	___ftmul@f2+2
  2794  0706  0021               	movlb	1	; select bank1
  2795  0707  083E               	movf	sprintf@fval^(0+128),w
  2796  0708  0020               	movlb	0	; select bank0
  2797  0709  00B0               	movwf	___ftmul@f1
  2798  070A  0021               	movlb	1	; select bank1
  2799  070B  083F               	movf	(sprintf@fval+1)^(0+128),w
  2800  070C  0020               	movlb	0	; select bank0
  2801  070D  00B1               	movwf	___ftmul@f1+1
  2802  070E  0021               	movlb	1	; select bank1
  2803  070F  0840               	movf	(sprintf@fval+2)^(0+128),w
  2804  0710  0020               	movlb	0	; select bank0
  2805  0711  00B2               	movwf	___ftmul@f1+2
  2806  0712  318B  233B  3183   	fcall	___ftmul
  2807  0715  0020               	movlb	0	; select bank0
  2808  0716  0830               	movf	?___ftmul,w
  2809  0717  00C9               	movwf	___fttol@f1
  2810  0718  0831               	movf	?___ftmul+1,w
  2811  0719  00CA               	movwf	___fttol@f1+1
  2812  071A  0832               	movf	?___ftmul+2,w
  2813  071B  00CB               	movwf	___fttol@f1+2
  2814  071C  3188  2052  3183   	fcall	___fttol
  2815  071F  0020               	movlb	0	; select bank0
  2816  0720  084C               	movf	?___fttol+3,w
  2817  0721  0021               	movlb	1	; select bank1
  2818  0722  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2819  0723  0020               	movlb	0	; select bank0
  2820  0724  084B               	movf	?___fttol+2,w
  2821  0725  0021               	movlb	1	; select bank1
  2822  0726  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2823  0727  0020               	movlb	0	; select bank0
  2824  0728  084A               	movf	?___fttol+1,w
  2825  0729  0021               	movlb	1	; select bank1
  2826  072A  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2827  072B  0020               	movlb	0	; select bank0
  2828  072C  0849               	movf	?___fttol,w
  2829  072D  0021               	movlb	1	; select bank1
  2830  072E                     L5:	
  2831  072E  00B4               	movwf	sprintf@_val^(0+128)
  2832  072F  30FF               	movlw	-1
  2833  0730  0020               	movlb	0	; select bank0
  2834  0731  00E6               	movwf	??_sprintf
  2835  0732  0866               	movf	??_sprintf,w
  2836  0733  0021               	movlb	1	; select bank1
  2837  0734  07C1               	addwf	sprintf@c^(0+128),f
  2838  0735  0841               	movf	sprintf@c^(0+128),w
  2839  0736  3AFF               	xorlw	255
  2840  0737  1903               	btfsc	3,2
  2841  0738  2FCE               	goto	l2579
  2842                           
  2843                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2844                           
  2845                           ;doprnt.c: 1237: while(c--) {
  2846  0739  0841               	movf	sprintf@c^(0+128),w
  2847  073A  0020               	movlb	0	; select bank0
  2848  073B  00E6               	movwf	??_sprintf
  2849  073C  01E7               	clrf	??_sprintf+1
  2850  073D  35E6               	lslf	??_sprintf,f
  2851  073E  0DE7               	rlf	??_sprintf+1,f
  2852  073F  35E6               	lslf	??_sprintf,f
  2853  0740  0DE7               	rlf	??_sprintf+1,f
  2854  0741  3000               	movlw	low (_dpowers| (0+32768))
  2855  0742  0766               	addwf	??_sprintf,w
  2856  0743  0084               	movwf	4
  2857  0744  3090               	movlw	high (_dpowers| (0+32768))
  2858  0745  3D67               	addwfc	??_sprintf+1,w
  2859  0746  0085               	movwf	5
  2860  0747  3F00               	moviw [0]fsr0
  2861  0748  00F0               	movwf	___lldiv@divisor
  2862  0749  3F01               	moviw [1]fsr0
  2863  074A  00F1               	movwf	___lldiv@divisor+1
  2864  074B  3F02               	moviw [2]fsr0
  2865  074C  00F2               	movwf	___lldiv@divisor+2
  2866  074D  3F03               	moviw [3]fsr0
  2867  074E  00F3               	movwf	___lldiv@divisor+3
  2868  074F  0021               	movlb	1	; select bank1
  2869  0750  0837               	movf	(sprintf@_val+3)^(0+128),w
  2870  0751  00F7               	movwf	___lldiv@dividend+3
  2871  0752  0836               	movf	(sprintf@_val+2)^(0+128),w
  2872  0753  00F6               	movwf	___lldiv@dividend+2
  2873  0754  0835               	movf	(sprintf@_val+1)^(0+128),w
  2874  0755  00F5               	movwf	___lldiv@dividend+1
  2875  0756  0834               	movf	sprintf@_val^(0+128),w
  2876  0757  00F4               	movwf	___lldiv@dividend
  2877  0758  3188  2000  3183   	fcall	___lldiv
  2878  075B  0873               	movf	?___lldiv+3,w
  2879  075C  0021               	movlb	1	; select bank1
  2880  075D  00AF               	movwf	(sprintf@vd_377+3)^(0+128)
  2881  075E  0872               	movf	?___lldiv+2,w
  2882  075F  00AE               	movwf	(sprintf@vd_377+2)^(0+128)
  2883  0760  0871               	movf	?___lldiv+1,w
  2884  0761  00AD               	movwf	(sprintf@vd_377+1)^(0+128)
  2885  0762  0870               	movf	?___lldiv,w
  2886  0763  00AC               	movwf	sprintf@vd_377^(0+128)
  2887                           
  2888                           ;doprnt.c: 1239: vd %= 10;
  2889  0764  3000               	movlw	0
  2890  0765  00F3               	movwf	___llmod@divisor+3
  2891  0766  3000               	movlw	0
  2892  0767  00F2               	movwf	___llmod@divisor+2
  2893  0768  3000               	movlw	0
  2894  0769  00F1               	movwf	___llmod@divisor+1
  2895  076A  300A               	movlw	10
  2896  076B  00F0               	movwf	___llmod@divisor
  2897  076C  082F               	movf	(sprintf@vd_377+3)^(0+128),w
  2898  076D  00F7               	movwf	___llmod@dividend+3
  2899  076E  082E               	movf	(sprintf@vd_377+2)^(0+128),w
  2900  076F  00F6               	movwf	___llmod@dividend+2
  2901  0770  082D               	movf	(sprintf@vd_377+1)^(0+128),w
  2902  0771  00F5               	movwf	___llmod@dividend+1
  2903  0772  082C               	movf	sprintf@vd_377^(0+128),w
  2904  0773  00F4               	movwf	___llmod@dividend
  2905  0774  3196  26C3  3183   	fcall	___llmod
  2906  0777  0873               	movf	?___llmod+3,w
  2907  0778  0021               	movlb	1	; select bank1
  2908  0779  00AF               	movwf	(sprintf@vd_377+3)^(0+128)
  2909  077A  0872               	movf	?___llmod+2,w
  2910  077B  00AE               	movwf	(sprintf@vd_377+2)^(0+128)
  2911  077C  0871               	movf	?___llmod+1,w
  2912  077D  00AD               	movwf	(sprintf@vd_377+1)^(0+128)
  2913  077E  0870               	movf	?___llmod,w
  2914  077F  00AC               	movwf	sprintf@vd_377^(0+128)
  2915                           
  2916                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  2917  0780  082C               	movf	sprintf@vd_377^(0+128),w
  2918  0781  3E30               	addlw	48
  2919  0782  0020               	movlb	0	; select bank0
  2920  0783  00E6               	movwf	??_sprintf
  2921  0784  0021               	movlb	1	; select bank1
  2922  0785  083D               	movf	sprintf@sp^(0+128),w
  2923  0786  0086               	movwf	6
  2924  0787  0187               	clrf	7
  2925  0788  0020               	movlb	0	; select bank0
  2926  0789  0866               	movf	??_sprintf,w
  2927  078A  0081               	movwf	1
  2928  078B  3001               	movlw	1
  2929  078C  00E6               	movwf	??_sprintf
  2930  078D  0866               	movf	??_sprintf,w
  2931  078E  0021               	movlb	1	; select bank1
  2932  078F  07BD               	addwf	sprintf@sp^(0+128),f
  2933                           
  2934                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2935  0790  0841               	movf	sprintf@c^(0+128),w
  2936  0791  0020               	movlb	0	; select bank0
  2937  0792  00E6               	movwf	??_sprintf
  2938  0793  01E7               	clrf	??_sprintf+1
  2939  0794  35E6               	lslf	??_sprintf,f
  2940  0795  0DE7               	rlf	??_sprintf+1,f
  2941  0796  35E6               	lslf	??_sprintf,f
  2942  0797  0DE7               	rlf	??_sprintf+1,f
  2943  0798  3000               	movlw	low (_dpowers| (0+32768))
  2944  0799  0766               	addwf	??_sprintf,w
  2945  079A  0084               	movwf	4
  2946  079B  3090               	movlw	high (_dpowers| (0+32768))
  2947  079C  3D67               	addwfc	??_sprintf+1,w
  2948  079D  0085               	movwf	5
  2949  079E  3F00               	moviw [0]fsr0
  2950  079F  00F0               	movwf	___llmod@divisor
  2951  07A0  3F01               	moviw [1]fsr0
  2952  07A1  00F1               	movwf	___llmod@divisor+1
  2953  07A2  3F02               	moviw [2]fsr0
  2954  07A3  00F2               	movwf	___llmod@divisor+2
  2955  07A4  3F03               	moviw [3]fsr0
  2956  07A5  00F3               	movwf	___llmod@divisor+3
  2957  07A6  0021               	movlb	1	; select bank1
  2958  07A7  0837               	movf	(sprintf@_val+3)^(0+128),w
  2959  07A8  00F7               	movwf	___llmod@dividend+3
  2960  07A9  0836               	movf	(sprintf@_val+2)^(0+128),w
  2961  07AA  00F6               	movwf	___llmod@dividend+2
  2962  07AB  0835               	movf	(sprintf@_val+1)^(0+128),w
  2963  07AC  00F5               	movwf	___llmod@dividend+1
  2964  07AD  0834               	movf	sprintf@_val^(0+128),w
  2965  07AE  00F4               	movwf	___llmod@dividend
  2966  07AF  3196  26C3  3183   	fcall	___llmod
  2967  07B2  0873               	movf	?___llmod+3,w
  2968  07B3  0021               	movlb	1	; select bank1
  2969  07B4  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2970  07B5  0872               	movf	?___llmod+2,w
  2971  07B6  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2972  07B7  0871               	movf	?___llmod+1,w
  2973  07B8  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2974  07B9  0870               	movf	?___llmod,w
  2975  07BA  2F2E               	goto	L5
  2976  07BB                     l2573:	
  2977                           ;doprnt.c: 1242: }
  2978                           ;doprnt.c: 1244: while(prec) {
  2979                           
  2980                           
  2981                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  2982  07BB  3030               	movlw	48
  2983  07BC  0020               	movlb	0	; select bank0
  2984  07BD  00E6               	movwf	??_sprintf
  2985  07BE  0021               	movlb	1	; select bank1
  2986  07BF  083D               	movf	sprintf@sp^(0+128),w
  2987  07C0  0086               	movwf	6
  2988  07C1  0187               	clrf	7
  2989  07C2  0020               	movlb	0	; select bank0
  2990  07C3  0866               	movf	??_sprintf,w
  2991  07C4  0081               	movwf	1
  2992  07C5  3001               	movlw	1
  2993  07C6  00E6               	movwf	??_sprintf
  2994  07C7  0866               	movf	??_sprintf,w
  2995  07C8  0021               	movlb	1	; select bank1
  2996  07C9  07BD               	addwf	sprintf@sp^(0+128),f
  2997                           
  2998                           ;doprnt.c: 1246: prec--;
  2999  07CA  30FF               	movlw	255
  3000  07CB  07B2               	addwf	sprintf@prec^(0+128),f
  3001  07CC  30FF               	movlw	255
  3002  07CD  3DB3               	addwfc	(sprintf@prec+1)^(0+128),f
  3003  07CE                     l2579:	
  3004  07CE  0833               	movf	(sprintf@prec+1)^(0+128),w
  3005  07CF  0432               	iorwf	sprintf@prec^(0+128),w
  3006  07D0  1903               	btfsc	3,2
  3007  07D1  2B99               	goto	l2587
  3008  07D2  2FBB               	goto	l2573
  3009  07D3                     l2581:	
  3010                           ;doprnt.c: 1247: }
  3011                           ;doprnt.c: 1254: continue;
  3012                           
  3013                           
  3014                           ;doprnt.c: 1255: }
  3015                           ;doprnt.c: 1431: {
  3016                           ;doprnt.c: 1447: if(flag & 0x03)
  3017  07D3  3003               	movlw	3
  3018  07D4  0021               	movlb	1	; select bank1
  3019  07D5  0530               	andwf	sprintf@flag^(0+128),w
  3020  07D6  0020               	movlb	0	; select bank0
  3021  07D7  00E6               	movwf	??_sprintf
  3022  07D8  3000               	movlw	0
  3023  07D9  0021               	movlb	1	; select bank1
  3024  07DA  0531               	andwf	(sprintf@flag+1)^(0+128),w
  3025  07DB  0020               	movlb	0	; select bank0
  3026  07DC  00E7               	movwf	??_sprintf+1
  3027  07DD  0867               	movf	??_sprintf+1,w
  3028  07DE  0466               	iorwf	??_sprintf,w
  3029  07DF  1903               	skipnz
  3030  07E0  2B99               	goto	l2587
  3031                           
  3032                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  3033  07E1  302D               	movlw	45
  3034  07E2                     L6:	
  3035  07E2  00E6               	movwf	??_sprintf
  3036  07E3  0021               	movlb	1	; select bank1
  3037  07E4  083D               	movf	sprintf@sp^(0+128),w
  3038  07E5  0086               	movwf	6
  3039  07E6  0187               	clrf	7
  3040  07E7  0020               	movlb	0	; select bank0
  3041  07E8  0866               	movf	??_sprintf,w
  3042  07E9  0081               	movwf	1
  3043  07EA  3001               	movlw	1
  3044  07EB  00E6               	movwf	??_sprintf
  3045  07EC  0866               	movf	??_sprintf,w
  3046  07ED  0021               	movlb	1	; select bank1
  3047  07EE  07BD               	addwf	sprintf@sp^(0+128),f
  3048  07EF  2B99               	goto	l2587
  3049  07F0                     l2589:	
  3050                           ;doprnt.c: 1478: }
  3051                           ;doprnt.c: 1542: }
  3052                           ;doprnt.c: 1544: alldone:
  3053                           
  3054                           
  3055                           ;doprnt.c: 1547: *sp = 0;
  3056  07F0  083D               	movf	sprintf@sp^(0+128),w
  3057  07F1  0086               	movwf	6
  3058  07F2  0187               	clrf	7
  3059  07F3  0181               	clrf	1
  3060  07F4  0008               	return
  3061  07F5                     __end_of_sprintf:	
  3062                           ;doprnt.c: 1549: return 0;
  3063                           ;	Return value of _sprintf is never used
  3064                           
  3065                           
  3066                           	psect	text5
  3067  0141                     __ptext5:	
  3068 ;; *************** function _scale *****************
  3069 ;; Defined at:
  3070 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  scl             1    wreg     char 
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  scl             1   40[BANK0 ] char 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  3   32[BANK0 ] char 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3084 ;;      Params:         0       3       0       0       0       0       0       0
  3085 ;;      Locals:         0       4       0       0       0       0       0       0
  3086 ;;      Temps:          0       2       0       0       0       0       0       0
  3087 ;;      Totals:         0       9       0       0       0       0       0       0
  3088 ;;Total ram usage:        9 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    2
  3091 ;; This function calls:
  3092 ;;		___awdiv
  3093 ;;		___awmod
  3094 ;;		___ftmul
  3095 ;;		___wmul
  3096 ;; This function is called by:
  3097 ;;		_sprintf
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           
  3102                           ;psect for function _scale
  3103  0141                     _scale:	
  3104                           
  3105                           ;incstack = 0
  3106                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3107                           ;scale@scl stored from wreg
  3108  0141  0020               	movlb	0	; select bank0
  3109  0142  00C8               	movwf	scale@scl
  3110                           
  3111                           ;doprnt.c: 428: if(scl < 0) {
  3112  0143  1FC8               	btfss	scale@scl,7
  3113  0144  2A6C               	goto	l2063
  3114                           
  3115                           ;doprnt.c: 429: scl = -scl;
  3116  0145  09C8               	comf	scale@scl,f
  3117  0146  0AC8               	incf	scale@scl,f
  3118                           
  3119                           ;doprnt.c: 430: if(scl>=110)
  3120  0147  0848               	movf	scale@scl,w
  3121  0148  3A80               	xorlw	128
  3122  0149  3E12               	addlw	-238
  3123  014A  1C03               	skipc
  3124  014B  29EE               	goto	l2053
  3125                           
  3126                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3127  014C  300A               	movlw	10
  3128  014D  00F7               	movwf	___awdiv@divisor
  3129  014E  3000               	movlw	0
  3130  014F  00F8               	movwf	___awdiv@divisor+1
  3131  0150  0848               	movf	scale@scl,w
  3132  0151  00F2               	movwf	___awmod@dividend
  3133  0152  01F3               	clrf	___awmod@dividend+1
  3134  0153  1BF2               	btfsc	___awmod@dividend,7
  3135  0154  03F3               	decf	___awmod@dividend+1,f
  3136  0155  3064               	movlw	100
  3137  0156  00F0               	movwf	___awmod@divisor
  3138  0157  3000               	movlw	0
  3139  0158  00F1               	movwf	___awmod@divisor+1
  3140  0159  3197  2705  3181   	fcall	___awmod
  3141  015C  0871               	movf	?___awmod+1,w
  3142  015D  01FA               	clrf	___awdiv@dividend+1
  3143  015E  07FA               	addwf	___awdiv@dividend+1,f
  3144  015F  0870               	movf	?___awmod,w
  3145  0160  01F9               	clrf	___awdiv@dividend
  3146  0161  07F9               	addwf	___awdiv@dividend,f
  3147  0162  3197  274C  3181   	fcall	___awdiv
  3148  0165  0877               	movf	?___awdiv,w
  3149  0166  3E09               	addlw	9
  3150  0167  0020               	movlb	0	; select bank0
  3151  0168  00A4               	movwf	___wmul@multiplier
  3152  0169  3000               	movlw	0
  3153  016A  3D78               	addwfc	?___awdiv+1,w
  3154  016B  00A5               	movwf	___wmul@multiplier+1
  3155  016C  3003               	movlw	3
  3156  016D  00A6               	movwf	___wmul@multiplicand
  3157  016E  3000               	movlw	0
  3158  016F  00A7               	movwf	___wmul@multiplicand+1
  3159  0170  3195  25A7  3181   	fcall	___wmul
  3160  0173  0020               	movlb	0	; select bank0
  3161  0174  0825               	movf	?___wmul+1,w
  3162  0175  0085               	movwf	5
  3163  0176  0824               	movf	?___wmul,w
  3164  0177  0084               	movwf	4
  3165  0178  3028               	movlw	low (__npowers_| (0+32768))
  3166  0179  0784               	addwf	4,f
  3167  017A  3090               	movlw	high (__npowers_| (0+32768))
  3168  017B  3D85               	addwfc	5,f
  3169  017C  3F00               	moviw [0]fsr0
  3170  017D  00B0               	movwf	___ftmul@f1
  3171  017E  3F01               	moviw [1]fsr0
  3172  017F  00B1               	movwf	___ftmul@f1+1
  3173  0180  3F02               	moviw [2]fsr0
  3174  0181  00B2               	movwf	___ftmul@f1+2
  3175  0182  3064               	movlw	100
  3176  0183  00F7               	movwf	___awdiv@divisor
  3177  0184  3000               	movlw	0
  3178  0185  00F8               	movwf	___awdiv@divisor+1
  3179  0186  0848               	movf	scale@scl,w
  3180  0187  00F9               	movwf	___awdiv@dividend
  3181  0188  01FA               	clrf	___awdiv@dividend+1
  3182  0189  1BF9               	btfsc	___awdiv@dividend,7
  3183  018A  03FA               	decf	___awdiv@dividend+1,f
  3184  018B  3197  274C  3181   	fcall	___awdiv
  3185  018E  0877               	movf	?___awdiv,w
  3186  018F  3E12               	addlw	18
  3187  0190  0020               	movlb	0	; select bank0
  3188  0191  00A4               	movwf	___wmul@multiplier
  3189  0192  3000               	movlw	0
  3190  0193  3D78               	addwfc	?___awdiv+1,w
  3191  0194  00A5               	movwf	___wmul@multiplier+1
  3192  0195  3003               	movlw	3
  3193  0196  00A6               	movwf	___wmul@multiplicand
  3194  0197  3000               	movlw	0
  3195  0198  00A7               	movwf	___wmul@multiplicand+1
  3196  0199  3195  25A7  3181   	fcall	___wmul
  3197  019C  0020               	movlb	0	; select bank0
  3198  019D  0825               	movf	?___wmul+1,w
  3199  019E  0085               	movwf	5
  3200  019F  0824               	movf	?___wmul,w
  3201  01A0  0084               	movwf	4
  3202  01A1  3028               	movlw	low (__npowers_| (0+32768))
  3203  01A2  0784               	addwf	4,f
  3204  01A3  3090               	movlw	high (__npowers_| (0+32768))
  3205  01A4  3D85               	addwfc	5,f
  3206  01A5  3F00               	moviw [0]fsr0
  3207  01A6  00B3               	movwf	___ftmul@f2
  3208  01A7  3F01               	moviw [1]fsr0
  3209  01A8  00B4               	movwf	___ftmul@f2+1
  3210  01A9  3F02               	moviw [2]fsr0
  3211  01AA  00B5               	movwf	___ftmul@f2+2
  3212  01AB  318B  233B  3181   	fcall	___ftmul
  3213  01AE  0020               	movlb	0	; select bank0
  3214  01AF  0830               	movf	?___ftmul,w
  3215  01B0  00C5               	movwf	_scale$791
  3216  01B1  0831               	movf	?___ftmul+1,w
  3217  01B2  00C6               	movwf	_scale$791+1
  3218  01B3  0832               	movf	?___ftmul+2,w
  3219  01B4  00C7               	movwf	_scale$791+2
  3220                           
  3221                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3222  01B5  0848               	movf	scale@scl,w
  3223  01B6  00F2               	movwf	___awmod@dividend
  3224  01B7  01F3               	clrf	___awmod@dividend+1
  3225  01B8  1BF2               	btfsc	___awmod@dividend,7
  3226  01B9  03F3               	decf	___awmod@dividend+1,f
  3227  01BA  300A               	movlw	10
  3228  01BB  00F0               	movwf	___awmod@divisor
  3229  01BC  3000               	movlw	0
  3230  01BD  00F1               	movwf	___awmod@divisor+1
  3231  01BE  3197  2705  3181   	fcall	___awmod
  3232  01C1  0871               	movf	?___awmod+1,w
  3233  01C2  0020               	movlb	0	; select bank0
  3234  01C3  01A5               	clrf	___wmul@multiplier+1
  3235  01C4  07A5               	addwf	___wmul@multiplier+1,f
  3236  01C5  0870               	movf	?___awmod,w
  3237  01C6  01A4               	clrf	___wmul@multiplier
  3238  01C7  07A4               	addwf	___wmul@multiplier,f
  3239  01C8  3003               	movlw	3
  3240  01C9  00A6               	movwf	___wmul@multiplicand
  3241  01CA  3000               	movlw	0
  3242  01CB  00A7               	movwf	___wmul@multiplicand+1
  3243  01CC  3195  25A7  3181   	fcall	___wmul
  3244  01CF  0020               	movlb	0	; select bank0
  3245  01D0  0825               	movf	?___wmul+1,w
  3246  01D1  0085               	movwf	5
  3247  01D2  0824               	movf	?___wmul,w
  3248  01D3  0084               	movwf	4
  3249  01D4  3028               	movlw	low (__npowers_| (0+32768))
  3250  01D5  0784               	addwf	4,f
  3251  01D6  3090               	movlw	high (__npowers_| (0+32768))
  3252  01D7  3D85               	addwfc	5,f
  3253  01D8  3F00               	moviw [0]fsr0
  3254  01D9  00B0               	movwf	___ftmul@f1
  3255  01DA  3F01               	moviw [1]fsr0
  3256  01DB  00B1               	movwf	___ftmul@f1+1
  3257  01DC  3F02               	moviw [2]fsr0
  3258  01DD  00B2               	movwf	___ftmul@f1+2
  3259  01DE  0845               	movf	_scale$791,w
  3260  01DF  00B3               	movwf	___ftmul@f2
  3261  01E0  0846               	movf	_scale$791+1,w
  3262  01E1  00B4               	movwf	___ftmul@f2+1
  3263  01E2  0847               	movf	_scale$791+2,w
  3264  01E3  00B5               	movwf	___ftmul@f2+2
  3265  01E4  318B  233B         	fcall	___ftmul
  3266  01E6  0020               	movlb	0	; select bank0
  3267  01E7  0830               	movf	?___ftmul,w
  3268  01E8  00C0               	movwf	?_scale
  3269  01E9  0831               	movf	?___ftmul+1,w
  3270  01EA  00C1               	movwf	?_scale+1
  3271  01EB  0832               	movf	?___ftmul+2,w
  3272  01EC  00C2               	movwf	?_scale+2
  3273  01ED  0008               	return
  3274  01EE                     l2053:	
  3275                           
  3276                           ;doprnt.c: 432: else if(scl > 10)
  3277  01EE  0848               	movf	scale@scl,w
  3278  01EF  3A80               	xorlw	128
  3279  01F0  3E75               	addlw	-139
  3280  01F1  1C03               	skipc
  3281  01F2  2A4F               	goto	l2059
  3282                           
  3283                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3284  01F3  0848               	movf	scale@scl,w
  3285  01F4  00F2               	movwf	___awmod@dividend
  3286  01F5  01F3               	clrf	___awmod@dividend+1
  3287  01F6  1BF2               	btfsc	___awmod@dividend,7
  3288  01F7  03F3               	decf	___awmod@dividend+1,f
  3289  01F8  300A               	movlw	10
  3290  01F9  00F0               	movwf	___awmod@divisor
  3291  01FA  3000               	movlw	0
  3292  01FB  00F1               	movwf	___awmod@divisor+1
  3293  01FC  3197  2705  3181   	fcall	___awmod
  3294  01FF  0871               	movf	?___awmod+1,w
  3295  0200  0020               	movlb	0	; select bank0
  3296  0201  01A5               	clrf	___wmul@multiplier+1
  3297  0202  07A5               	addwf	___wmul@multiplier+1,f
  3298  0203  0870               	movf	?___awmod,w
  3299  0204  01A4               	clrf	___wmul@multiplier
  3300  0205  07A4               	addwf	___wmul@multiplier,f
  3301  0206  3003               	movlw	3
  3302  0207  00A6               	movwf	___wmul@multiplicand
  3303  0208  3000               	movlw	0
  3304  0209  00A7               	movwf	___wmul@multiplicand+1
  3305  020A  3195  25A7  3181   	fcall	___wmul
  3306  020D  0020               	movlb	0	; select bank0
  3307  020E  0825               	movf	?___wmul+1,w
  3308  020F  0085               	movwf	5
  3309  0210  0824               	movf	?___wmul,w
  3310  0211  0084               	movwf	4
  3311  0212  3028               	movlw	low (__npowers_| (0+32768))
  3312  0213  0784               	addwf	4,f
  3313  0214  3090               	movlw	high (__npowers_| (0+32768))
  3314  0215  3D85               	addwfc	5,f
  3315  0216  3F00               	moviw [0]fsr0
  3316  0217  00B0               	movwf	___ftmul@f1
  3317  0218  3F01               	moviw [1]fsr0
  3318  0219  00B1               	movwf	___ftmul@f1+1
  3319  021A  3F02               	moviw [2]fsr0
  3320  021B  00B2               	movwf	___ftmul@f1+2
  3321  021C  300A               	movlw	10
  3322  021D  00F7               	movwf	___awdiv@divisor
  3323  021E  3000               	movlw	0
  3324  021F  00F8               	movwf	___awdiv@divisor+1
  3325  0220  0848               	movf	scale@scl,w
  3326  0221  00F9               	movwf	___awdiv@dividend
  3327  0222  01FA               	clrf	___awdiv@dividend+1
  3328  0223  1BF9               	btfsc	___awdiv@dividend,7
  3329  0224  03FA               	decf	___awdiv@dividend+1,f
  3330  0225  3197  274C  3181   	fcall	___awdiv
  3331  0228  0877               	movf	?___awdiv,w
  3332  0229  3E09               	addlw	9
  3333  022A  0020               	movlb	0	; select bank0
  3334  022B  00A4               	movwf	___wmul@multiplier
  3335  022C  3000               	movlw	0
  3336  022D  3D78               	addwfc	?___awdiv+1,w
  3337  022E  00A5               	movwf	___wmul@multiplier+1
  3338  022F  3003               	movlw	3
  3339  0230  00A6               	movwf	___wmul@multiplicand
  3340  0231  3000               	movlw	0
  3341  0232  00A7               	movwf	___wmul@multiplicand+1
  3342  0233  3195  25A7  3181   	fcall	___wmul
  3343  0236  0020               	movlb	0	; select bank0
  3344  0237  0825               	movf	?___wmul+1,w
  3345  0238  0085               	movwf	5
  3346  0239  0824               	movf	?___wmul,w
  3347  023A  0084               	movwf	4
  3348  023B  3028               	movlw	low (__npowers_| (0+32768))
  3349  023C  0784               	addwf	4,f
  3350  023D  3090               	movlw	high (__npowers_| (0+32768))
  3351  023E  3D85               	addwfc	5,f
  3352  023F  3F00               	moviw [0]fsr0
  3353  0240  00B3               	movwf	___ftmul@f2
  3354  0241  3F01               	moviw [1]fsr0
  3355  0242  00B4               	movwf	___ftmul@f2+1
  3356  0243  3F02               	moviw [2]fsr0
  3357  0244  00B5               	movwf	___ftmul@f2+2
  3358  0245  318B  233B         	fcall	___ftmul
  3359  0247  0020               	movlb	0	; select bank0
  3360  0248  0830               	movf	?___ftmul,w
  3361  0249  00C0               	movwf	?_scale
  3362  024A  0831               	movf	?___ftmul+1,w
  3363  024B  00C1               	movwf	?_scale+1
  3364  024C  0832               	movf	?___ftmul+2,w
  3365  024D  00C2               	movwf	?_scale+2
  3366  024E  0008               	return
  3367  024F                     l2059:	
  3368                           
  3369                           ;doprnt.c: 434: return _npowers_[scl];
  3370  024F  0848               	movf	scale@scl,w
  3371  0250  00C3               	movwf	??_scale
  3372  0251  01C4               	clrf	??_scale+1
  3373  0252  0843               	movf	??_scale,w
  3374  0253  00A4               	movwf	___wmul@multiplier
  3375  0254  0844               	movf	??_scale+1,w
  3376  0255  00A5               	movwf	___wmul@multiplier+1
  3377  0256  3003               	movlw	3
  3378  0257  00A6               	movwf	___wmul@multiplicand
  3379  0258  3000               	movlw	0
  3380  0259  00A7               	movwf	___wmul@multiplicand+1
  3381  025A  3195  25A7         	fcall	___wmul
  3382  025C  0020               	movlb	0	; select bank0
  3383  025D  0825               	movf	?___wmul+1,w
  3384  025E  0085               	movwf	5
  3385  025F  0824               	movf	?___wmul,w
  3386  0260  0084               	movwf	4
  3387  0261  3028               	movlw	low (__npowers_| (0+32768))
  3388  0262  0784               	addwf	4,f
  3389  0263  3090               	movlw	high (__npowers_| (0+32768))
  3390  0264  3D85               	addwfc	5,f
  3391  0265  3F00               	moviw [0]fsr0
  3392  0266  00C0               	movwf	?_scale
  3393  0267  3F01               	moviw [1]fsr0
  3394  0268  00C1               	movwf	?_scale+1
  3395  0269  3F02               	moviw [2]fsr0
  3396  026A  00C2               	movwf	?_scale+2
  3397  026B  0008               	return
  3398  026C                     l2063:	
  3399                           
  3400                           ;doprnt.c: 435: }
  3401                           ;doprnt.c: 436: if(scl>=110)
  3402  026C  0848               	movf	scale@scl,w
  3403  026D  3A80               	xorlw	128
  3404  026E  3E12               	addlw	-238
  3405  026F  1C03               	skipc
  3406  0270  2B13               	goto	l2071
  3407                           
  3408                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3409  0271  300A               	movlw	10
  3410  0272  00F7               	movwf	___awdiv@divisor
  3411  0273  3000               	movlw	0
  3412  0274  00F8               	movwf	___awdiv@divisor+1
  3413  0275  0848               	movf	scale@scl,w
  3414  0276  00F2               	movwf	___awmod@dividend
  3415  0277  01F3               	clrf	___awmod@dividend+1
  3416  0278  1BF2               	btfsc	___awmod@dividend,7
  3417  0279  03F3               	decf	___awmod@dividend+1,f
  3418  027A  3064               	movlw	100
  3419  027B  00F0               	movwf	___awmod@divisor
  3420  027C  3000               	movlw	0
  3421  027D  00F1               	movwf	___awmod@divisor+1
  3422  027E  3197  2705  3181   	fcall	___awmod
  3423  0281  0871               	movf	?___awmod+1,w
  3424  0282  01FA               	clrf	___awdiv@dividend+1
  3425  0283  07FA               	addwf	___awdiv@dividend+1,f
  3426  0284  0870               	movf	?___awmod,w
  3427  0285  01F9               	clrf	___awdiv@dividend
  3428  0286  07F9               	addwf	___awdiv@dividend,f
  3429  0287  3197  274C  3181   	fcall	___awdiv
  3430  028A  0877               	movf	?___awdiv,w
  3431  028B  3E09               	addlw	9
  3432  028C  0020               	movlb	0	; select bank0
  3433  028D  00A4               	movwf	___wmul@multiplier
  3434  028E  3000               	movlw	0
  3435  028F  3D78               	addwfc	?___awdiv+1,w
  3436  0290  00A5               	movwf	___wmul@multiplier+1
  3437  0291  3003               	movlw	3
  3438  0292  00A6               	movwf	___wmul@multiplicand
  3439  0293  3000               	movlw	0
  3440  0294  00A7               	movwf	___wmul@multiplicand+1
  3441  0295  3195  25A7  3181   	fcall	___wmul
  3442  0298  0020               	movlb	0	; select bank0
  3443  0299  0825               	movf	?___wmul+1,w
  3444  029A  0085               	movwf	5
  3445  029B  0824               	movf	?___wmul,w
  3446  029C  0084               	movwf	4
  3447  029D  304F               	movlw	low (__powers_| (0+32768))
  3448  029E  0784               	addwf	4,f
  3449  029F  3090               	movlw	high (__powers_| (0+32768))
  3450  02A0  3D85               	addwfc	5,f
  3451  02A1  3F00               	moviw [0]fsr0
  3452  02A2  00B0               	movwf	___ftmul@f1
  3453  02A3  3F01               	moviw [1]fsr0
  3454  02A4  00B1               	movwf	___ftmul@f1+1
  3455  02A5  3F02               	moviw [2]fsr0
  3456  02A6  00B2               	movwf	___ftmul@f1+2
  3457  02A7  3064               	movlw	100
  3458  02A8  00F7               	movwf	___awdiv@divisor
  3459  02A9  3000               	movlw	0
  3460  02AA  00F8               	movwf	___awdiv@divisor+1
  3461  02AB  0848               	movf	scale@scl,w
  3462  02AC  00F9               	movwf	___awdiv@dividend
  3463  02AD  01FA               	clrf	___awdiv@dividend+1
  3464  02AE  1BF9               	btfsc	___awdiv@dividend,7
  3465  02AF  03FA               	decf	___awdiv@dividend+1,f
  3466  02B0  3197  274C  3181   	fcall	___awdiv
  3467  02B3  0877               	movf	?___awdiv,w
  3468  02B4  3E12               	addlw	18
  3469  02B5  0020               	movlb	0	; select bank0
  3470  02B6  00A4               	movwf	___wmul@multiplier
  3471  02B7  3000               	movlw	0
  3472  02B8  3D78               	addwfc	?___awdiv+1,w
  3473  02B9  00A5               	movwf	___wmul@multiplier+1
  3474  02BA  3003               	movlw	3
  3475  02BB  00A6               	movwf	___wmul@multiplicand
  3476  02BC  3000               	movlw	0
  3477  02BD  00A7               	movwf	___wmul@multiplicand+1
  3478  02BE  3195  25A7  3181   	fcall	___wmul
  3479  02C1  0020               	movlb	0	; select bank0
  3480  02C2  0825               	movf	?___wmul+1,w
  3481  02C3  0085               	movwf	5
  3482  02C4  0824               	movf	?___wmul,w
  3483  02C5  0084               	movwf	4
  3484  02C6  304F               	movlw	low (__powers_| (0+32768))
  3485  02C7  0784               	addwf	4,f
  3486  02C8  3090               	movlw	high (__powers_| (0+32768))
  3487  02C9  3D85               	addwfc	5,f
  3488  02CA  3F00               	moviw [0]fsr0
  3489  02CB  00B3               	movwf	___ftmul@f2
  3490  02CC  3F01               	moviw [1]fsr0
  3491  02CD  00B4               	movwf	___ftmul@f2+1
  3492  02CE  3F02               	moviw [2]fsr0
  3493  02CF  00B5               	movwf	___ftmul@f2+2
  3494  02D0  318B  233B  3181   	fcall	___ftmul
  3495  02D3  0020               	movlb	0	; select bank0
  3496  02D4  0830               	movf	?___ftmul,w
  3497  02D5  00C5               	movwf	_scale$791
  3498  02D6  0831               	movf	?___ftmul+1,w
  3499  02D7  00C6               	movwf	_scale$791+1
  3500  02D8  0832               	movf	?___ftmul+2,w
  3501  02D9  00C7               	movwf	_scale$791+2
  3502                           
  3503                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3504  02DA  0848               	movf	scale@scl,w
  3505  02DB  00F2               	movwf	___awmod@dividend
  3506  02DC  01F3               	clrf	___awmod@dividend+1
  3507  02DD  1BF2               	btfsc	___awmod@dividend,7
  3508  02DE  03F3               	decf	___awmod@dividend+1,f
  3509  02DF  300A               	movlw	10
  3510  02E0  00F0               	movwf	___awmod@divisor
  3511  02E1  3000               	movlw	0
  3512  02E2  00F1               	movwf	___awmod@divisor+1
  3513  02E3  3197  2705  3181   	fcall	___awmod
  3514  02E6  0871               	movf	?___awmod+1,w
  3515  02E7  0020               	movlb	0	; select bank0
  3516  02E8  01A5               	clrf	___wmul@multiplier+1
  3517  02E9  07A5               	addwf	___wmul@multiplier+1,f
  3518  02EA  0870               	movf	?___awmod,w
  3519  02EB  01A4               	clrf	___wmul@multiplier
  3520  02EC  07A4               	addwf	___wmul@multiplier,f
  3521  02ED  3003               	movlw	3
  3522  02EE  00A6               	movwf	___wmul@multiplicand
  3523  02EF  3000               	movlw	0
  3524  02F0  00A7               	movwf	___wmul@multiplicand+1
  3525  02F1  3195  25A7  3181   	fcall	___wmul
  3526  02F4  0020               	movlb	0	; select bank0
  3527  02F5  0825               	movf	?___wmul+1,w
  3528  02F6  0085               	movwf	5
  3529  02F7  0824               	movf	?___wmul,w
  3530  02F8  0084               	movwf	4
  3531  02F9  304F               	movlw	low (__powers_| (0+32768))
  3532  02FA  0784               	addwf	4,f
  3533  02FB  3090               	movlw	high (__powers_| (0+32768))
  3534  02FC  3D85               	addwfc	5,f
  3535  02FD  3F00               	moviw [0]fsr0
  3536  02FE  00B0               	movwf	___ftmul@f1
  3537  02FF  3F01               	moviw [1]fsr0
  3538  0300  00B1               	movwf	___ftmul@f1+1
  3539  0301  3F02               	moviw [2]fsr0
  3540  0302  00B2               	movwf	___ftmul@f1+2
  3541  0303  0845               	movf	_scale$791,w
  3542  0304  00B3               	movwf	___ftmul@f2
  3543  0305  0846               	movf	_scale$791+1,w
  3544  0306  00B4               	movwf	___ftmul@f2+1
  3545  0307  0847               	movf	_scale$791+2,w
  3546  0308  00B5               	movwf	___ftmul@f2+2
  3547  0309  318B  233B         	fcall	___ftmul
  3548  030B  0020               	movlb	0	; select bank0
  3549  030C  0830               	movf	?___ftmul,w
  3550  030D  00C0               	movwf	?_scale
  3551  030E  0831               	movf	?___ftmul+1,w
  3552  030F  00C1               	movwf	?_scale+1
  3553  0310  0832               	movf	?___ftmul+2,w
  3554  0311  00C2               	movwf	?_scale+2
  3555  0312  0008               	return
  3556  0313                     l2071:	
  3557                           
  3558                           ;doprnt.c: 438: else if(scl > 10)
  3559  0313  0848               	movf	scale@scl,w
  3560  0314  3A80               	xorlw	128
  3561  0315  3E75               	addlw	-139
  3562  0316  1C03               	skipc
  3563  0317  2B74               	goto	l2077
  3564                           
  3565                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3566  0318  0848               	movf	scale@scl,w
  3567  0319  00F2               	movwf	___awmod@dividend
  3568  031A  01F3               	clrf	___awmod@dividend+1
  3569  031B  1BF2               	btfsc	___awmod@dividend,7
  3570  031C  03F3               	decf	___awmod@dividend+1,f
  3571  031D  300A               	movlw	10
  3572  031E  00F0               	movwf	___awmod@divisor
  3573  031F  3000               	movlw	0
  3574  0320  00F1               	movwf	___awmod@divisor+1
  3575  0321  3197  2705  3181   	fcall	___awmod
  3576  0324  0871               	movf	?___awmod+1,w
  3577  0325  0020               	movlb	0	; select bank0
  3578  0326  01A5               	clrf	___wmul@multiplier+1
  3579  0327  07A5               	addwf	___wmul@multiplier+1,f
  3580  0328  0870               	movf	?___awmod,w
  3581  0329  01A4               	clrf	___wmul@multiplier
  3582  032A  07A4               	addwf	___wmul@multiplier,f
  3583  032B  3003               	movlw	3
  3584  032C  00A6               	movwf	___wmul@multiplicand
  3585  032D  3000               	movlw	0
  3586  032E  00A7               	movwf	___wmul@multiplicand+1
  3587  032F  3195  25A7  3181   	fcall	___wmul
  3588  0332  0020               	movlb	0	; select bank0
  3589  0333  0825               	movf	?___wmul+1,w
  3590  0334  0085               	movwf	5
  3591  0335  0824               	movf	?___wmul,w
  3592  0336  0084               	movwf	4
  3593  0337  304F               	movlw	low (__powers_| (0+32768))
  3594  0338  0784               	addwf	4,f
  3595  0339  3090               	movlw	high (__powers_| (0+32768))
  3596  033A  3D85               	addwfc	5,f
  3597  033B  3F00               	moviw [0]fsr0
  3598  033C  00B0               	movwf	___ftmul@f1
  3599  033D  3F01               	moviw [1]fsr0
  3600  033E  00B1               	movwf	___ftmul@f1+1
  3601  033F  3F02               	moviw [2]fsr0
  3602  0340  00B2               	movwf	___ftmul@f1+2
  3603  0341  300A               	movlw	10
  3604  0342  00F7               	movwf	___awdiv@divisor
  3605  0343  3000               	movlw	0
  3606  0344  00F8               	movwf	___awdiv@divisor+1
  3607  0345  0848               	movf	scale@scl,w
  3608  0346  00F9               	movwf	___awdiv@dividend
  3609  0347  01FA               	clrf	___awdiv@dividend+1
  3610  0348  1BF9               	btfsc	___awdiv@dividend,7
  3611  0349  03FA               	decf	___awdiv@dividend+1,f
  3612  034A  3197  274C  3181   	fcall	___awdiv
  3613  034D  0877               	movf	?___awdiv,w
  3614  034E  3E09               	addlw	9
  3615  034F  0020               	movlb	0	; select bank0
  3616  0350  00A4               	movwf	___wmul@multiplier
  3617  0351  3000               	movlw	0
  3618  0352  3D78               	addwfc	?___awdiv+1,w
  3619  0353  00A5               	movwf	___wmul@multiplier+1
  3620  0354  3003               	movlw	3
  3621  0355  00A6               	movwf	___wmul@multiplicand
  3622  0356  3000               	movlw	0
  3623  0357  00A7               	movwf	___wmul@multiplicand+1
  3624  0358  3195  25A7  3181   	fcall	___wmul
  3625  035B  0020               	movlb	0	; select bank0
  3626  035C  0825               	movf	?___wmul+1,w
  3627  035D  0085               	movwf	5
  3628  035E  0824               	movf	?___wmul,w
  3629  035F  0084               	movwf	4
  3630  0360  304F               	movlw	low (__powers_| (0+32768))
  3631  0361  0784               	addwf	4,f
  3632  0362  3090               	movlw	high (__powers_| (0+32768))
  3633  0363  3D85               	addwfc	5,f
  3634  0364  3F00               	moviw [0]fsr0
  3635  0365  00B3               	movwf	___ftmul@f2
  3636  0366  3F01               	moviw [1]fsr0
  3637  0367  00B4               	movwf	___ftmul@f2+1
  3638  0368  3F02               	moviw [2]fsr0
  3639  0369  00B5               	movwf	___ftmul@f2+2
  3640  036A  318B  233B         	fcall	___ftmul
  3641  036C  0020               	movlb	0	; select bank0
  3642  036D  0830               	movf	?___ftmul,w
  3643  036E  00C0               	movwf	?_scale
  3644  036F  0831               	movf	?___ftmul+1,w
  3645  0370  00C1               	movwf	?_scale+1
  3646  0371  0832               	movf	?___ftmul+2,w
  3647  0372  00C2               	movwf	?_scale+2
  3648  0373  0008               	return
  3649  0374                     l2077:	
  3650                           
  3651                           ;doprnt.c: 440: return _powers_[scl];
  3652  0374  0848               	movf	scale@scl,w
  3653  0375  00C3               	movwf	??_scale
  3654  0376  01C4               	clrf	??_scale+1
  3655  0377  0843               	movf	??_scale,w
  3656  0378  00A4               	movwf	___wmul@multiplier
  3657  0379  0844               	movf	??_scale+1,w
  3658  037A  00A5               	movwf	___wmul@multiplier+1
  3659  037B  3003               	movlw	3
  3660  037C  00A6               	movwf	___wmul@multiplicand
  3661  037D  3000               	movlw	0
  3662  037E  00A7               	movwf	___wmul@multiplicand+1
  3663  037F  3195  25A7         	fcall	___wmul
  3664  0381  0020               	movlb	0	; select bank0
  3665  0382  0825               	movf	?___wmul+1,w
  3666  0383  0085               	movwf	5
  3667  0384  0824               	movf	?___wmul,w
  3668  0385  0084               	movwf	4
  3669  0386  304F               	movlw	low (__powers_| (0+32768))
  3670  0387  0784               	addwf	4,f
  3671  0388  3090               	movlw	high (__powers_| (0+32768))
  3672  0389  3D85               	addwfc	5,f
  3673  038A  3F00               	moviw [0]fsr0
  3674  038B  00C0               	movwf	?_scale
  3675  038C  3F01               	moviw [1]fsr0
  3676  038D  00C1               	movwf	?_scale+1
  3677  038E  3F02               	moviw [2]fsr0
  3678  038F  00C2               	movwf	?_scale+2
  3679  0390  0008               	return
  3680  0391                     __end_of_scale:	
  3681                           
  3682                           	psect	text6
  3683  0E95                     __ptext6:	
  3684 ;; *************** function _fround *****************
  3685 ;; Defined at:
  3686 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  prec            1    wreg     unsigned char 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  prec            1   45[BANK0 ] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  3   32[BANK0 ] unsigned char 
  3693 ;; Registers used:
  3694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3700 ;;      Params:         0       3       0       0       0       0       0       0
  3701 ;;      Locals:         0       7       0       0       0       0       0       0
  3702 ;;      Temps:          0       4       0       0       0       0       0       0
  3703 ;;      Totals:         0      14       0       0       0       0       0       0
  3704 ;;Total ram usage:       14 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    2
  3707 ;; This function calls:
  3708 ;;		___awdiv
  3709 ;;		___awmod
  3710 ;;		___ftmul
  3711 ;;		___wmul
  3712 ;; This function is called by:
  3713 ;;		_sprintf
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           
  3717                           
  3718                           ;psect for function _fround
  3719  0E95                     _fround:	
  3720                           
  3721                           ;incstack = 0
  3722                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3723                           ;fround@prec stored from wreg
  3724  0E95  0020               	movlb	0	; select bank0
  3725  0E96  00CD               	movwf	fround@prec
  3726                           
  3727                           ;doprnt.c: 413: if(prec>=110)
  3728  0E97  306E               	movlw	110
  3729  0E98  024D               	subwf	fround@prec,w
  3730  0E99  1C03               	skipc
  3731  0E9A  2F59               	goto	l2029
  3732                           
  3733                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3734  0E9B  300A               	movlw	10
  3735  0E9C  00F7               	movwf	___awdiv@divisor
  3736  0E9D  3000               	movlw	0
  3737  0E9E  00F8               	movwf	___awdiv@divisor+1
  3738  0E9F  084D               	movf	fround@prec,w
  3739  0EA0  00C3               	movwf	??_fround
  3740  0EA1  01C4               	clrf	??_fround+1
  3741  0EA2  0843               	movf	??_fround,w
  3742  0EA3  00F2               	movwf	___awmod@dividend
  3743  0EA4  0844               	movf	??_fround+1,w
  3744  0EA5  00F3               	movwf	___awmod@dividend+1
  3745  0EA6  3064               	movlw	100
  3746  0EA7  00F0               	movwf	___awmod@divisor
  3747  0EA8  3000               	movlw	0
  3748  0EA9  00F1               	movwf	___awmod@divisor+1
  3749  0EAA  3197  2705  318E   	fcall	___awmod
  3750  0EAD  0871               	movf	?___awmod+1,w
  3751  0EAE  01FA               	clrf	___awdiv@dividend+1
  3752  0EAF  07FA               	addwf	___awdiv@dividend+1,f
  3753  0EB0  0870               	movf	?___awmod,w
  3754  0EB1  01F9               	clrf	___awdiv@dividend
  3755  0EB2  07F9               	addwf	___awdiv@dividend,f
  3756  0EB3  3197  274C  318E   	fcall	___awdiv
  3757  0EB6  0877               	movf	?___awdiv,w
  3758  0EB7  3E09               	addlw	9
  3759  0EB8  0020               	movlb	0	; select bank0
  3760  0EB9  00A4               	movwf	___wmul@multiplier
  3761  0EBA  3000               	movlw	0
  3762  0EBB  3D78               	addwfc	?___awdiv+1,w
  3763  0EBC  00A5               	movwf	___wmul@multiplier+1
  3764  0EBD  3003               	movlw	3
  3765  0EBE  00A6               	movwf	___wmul@multiplicand
  3766  0EBF  3000               	movlw	0
  3767  0EC0  00A7               	movwf	___wmul@multiplicand+1
  3768  0EC1  3195  25A7  318E   	fcall	___wmul
  3769  0EC4  0020               	movlb	0	; select bank0
  3770  0EC5  0825               	movf	?___wmul+1,w
  3771  0EC6  0085               	movwf	5
  3772  0EC7  0824               	movf	?___wmul,w
  3773  0EC8  0084               	movwf	4
  3774  0EC9  3028               	movlw	low (__npowers_| (0+32768))
  3775  0ECA  0784               	addwf	4,f
  3776  0ECB  3090               	movlw	high (__npowers_| (0+32768))
  3777  0ECC  3D85               	addwfc	5,f
  3778  0ECD  3F00               	moviw [0]fsr0
  3779  0ECE  00B0               	movwf	___ftmul@f1
  3780  0ECF  3F01               	moviw [1]fsr0
  3781  0ED0  00B1               	movwf	___ftmul@f1+1
  3782  0ED1  3F02               	moviw [2]fsr0
  3783  0ED2  00B2               	movwf	___ftmul@f1+2
  3784  0ED3  3064               	movlw	100
  3785  0ED4  00F7               	movwf	___awdiv@divisor
  3786  0ED5  3000               	movlw	0
  3787  0ED6  00F8               	movwf	___awdiv@divisor+1
  3788  0ED7  084D               	movf	fround@prec,w
  3789  0ED8  00C5               	movwf	??_fround+2
  3790  0ED9  01C6               	clrf	??_fround+3
  3791  0EDA  0845               	movf	??_fround+2,w
  3792  0EDB  00F9               	movwf	___awdiv@dividend
  3793  0EDC  0846               	movf	??_fround+3,w
  3794  0EDD  00FA               	movwf	___awdiv@dividend+1
  3795  0EDE  3197  274C  318E   	fcall	___awdiv
  3796  0EE1  0877               	movf	?___awdiv,w
  3797  0EE2  3E12               	addlw	18
  3798  0EE3  0020               	movlb	0	; select bank0
  3799  0EE4  00A4               	movwf	___wmul@multiplier
  3800  0EE5  3000               	movlw	0
  3801  0EE6  3D78               	addwfc	?___awdiv+1,w
  3802  0EE7  00A5               	movwf	___wmul@multiplier+1
  3803  0EE8  3003               	movlw	3
  3804  0EE9  00A6               	movwf	___wmul@multiplicand
  3805  0EEA  3000               	movlw	0
  3806  0EEB  00A7               	movwf	___wmul@multiplicand+1
  3807  0EEC  3195  25A7  318E   	fcall	___wmul
  3808  0EEF  0020               	movlb	0	; select bank0
  3809  0EF0  0825               	movf	?___wmul+1,w
  3810  0EF1  0085               	movwf	5
  3811  0EF2  0824               	movf	?___wmul,w
  3812  0EF3  0084               	movwf	4
  3813  0EF4  3028               	movlw	low (__npowers_| (0+32768))
  3814  0EF5  0784               	addwf	4,f
  3815  0EF6  3090               	movlw	high (__npowers_| (0+32768))
  3816  0EF7  3D85               	addwfc	5,f
  3817  0EF8  3F00               	moviw [0]fsr0
  3818  0EF9  00B3               	movwf	___ftmul@f2
  3819  0EFA  3F01               	moviw [1]fsr0
  3820  0EFB  00B4               	movwf	___ftmul@f2+1
  3821  0EFC  3F02               	moviw [2]fsr0
  3822  0EFD  00B5               	movwf	___ftmul@f2+2
  3823  0EFE  318B  233B  318E   	fcall	___ftmul
  3824  0F01  0020               	movlb	0	; select bank0
  3825  0F02  0830               	movf	?___ftmul,w
  3826  0F03  00CA               	movwf	_fround$789
  3827  0F04  0831               	movf	?___ftmul+1,w
  3828  0F05  00CB               	movwf	_fround$789+1
  3829  0F06  0832               	movf	?___ftmul+2,w
  3830  0F07  00CC               	movwf	_fround$789+2
  3831                           
  3832                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3833  0F08  084D               	movf	fround@prec,w
  3834  0F09  00C3               	movwf	??_fround
  3835  0F0A  01C4               	clrf	??_fround+1
  3836  0F0B  0843               	movf	??_fround,w
  3837  0F0C  00F2               	movwf	___awmod@dividend
  3838  0F0D  0844               	movf	??_fround+1,w
  3839  0F0E  00F3               	movwf	___awmod@dividend+1
  3840  0F0F  300A               	movlw	10
  3841  0F10  00F0               	movwf	___awmod@divisor
  3842  0F11  3000               	movlw	0
  3843  0F12  00F1               	movwf	___awmod@divisor+1
  3844  0F13  3197  2705  318E   	fcall	___awmod
  3845  0F16  0871               	movf	?___awmod+1,w
  3846  0F17  0020               	movlb	0	; select bank0
  3847  0F18  01A5               	clrf	___wmul@multiplier+1
  3848  0F19  07A5               	addwf	___wmul@multiplier+1,f
  3849  0F1A  0870               	movf	?___awmod,w
  3850  0F1B  01A4               	clrf	___wmul@multiplier
  3851  0F1C  07A4               	addwf	___wmul@multiplier,f
  3852  0F1D  3003               	movlw	3
  3853  0F1E  00A6               	movwf	___wmul@multiplicand
  3854  0F1F  3000               	movlw	0
  3855  0F20  00A7               	movwf	___wmul@multiplicand+1
  3856  0F21  3195  25A7  318E   	fcall	___wmul
  3857  0F24  0020               	movlb	0	; select bank0
  3858  0F25  0825               	movf	?___wmul+1,w
  3859  0F26  0085               	movwf	5
  3860  0F27  0824               	movf	?___wmul,w
  3861  0F28  0084               	movwf	4
  3862  0F29  3028               	movlw	low (__npowers_| (0+32768))
  3863  0F2A  0784               	addwf	4,f
  3864  0F2B  3090               	movlw	high (__npowers_| (0+32768))
  3865  0F2C  3D85               	addwfc	5,f
  3866  0F2D  3F00               	moviw [0]fsr0
  3867  0F2E  00B0               	movwf	___ftmul@f1
  3868  0F2F  3F01               	moviw [1]fsr0
  3869  0F30  00B1               	movwf	___ftmul@f1+1
  3870  0F31  3F02               	moviw [2]fsr0
  3871  0F32  00B2               	movwf	___ftmul@f1+2
  3872  0F33  084A               	movf	_fround$789,w
  3873  0F34  00B3               	movwf	___ftmul@f2
  3874  0F35  084B               	movf	_fround$789+1,w
  3875  0F36  00B4               	movwf	___ftmul@f2+1
  3876  0F37  084C               	movf	_fround$789+2,w
  3877  0F38  00B5               	movwf	___ftmul@f2+2
  3878  0F39  318B  233B  318E   	fcall	___ftmul
  3879  0F3C  0020               	movlb	0	; select bank0
  3880  0F3D  0830               	movf	?___ftmul,w
  3881  0F3E  00C7               	movwf	_fround$790
  3882  0F3F  0831               	movf	?___ftmul+1,w
  3883  0F40  00C8               	movwf	_fround$790+1
  3884  0F41  0832               	movf	?___ftmul+2,w
  3885  0F42  00C9               	movwf	_fround$790+2
  3886                           
  3887                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3888  0F43  3000               	movlw	0
  3889  0F44  00B0               	movwf	___ftmul@f1
  3890  0F45  3000               	movlw	0
  3891  0F46  00B1               	movwf	___ftmul@f1+1
  3892  0F47  303F               	movlw	63
  3893  0F48  00B2               	movwf	___ftmul@f1+2
  3894  0F49  0847               	movf	_fround$790,w
  3895  0F4A  00B3               	movwf	___ftmul@f2
  3896  0F4B  0848               	movf	_fround$790+1,w
  3897  0F4C  00B4               	movwf	___ftmul@f2+1
  3898  0F4D  0849               	movf	_fround$790+2,w
  3899  0F4E  00B5               	movwf	___ftmul@f2+2
  3900  0F4F  318B  233B         	fcall	___ftmul
  3901  0F51  0020               	movlb	0	; select bank0
  3902  0F52  0830               	movf	?___ftmul,w
  3903  0F53  00C0               	movwf	?_fround
  3904  0F54  0831               	movf	?___ftmul+1,w
  3905  0F55  00C1               	movwf	?_fround+1
  3906  0F56  0832               	movf	?___ftmul+2,w
  3907  0F57  00C2               	movwf	?_fround+2
  3908  0F58  0008               	return
  3909  0F59                     l2029:	
  3910                           
  3911                           ;doprnt.c: 415: else if(prec > 10)
  3912  0F59  300B               	movlw	11
  3913  0F5A  024D               	subwf	fround@prec,w
  3914  0F5B  1C03               	skipc
  3915  0F5C  2FD3               	goto	l2037
  3916                           
  3917                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3918  0F5D  084D               	movf	fround@prec,w
  3919  0F5E  00C3               	movwf	??_fround
  3920  0F5F  01C4               	clrf	??_fround+1
  3921  0F60  0843               	movf	??_fround,w
  3922  0F61  00F2               	movwf	___awmod@dividend
  3923  0F62  0844               	movf	??_fround+1,w
  3924  0F63  00F3               	movwf	___awmod@dividend+1
  3925  0F64  300A               	movlw	10
  3926  0F65  00F0               	movwf	___awmod@divisor
  3927  0F66  3000               	movlw	0
  3928  0F67  00F1               	movwf	___awmod@divisor+1
  3929  0F68  3197  2705  318E   	fcall	___awmod
  3930  0F6B  0871               	movf	?___awmod+1,w
  3931  0F6C  0020               	movlb	0	; select bank0
  3932  0F6D  01A5               	clrf	___wmul@multiplier+1
  3933  0F6E  07A5               	addwf	___wmul@multiplier+1,f
  3934  0F6F  0870               	movf	?___awmod,w
  3935  0F70  01A4               	clrf	___wmul@multiplier
  3936  0F71  07A4               	addwf	___wmul@multiplier,f
  3937  0F72  3003               	movlw	3
  3938  0F73  00A6               	movwf	___wmul@multiplicand
  3939  0F74  3000               	movlw	0
  3940  0F75  00A7               	movwf	___wmul@multiplicand+1
  3941  0F76  3195  25A7  318E   	fcall	___wmul
  3942  0F79  0020               	movlb	0	; select bank0
  3943  0F7A  0825               	movf	?___wmul+1,w
  3944  0F7B  0085               	movwf	5
  3945  0F7C  0824               	movf	?___wmul,w
  3946  0F7D  0084               	movwf	4
  3947  0F7E  3028               	movlw	low (__npowers_| (0+32768))
  3948  0F7F  0784               	addwf	4,f
  3949  0F80  3090               	movlw	high (__npowers_| (0+32768))
  3950  0F81  3D85               	addwfc	5,f
  3951  0F82  3F00               	moviw [0]fsr0
  3952  0F83  00B0               	movwf	___ftmul@f1
  3953  0F84  3F01               	moviw [1]fsr0
  3954  0F85  00B1               	movwf	___ftmul@f1+1
  3955  0F86  3F02               	moviw [2]fsr0
  3956  0F87  00B2               	movwf	___ftmul@f1+2
  3957  0F88  300A               	movlw	10
  3958  0F89  00F7               	movwf	___awdiv@divisor
  3959  0F8A  3000               	movlw	0
  3960  0F8B  00F8               	movwf	___awdiv@divisor+1
  3961  0F8C  084D               	movf	fround@prec,w
  3962  0F8D  00C5               	movwf	??_fround+2
  3963  0F8E  01C6               	clrf	??_fround+3
  3964  0F8F  0845               	movf	??_fround+2,w
  3965  0F90  00F9               	movwf	___awdiv@dividend
  3966  0F91  0846               	movf	??_fround+3,w
  3967  0F92  00FA               	movwf	___awdiv@dividend+1
  3968  0F93  3197  274C  318E   	fcall	___awdiv
  3969  0F96  0877               	movf	?___awdiv,w
  3970  0F97  3E09               	addlw	9
  3971  0F98  0020               	movlb	0	; select bank0
  3972  0F99  00A4               	movwf	___wmul@multiplier
  3973  0F9A  3000               	movlw	0
  3974  0F9B  3D78               	addwfc	?___awdiv+1,w
  3975  0F9C  00A5               	movwf	___wmul@multiplier+1
  3976  0F9D  3003               	movlw	3
  3977  0F9E  00A6               	movwf	___wmul@multiplicand
  3978  0F9F  3000               	movlw	0
  3979  0FA0  00A7               	movwf	___wmul@multiplicand+1
  3980  0FA1  3195  25A7  318E   	fcall	___wmul
  3981  0FA4  0020               	movlb	0	; select bank0
  3982  0FA5  0825               	movf	?___wmul+1,w
  3983  0FA6  0085               	movwf	5
  3984  0FA7  0824               	movf	?___wmul,w
  3985  0FA8  0084               	movwf	4
  3986  0FA9  3028               	movlw	low (__npowers_| (0+32768))
  3987  0FAA  0784               	addwf	4,f
  3988  0FAB  3090               	movlw	high (__npowers_| (0+32768))
  3989  0FAC  3D85               	addwfc	5,f
  3990  0FAD  3F00               	moviw [0]fsr0
  3991  0FAE  00B3               	movwf	___ftmul@f2
  3992  0FAF  3F01               	moviw [1]fsr0
  3993  0FB0  00B4               	movwf	___ftmul@f2+1
  3994  0FB1  3F02               	moviw [2]fsr0
  3995  0FB2  00B5               	movwf	___ftmul@f2+2
  3996  0FB3  318B  233B  318E   	fcall	___ftmul
  3997  0FB6  0020               	movlb	0	; select bank0
  3998  0FB7  0830               	movf	?___ftmul,w
  3999  0FB8  00CA               	movwf	_fround$789
  4000  0FB9  0831               	movf	?___ftmul+1,w
  4001  0FBA  00CB               	movwf	_fround$789+1
  4002  0FBB  0832               	movf	?___ftmul+2,w
  4003  0FBC  00CC               	movwf	_fround$789+2
  4004                           
  4005                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4006  0FBD  3000               	movlw	0
  4007  0FBE  00B0               	movwf	___ftmul@f1
  4008  0FBF  3000               	movlw	0
  4009  0FC0  00B1               	movwf	___ftmul@f1+1
  4010  0FC1  303F               	movlw	63
  4011  0FC2  00B2               	movwf	___ftmul@f1+2
  4012  0FC3  084A               	movf	_fround$789,w
  4013  0FC4  00B3               	movwf	___ftmul@f2
  4014  0FC5  084B               	movf	_fround$789+1,w
  4015  0FC6  00B4               	movwf	___ftmul@f2+1
  4016  0FC7  084C               	movf	_fround$789+2,w
  4017  0FC8  00B5               	movwf	___ftmul@f2+2
  4018  0FC9  318B  233B         	fcall	___ftmul
  4019  0FCB  0020               	movlb	0	; select bank0
  4020  0FCC  0830               	movf	?___ftmul,w
  4021  0FCD  00C0               	movwf	?_fround
  4022  0FCE  0831               	movf	?___ftmul+1,w
  4023  0FCF  00C1               	movwf	?_fround+1
  4024  0FD0  0832               	movf	?___ftmul+2,w
  4025  0FD1  00C2               	movwf	?_fround+2
  4026  0FD2  0008               	return
  4027  0FD3                     l2037:	
  4028                           
  4029                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4030  0FD3  3000               	movlw	0
  4031  0FD4  00B0               	movwf	___ftmul@f1
  4032  0FD5  3000               	movlw	0
  4033  0FD6  00B1               	movwf	___ftmul@f1+1
  4034  0FD7  303F               	movlw	63
  4035  0FD8  00B2               	movwf	___ftmul@f1+2
  4036  0FD9  084D               	movf	fround@prec,w
  4037  0FDA  00C3               	movwf	??_fround
  4038  0FDB  01C4               	clrf	??_fround+1
  4039  0FDC  0843               	movf	??_fround,w
  4040  0FDD  00A4               	movwf	___wmul@multiplier
  4041  0FDE  0844               	movf	??_fround+1,w
  4042  0FDF  00A5               	movwf	___wmul@multiplier+1
  4043  0FE0  3003               	movlw	3
  4044  0FE1  00A6               	movwf	___wmul@multiplicand
  4045  0FE2  3000               	movlw	0
  4046  0FE3  00A7               	movwf	___wmul@multiplicand+1
  4047  0FE4  3195  25A7  318E   	fcall	___wmul
  4048  0FE7  0020               	movlb	0	; select bank0
  4049  0FE8  0825               	movf	?___wmul+1,w
  4050  0FE9  0085               	movwf	5
  4051  0FEA  0824               	movf	?___wmul,w
  4052  0FEB  0084               	movwf	4
  4053  0FEC  3028               	movlw	low (__npowers_| (0+32768))
  4054  0FED  0784               	addwf	4,f
  4055  0FEE  3090               	movlw	high (__npowers_| (0+32768))
  4056  0FEF  3D85               	addwfc	5,f
  4057  0FF0  3F00               	moviw [0]fsr0
  4058  0FF1  00B3               	movwf	___ftmul@f2
  4059  0FF2  3F01               	moviw [1]fsr0
  4060  0FF3  00B4               	movwf	___ftmul@f2+1
  4061  0FF4  3F02               	moviw [2]fsr0
  4062  0FF5  00B5               	movwf	___ftmul@f2+2
  4063  0FF6  318B  233B         	fcall	___ftmul
  4064  0FF8  0020               	movlb	0	; select bank0
  4065  0FF9  0830               	movf	?___ftmul,w
  4066  0FFA  00C0               	movwf	?_fround
  4067  0FFB  0831               	movf	?___ftmul+1,w
  4068  0FFC  00C1               	movwf	?_fround+1
  4069  0FFD  0832               	movf	?___ftmul+2,w
  4070  0FFE  00C2               	movwf	?_fround+2
  4071  0FFF  0008               	return
  4072  1000                     __end_of_fround:	
  4073                           
  4074                           	psect	text7
  4075  15A7                     __ptext7:	
  4076 ;; *************** function ___wmul *****************
  4077 ;; Defined at:
  4078 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  multiplier      2    4[BANK0 ] unsigned int 
  4081 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  product         2   12[COMMON] unsigned int 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  2    4[BANK0 ] unsigned int 
  4086 ;; Registers used:
  4087 ;;		wreg, status,2, status,0
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4093 ;;      Params:         0       4       0       0       0       0       0       0
  4094 ;;      Locals:         2       0       0       0       0       0       0       0
  4095 ;;      Temps:          0       0       0       0       0       0       0       0
  4096 ;;      Totals:         2       4       0       0       0       0       0       0
  4097 ;;Total ram usage:        6 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_fround
  4103 ;;		_scale
  4104 ;;		_sprintf
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function ___wmul
  4110  15A7                     ___wmul:	
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4114  15A7  01FC               	clrf	___wmul@product
  4115  15A8  01FD               	clrf	___wmul@product+1
  4116  15A9                     l1743:	
  4117  15A9  0020               	movlb	0	; select bank0
  4118  15AA  1C24               	btfss	___wmul@multiplier,0
  4119  15AB  2DB0               	goto	l256
  4120  15AC  0826               	movf	___wmul@multiplicand,w
  4121  15AD  07FC               	addwf	___wmul@product,f
  4122  15AE  0827               	movf	___wmul@multiplicand+1,w
  4123  15AF  3DFD               	addwfc	___wmul@product+1,f
  4124  15B0                     l256:	
  4125  15B0  3001               	movlw	1
  4126  15B1                     u1985:	
  4127  15B1  35A6               	lslf	___wmul@multiplicand,f
  4128  15B2  0DA7               	rlf	___wmul@multiplicand+1,f
  4129  15B3  0B89               	decfsz	9,f
  4130  15B4  2DB1               	goto	u1985
  4131  15B5  3001               	movlw	1
  4132  15B6                     u1995:	
  4133  15B6  36A5               	lsrf	___wmul@multiplier+1,f
  4134  15B7  0CA4               	rrf	___wmul@multiplier,f
  4135  15B8  0B89               	decfsz	9,f
  4136  15B9  2DB6               	goto	u1995
  4137  15BA  0825               	movf	___wmul@multiplier+1,w
  4138  15BB  0424               	iorwf	___wmul@multiplier,w
  4139  15BC  1D03               	skipz
  4140  15BD  2DA9               	goto	l1743
  4141  15BE  087D               	movf	___wmul@product+1,w
  4142  15BF  01A5               	clrf	?___wmul+1
  4143  15C0  07A5               	addwf	?___wmul+1,f
  4144  15C1  087C               	movf	___wmul@product,w
  4145  15C2  01A4               	clrf	?___wmul
  4146  15C3  07A4               	addwf	?___wmul,f
  4147  15C4  0008               	return
  4148  15C5                     __end_of___wmul:	
  4149                           
  4150                           	psect	text8
  4151  0B3B                     __ptext8:	
  4152 ;; *************** function ___ftmul *****************
  4153 ;; Defined at:
  4154 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;  f1              3   16[BANK0 ] float 
  4157 ;;  f2              3   19[BANK0 ] float 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  4160 ;;  sign            1   31[BANK0 ] unsigned char 
  4161 ;;  cntr            1   30[BANK0 ] unsigned char 
  4162 ;;  exp             1   26[BANK0 ] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  3   16[BANK0 ] float 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0, pclath, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4172 ;;      Params:         0       6       0       0       0       0       0       0
  4173 ;;      Locals:         0       6       0       0       0       0       0       0
  4174 ;;      Temps:          0       4       0       0       0       0       0       0
  4175 ;;      Totals:         0      16       0       0       0       0       0       0
  4176 ;;Total ram usage:       16 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    1
  4179 ;; This function calls:
  4180 ;;		___ftpack
  4181 ;; This function is called by:
  4182 ;;		_loop
  4183 ;;		_fround
  4184 ;;		_scale
  4185 ;;		_sprintf
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function ___ftmul
  4191  0B3B                     ___ftmul:	
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4195  0B3B  0020               	movlb	0	; select bank0
  4196  0B3C  0830               	movf	___ftmul@f1,w
  4197  0B3D  00B6               	movwf	??___ftmul
  4198  0B3E  0831               	movf	___ftmul@f1+1,w
  4199  0B3F  00B7               	movwf	??___ftmul+1
  4200  0B40  0832               	movf	___ftmul@f1+2,w
  4201  0B41  00B8               	movwf	??___ftmul+2
  4202  0B42  1003               	clrc
  4203  0B43  0D37               	rlf	??___ftmul+1,w
  4204  0B44  0D38               	rlf	??___ftmul+2,w
  4205  0B45  00B9               	movwf	??___ftmul+3
  4206  0B46  0839               	movf	??___ftmul+3,w
  4207  0B47  00BA               	movwf	___ftmul@exp
  4208  0B48  08BA               	movf	___ftmul@exp,f
  4209  0B49  1D03               	skipz
  4210  0B4A  2B52               	goto	l1913
  4211  0B4B  3000               	movlw	0
  4212  0B4C  00B0               	movwf	?___ftmul
  4213  0B4D  3000               	movlw	0
  4214  0B4E  00B1               	movwf	?___ftmul+1
  4215  0B4F  3000               	movlw	0
  4216  0B50  00B2               	movwf	?___ftmul+2
  4217  0B51  0008               	return
  4218  0B52                     l1913:	
  4219  0B52  0833               	movf	___ftmul@f2,w
  4220  0B53  00B6               	movwf	??___ftmul
  4221  0B54  0834               	movf	___ftmul@f2+1,w
  4222  0B55  00B7               	movwf	??___ftmul+1
  4223  0B56  0835               	movf	___ftmul@f2+2,w
  4224  0B57  00B8               	movwf	??___ftmul+2
  4225  0B58  1003               	clrc
  4226  0B59  0D37               	rlf	??___ftmul+1,w
  4227  0B5A  0D38               	rlf	??___ftmul+2,w
  4228  0B5B  00B9               	movwf	??___ftmul+3
  4229  0B5C  0839               	movf	??___ftmul+3,w
  4230  0B5D  00BF               	movwf	___ftmul@sign
  4231  0B5E  08BF               	movf	___ftmul@sign,f
  4232  0B5F  1D03               	skipz
  4233  0B60  2B68               	goto	l1919
  4234  0B61  3000               	movlw	0
  4235  0B62  00B0               	movwf	?___ftmul
  4236  0B63  3000               	movlw	0
  4237  0B64  00B1               	movwf	?___ftmul+1
  4238  0B65  3000               	movlw	0
  4239  0B66  00B2               	movwf	?___ftmul+2
  4240  0B67  0008               	return
  4241  0B68                     l1919:	
  4242  0B68  083F               	movf	___ftmul@sign,w
  4243  0B69  3E7B               	addlw	123
  4244  0B6A  00B6               	movwf	??___ftmul
  4245  0B6B  0836               	movf	??___ftmul,w
  4246  0B6C  07BA               	addwf	___ftmul@exp,f
  4247  0B6D  0830               	movf	___ftmul@f1,w
  4248  0B6E  00B6               	movwf	??___ftmul
  4249  0B6F  0831               	movf	___ftmul@f1+1,w
  4250  0B70  00B7               	movwf	??___ftmul+1
  4251  0B71  0832               	movf	___ftmul@f1+2,w
  4252  0B72  00B8               	movwf	??___ftmul+2
  4253  0B73  3010               	movlw	16
  4254  0B74                     u2455:	
  4255  0B74  36B8               	lsrf	??___ftmul+2,f
  4256  0B75  0CB7               	rrf	??___ftmul+1,f
  4257  0B76  0CB6               	rrf	??___ftmul,f
  4258  0B77  0B89               	decfsz	9,f
  4259  0B78  2B74               	goto	u2455
  4260  0B79  0836               	movf	??___ftmul,w
  4261  0B7A  00B9               	movwf	??___ftmul+3
  4262  0B7B  0839               	movf	??___ftmul+3,w
  4263  0B7C  00BF               	movwf	___ftmul@sign
  4264  0B7D  0833               	movf	___ftmul@f2,w
  4265  0B7E  00B6               	movwf	??___ftmul
  4266  0B7F  0834               	movf	___ftmul@f2+1,w
  4267  0B80  00B7               	movwf	??___ftmul+1
  4268  0B81  0835               	movf	___ftmul@f2+2,w
  4269  0B82  00B8               	movwf	??___ftmul+2
  4270  0B83  3010               	movlw	16
  4271  0B84                     u2465:	
  4272  0B84  36B8               	lsrf	??___ftmul+2,f
  4273  0B85  0CB7               	rrf	??___ftmul+1,f
  4274  0B86  0CB6               	rrf	??___ftmul,f
  4275  0B87  0B89               	decfsz	9,f
  4276  0B88  2B84               	goto	u2465
  4277  0B89  0836               	movf	??___ftmul,w
  4278  0B8A  00B9               	movwf	??___ftmul+3
  4279  0B8B  0839               	movf	??___ftmul+3,w
  4280  0B8C  06BF               	xorwf	___ftmul@sign,f
  4281  0B8D  3080               	movlw	128
  4282  0B8E  00B6               	movwf	??___ftmul
  4283  0B8F  0836               	movf	??___ftmul,w
  4284  0B90  05BF               	andwf	___ftmul@sign,f
  4285  0B91  17B1               	bsf	___ftmul@f1+1,7
  4286  0B92  17B4               	bsf	___ftmul@f2+1,7
  4287  0B93  30FF               	movlw	255
  4288  0B94  05B3               	andwf	___ftmul@f2,f
  4289  0B95  30FF               	movlw	255
  4290  0B96  05B4               	andwf	___ftmul@f2+1,f
  4291  0B97  3000               	movlw	0
  4292  0B98  05B5               	andwf	___ftmul@f2+2,f
  4293  0B99  3000               	movlw	0
  4294  0B9A  00BB               	movwf	___ftmul@f3_as_product
  4295  0B9B  3000               	movlw	0
  4296  0B9C  00BC               	movwf	___ftmul@f3_as_product+1
  4297  0B9D  3000               	movlw	0
  4298  0B9E  00BD               	movwf	___ftmul@f3_as_product+2
  4299  0B9F  3007               	movlw	7
  4300  0BA0  00B6               	movwf	??___ftmul
  4301  0BA1  0836               	movf	??___ftmul,w
  4302  0BA2  00BE               	movwf	___ftmul@cntr
  4303  0BA3                     l1931:	
  4304  0BA3  1C30               	btfss	___ftmul@f1,0
  4305  0BA4  2BAB               	goto	l1935
  4306  0BA5  0833               	movf	___ftmul@f2,w
  4307  0BA6  07BB               	addwf	___ftmul@f3_as_product,f
  4308  0BA7  0834               	movf	___ftmul@f2+1,w
  4309  0BA8  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  4310  0BA9  0835               	movf	___ftmul@f2+2,w
  4311  0BAA  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  4312  0BAB                     l1935:	
  4313  0BAB  3001               	movlw	1
  4314  0BAC                     u2485:	
  4315  0BAC  36B2               	lsrf	___ftmul@f1+2,f
  4316  0BAD  0CB1               	rrf	___ftmul@f1+1,f
  4317  0BAE  0CB0               	rrf	___ftmul@f1,f
  4318  0BAF  0B89               	decfsz	9,f
  4319  0BB0  2BAC               	goto	u2485
  4320  0BB1  3001               	movlw	1
  4321  0BB2                     u2495:	
  4322  0BB2  35B3               	lslf	___ftmul@f2,f
  4323  0BB3  0DB4               	rlf	___ftmul@f2+1,f
  4324  0BB4  0DB5               	rlf	___ftmul@f2+2,f
  4325  0BB5  0B89               	decfsz	9,f
  4326  0BB6  2BB2               	goto	u2495
  4327  0BB7  3001               	movlw	1
  4328  0BB8  02BE               	subwf	___ftmul@cntr,f
  4329  0BB9  1D03               	btfss	3,2
  4330  0BBA  2BA3               	goto	l1931
  4331  0BBB  3009               	movlw	9
  4332  0BBC  00B6               	movwf	??___ftmul
  4333  0BBD  0836               	movf	??___ftmul,w
  4334  0BBE  00BE               	movwf	___ftmul@cntr
  4335  0BBF                     l1943:	
  4336  0BBF  1C30               	btfss	___ftmul@f1,0
  4337  0BC0  2BC7               	goto	l1947
  4338  0BC1  0833               	movf	___ftmul@f2,w
  4339  0BC2  07BB               	addwf	___ftmul@f3_as_product,f
  4340  0BC3  0834               	movf	___ftmul@f2+1,w
  4341  0BC4  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  4342  0BC5  0835               	movf	___ftmul@f2+2,w
  4343  0BC6  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  4344  0BC7                     l1947:	
  4345  0BC7  3001               	movlw	1
  4346  0BC8                     u2525:	
  4347  0BC8  36B2               	lsrf	___ftmul@f1+2,f
  4348  0BC9  0CB1               	rrf	___ftmul@f1+1,f
  4349  0BCA  0CB0               	rrf	___ftmul@f1,f
  4350  0BCB  0B89               	decfsz	9,f
  4351  0BCC  2BC8               	goto	u2525
  4352  0BCD  3001               	movlw	1
  4353  0BCE                     u2535:	
  4354  0BCE  36BD               	lsrf	___ftmul@f3_as_product+2,f
  4355  0BCF  0CBC               	rrf	___ftmul@f3_as_product+1,f
  4356  0BD0  0CBB               	rrf	___ftmul@f3_as_product,f
  4357  0BD1  0B89               	decfsz	9,f
  4358  0BD2  2BCE               	goto	u2535
  4359  0BD3  3001               	movlw	1
  4360  0BD4  02BE               	subwf	___ftmul@cntr,f
  4361  0BD5  1D03               	btfss	3,2
  4362  0BD6  2BBF               	goto	l1943
  4363  0BD7  083B               	movf	___ftmul@f3_as_product,w
  4364  0BD8  00F0               	movwf	___ftpack@arg
  4365  0BD9  083C               	movf	___ftmul@f3_as_product+1,w
  4366  0BDA  00F1               	movwf	___ftpack@arg+1
  4367  0BDB  083D               	movf	___ftmul@f3_as_product+2,w
  4368  0BDC  00F2               	movwf	___ftpack@arg+2
  4369  0BDD  083A               	movf	___ftmul@exp,w
  4370  0BDE  00B6               	movwf	??___ftmul
  4371  0BDF  0836               	movf	??___ftmul,w
  4372  0BE0  00F3               	movwf	___ftpack@exp
  4373  0BE1  083F               	movf	___ftmul@sign,w
  4374  0BE2  00B7               	movwf	??___ftmul+1
  4375  0BE3  0837               	movf	??___ftmul+1,w
  4376  0BE4  00F4               	movwf	___ftpack@sign
  4377  0BE5  3197  27A0         	fcall	___ftpack
  4378  0BE7  0870               	movf	?___ftpack,w
  4379  0BE8  0020               	movlb	0	; select bank0
  4380  0BE9  00B0               	movwf	?___ftmul
  4381  0BEA  0871               	movf	?___ftpack+1,w
  4382  0BEB  00B1               	movwf	?___ftmul+1
  4383  0BEC  0872               	movf	?___ftpack+2,w
  4384  0BED  00B2               	movwf	?___ftmul+2
  4385  0BEE  0008               	return
  4386  0BEF                     __end_of___ftmul:	
  4387                           
  4388                           	psect	text9
  4389  1705                     __ptext9:	
  4390 ;; *************** function ___awmod *****************
  4391 ;; Defined at:
  4392 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  divisor         2    0[COMMON] int 
  4395 ;;  dividend        2    2[COMMON] int 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  sign            1    6[COMMON] unsigned char 
  4398 ;;  counter         1    5[COMMON] unsigned char 
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  2    0[COMMON] int 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2, status,0
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4408 ;;      Params:         4       0       0       0       0       0       0       0
  4409 ;;      Locals:         2       0       0       0       0       0       0       0
  4410 ;;      Temps:          1       0       0       0       0       0       0       0
  4411 ;;      Totals:         7       0       0       0       0       0       0       0
  4412 ;;Total ram usage:        7 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_fround
  4418 ;;		_scale
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           
  4423                           ;psect for function ___awmod
  4424  1705                     ___awmod:	
  4425                           
  4426                           ;incstack = 0
  4427                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4428  1705  01F6               	clrf	___awmod@sign
  4429  1706  1FF3               	btfss	___awmod@dividend+1,7
  4430  1707  2F0F               	goto	l1805
  4431  1708  09F2               	comf	___awmod@dividend,f
  4432  1709  09F3               	comf	___awmod@dividend+1,f
  4433  170A  0AF2               	incf	___awmod@dividend,f
  4434  170B  1903               	skipnz
  4435  170C  0AF3               	incf	___awmod@dividend+1,f
  4436  170D  01F6               	clrf	___awmod@sign
  4437  170E  0AF6               	incf	___awmod@sign,f
  4438  170F                     l1805:	
  4439  170F  1FF1               	btfss	___awmod@divisor+1,7
  4440  1710  2F16               	goto	l1809
  4441  1711  09F0               	comf	___awmod@divisor,f
  4442  1712  09F1               	comf	___awmod@divisor+1,f
  4443  1713  0AF0               	incf	___awmod@divisor,f
  4444  1714  1903               	skipnz
  4445  1715  0AF1               	incf	___awmod@divisor+1,f
  4446  1716                     l1809:	
  4447  1716  0871               	movf	___awmod@divisor+1,w
  4448  1717  0470               	iorwf	___awmod@divisor,w
  4449  1718  1903               	skipnz
  4450  1719  2F3D               	goto	l1827
  4451  171A  01F5               	clrf	___awmod@counter
  4452  171B  0AF5               	incf	___awmod@counter,f
  4453  171C                     l1817:	
  4454  171C  1BF1               	btfsc	___awmod@divisor+1,7
  4455  171D  2F28               	goto	l1819
  4456  171E  3001               	movlw	1
  4457  171F                     u2145:	
  4458  171F  35F0               	lslf	___awmod@divisor,f
  4459  1720  0DF1               	rlf	___awmod@divisor+1,f
  4460  1721  0B89               	decfsz	9,f
  4461  1722  2F1F               	goto	u2145
  4462  1723  3001               	movlw	1
  4463  1724  00F4               	movwf	??___awmod
  4464  1725  0874               	movf	??___awmod,w
  4465  1726  07F5               	addwf	___awmod@counter,f
  4466  1727  2F1C               	goto	l1817
  4467  1728                     l1819:	
  4468  1728  0871               	movf	___awmod@divisor+1,w
  4469  1729  0273               	subwf	___awmod@dividend+1,w
  4470  172A  1D03               	skipz
  4471  172B  2F2E               	goto	u2165
  4472  172C  0870               	movf	___awmod@divisor,w
  4473  172D  0272               	subwf	___awmod@dividend,w
  4474  172E                     u2165:	
  4475  172E  1C03               	skipc
  4476  172F  2F34               	goto	l1823
  4477  1730  0870               	movf	___awmod@divisor,w
  4478  1731  02F2               	subwf	___awmod@dividend,f
  4479  1732  0871               	movf	___awmod@divisor+1,w
  4480  1733  3BF3               	subwfb	___awmod@dividend+1,f
  4481  1734                     l1823:	
  4482  1734  3001               	movlw	1
  4483  1735                     u2175:	
  4484  1735  36F1               	lsrf	___awmod@divisor+1,f
  4485  1736  0CF0               	rrf	___awmod@divisor,f
  4486  1737  0B89               	decfsz	9,f
  4487  1738  2F35               	goto	u2175
  4488  1739  3001               	movlw	1
  4489  173A  02F5               	subwf	___awmod@counter,f
  4490  173B  1D03               	btfss	3,2
  4491  173C  2F28               	goto	l1819
  4492  173D                     l1827:	
  4493  173D  0876               	movf	___awmod@sign,w
  4494  173E  1903               	btfsc	3,2
  4495  173F  2F45               	goto	l1831
  4496  1740  09F2               	comf	___awmod@dividend,f
  4497  1741  09F3               	comf	___awmod@dividend+1,f
  4498  1742  0AF2               	incf	___awmod@dividend,f
  4499  1743  1903               	skipnz
  4500  1744  0AF3               	incf	___awmod@dividend+1,f
  4501  1745                     l1831:	
  4502  1745  0873               	movf	___awmod@dividend+1,w
  4503  1746  01F1               	clrf	?___awmod+1
  4504  1747  07F1               	addwf	?___awmod+1,f
  4505  1748  0872               	movf	___awmod@dividend,w
  4506  1749  01F0               	clrf	?___awmod
  4507  174A  07F0               	addwf	?___awmod,f
  4508  174B  0008               	return
  4509  174C                     __end_of___awmod:	
  4510                           
  4511                           	psect	text10
  4512  174C                     __ptext10:	
  4513 ;; *************** function ___awdiv *****************
  4514 ;; Defined at:
  4515 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  divisor         2    7[COMMON] int 
  4518 ;;  dividend        2    9[COMMON] int 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  quotient        2    2[BANK0 ] int 
  4521 ;;  sign            1    1[BANK0 ] unsigned char 
  4522 ;;  counter         1    0[BANK0 ] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  2    7[COMMON] int 
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4532 ;;      Params:         4       0       0       0       0       0       0       0
  4533 ;;      Locals:         0       4       0       0       0       0       0       0
  4534 ;;      Temps:          1       0       0       0       0       0       0       0
  4535 ;;      Totals:         5       4       0       0       0       0       0       0
  4536 ;;Total ram usage:        9 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; This function calls:
  4539 ;;		Nothing
  4540 ;; This function is called by:
  4541 ;;		_fround
  4542 ;;		_scale
  4543 ;;		_sprintf
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           
  4548                           ;psect for function ___awdiv
  4549  174C                     ___awdiv:	
  4550                           
  4551                           ;incstack = 0
  4552                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4553  174C  0020               	movlb	0	; select bank0
  4554  174D  01A1               	clrf	___awdiv@sign
  4555  174E  1FF8               	btfss	___awdiv@divisor+1,7
  4556  174F  2F57               	goto	l1761
  4557  1750  09F7               	comf	___awdiv@divisor,f
  4558  1751  09F8               	comf	___awdiv@divisor+1,f
  4559  1752  0AF7               	incf	___awdiv@divisor,f
  4560  1753  1903               	skipnz
  4561  1754  0AF8               	incf	___awdiv@divisor+1,f
  4562  1755  01A1               	clrf	___awdiv@sign
  4563  1756  0AA1               	incf	___awdiv@sign,f
  4564  1757                     l1761:	
  4565  1757  1FFA               	btfss	___awdiv@dividend+1,7
  4566  1758  2F62               	goto	l1767
  4567  1759  09F9               	comf	___awdiv@dividend,f
  4568  175A  09FA               	comf	___awdiv@dividend+1,f
  4569  175B  0AF9               	incf	___awdiv@dividend,f
  4570  175C  1903               	skipnz
  4571  175D  0AFA               	incf	___awdiv@dividend+1,f
  4572  175E  3001               	movlw	1
  4573  175F  00FB               	movwf	??___awdiv
  4574  1760  087B               	movf	??___awdiv,w
  4575  1761  06A1               	xorwf	___awdiv@sign,f
  4576  1762                     l1767:	
  4577  1762  01A2               	clrf	___awdiv@quotient
  4578  1763  01A3               	clrf	___awdiv@quotient+1
  4579  1764  0878               	movf	___awdiv@divisor+1,w
  4580  1765  0477               	iorwf	___awdiv@divisor,w
  4581  1766  1903               	skipnz
  4582  1767  2F91               	goto	l1789
  4583  1768  01A0               	clrf	___awdiv@counter
  4584  1769  0AA0               	incf	___awdiv@counter,f
  4585  176A                     l1777:	
  4586  176A  1BF8               	btfsc	___awdiv@divisor+1,7
  4587  176B  2F76               	goto	l1779
  4588  176C  3001               	movlw	1
  4589  176D                     u2045:	
  4590  176D  35F7               	lslf	___awdiv@divisor,f
  4591  176E  0DF8               	rlf	___awdiv@divisor+1,f
  4592  176F  0B89               	decfsz	9,f
  4593  1770  2F6D               	goto	u2045
  4594  1771  3001               	movlw	1
  4595  1772  00FB               	movwf	??___awdiv
  4596  1773  087B               	movf	??___awdiv,w
  4597  1774  07A0               	addwf	___awdiv@counter,f
  4598  1775  2F6A               	goto	l1777
  4599  1776                     l1779:	
  4600  1776  3001               	movlw	1
  4601  1777                     u2065:	
  4602  1777  35A2               	lslf	___awdiv@quotient,f
  4603  1778  0DA3               	rlf	___awdiv@quotient+1,f
  4604  1779  0B89               	decfsz	9,f
  4605  177A  2F77               	goto	u2065
  4606  177B  0878               	movf	___awdiv@divisor+1,w
  4607  177C  027A               	subwf	___awdiv@dividend+1,w
  4608  177D  1D03               	skipz
  4609  177E  2F81               	goto	u2075
  4610  177F  0877               	movf	___awdiv@divisor,w
  4611  1780  0279               	subwf	___awdiv@dividend,w
  4612  1781                     u2075:	
  4613  1781  1C03               	skipc
  4614  1782  2F88               	goto	l1785
  4615  1783  0877               	movf	___awdiv@divisor,w
  4616  1784  02F9               	subwf	___awdiv@dividend,f
  4617  1785  0878               	movf	___awdiv@divisor+1,w
  4618  1786  3BFA               	subwfb	___awdiv@dividend+1,f
  4619  1787  1422               	bsf	___awdiv@quotient,0
  4620  1788                     l1785:	
  4621  1788  3001               	movlw	1
  4622  1789                     u2085:	
  4623  1789  36F8               	lsrf	___awdiv@divisor+1,f
  4624  178A  0CF7               	rrf	___awdiv@divisor,f
  4625  178B  0B89               	decfsz	9,f
  4626  178C  2F89               	goto	u2085
  4627  178D  3001               	movlw	1
  4628  178E  02A0               	subwf	___awdiv@counter,f
  4629  178F  1D03               	btfss	3,2
  4630  1790  2F76               	goto	l1779
  4631  1791                     l1789:	
  4632  1791  0821               	movf	___awdiv@sign,w
  4633  1792  1903               	btfsc	3,2
  4634  1793  2F99               	goto	l1793
  4635  1794  09A2               	comf	___awdiv@quotient,f
  4636  1795  09A3               	comf	___awdiv@quotient+1,f
  4637  1796  0AA2               	incf	___awdiv@quotient,f
  4638  1797  1903               	skipnz
  4639  1798  0AA3               	incf	___awdiv@quotient+1,f
  4640  1799                     l1793:	
  4641  1799  0823               	movf	___awdiv@quotient+1,w
  4642  179A  01F8               	clrf	?___awdiv+1
  4643  179B  07F8               	addwf	?___awdiv+1,f
  4644  179C  0822               	movf	___awdiv@quotient,w
  4645  179D  01F7               	clrf	?___awdiv
  4646  179E  07F7               	addwf	?___awdiv,f
  4647  179F  0008               	return
  4648  17A0                     __end_of___awdiv:	
  4649                           
  4650                           	psect	text11
  4651  0BEF                     __ptext11:	
  4652 ;; *************** function __tdiv_to_l_ *****************
  4653 ;; Defined at:
  4654 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  f1              3    0[COMMON] float 
  4657 ;;  f2              3    3[COMMON] float 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  quot            4    0[BANK0 ] unsigned long 
  4660 ;;  exp1            1    5[BANK0 ] unsigned char 
  4661 ;;  cntr            1    4[BANK0 ] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  4    0[COMMON] unsigned long 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4671 ;;      Params:         6       0       0       0       0       0       0       0
  4672 ;;      Locals:         0       6       0       0       0       0       0       0
  4673 ;;      Temps:          4       0       0       0       0       0       0       0
  4674 ;;      Totals:        10       6       0       0       0       0       0       0
  4675 ;;Total ram usage:       16 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_sprintf
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           
  4685                           ;psect for function __tdiv_to_l_
  4686  0BEF                     __tdiv_to_l_:	
  4687                           
  4688                           ;incstack = 0
  4689                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  4690  0BEF  0870               	movf	__tdiv_to_l_@f1,w
  4691  0BF0  00F6               	movwf	??__tdiv_to_l_
  4692  0BF1  0871               	movf	__tdiv_to_l_@f1+1,w
  4693  0BF2  00F7               	movwf	??__tdiv_to_l_+1
  4694  0BF3  0872               	movf	__tdiv_to_l_@f1+2,w
  4695  0BF4  00F8               	movwf	??__tdiv_to_l_+2
  4696  0BF5  1003               	clrc
  4697  0BF6  0D77               	rlf	??__tdiv_to_l_+1,w
  4698  0BF7  0D78               	rlf	??__tdiv_to_l_+2,w
  4699  0BF8  00F9               	movwf	??__tdiv_to_l_+3
  4700  0BF9  0879               	movf	??__tdiv_to_l_+3,w
  4701  0BFA  0020               	movlb	0	; select bank0
  4702  0BFB  00A5               	movwf	__tdiv_to_l_@exp1
  4703  0BFC  08A5               	movf	__tdiv_to_l_@exp1,f
  4704  0BFD  1D03               	skipz
  4705  0BFE  2C08               	goto	l2087
  4706  0BFF  3000               	movlw	0
  4707  0C00  00F3               	movwf	?__tdiv_to_l_+3
  4708  0C01  3000               	movlw	0
  4709  0C02  00F2               	movwf	?__tdiv_to_l_+2
  4710  0C03  3000               	movlw	0
  4711  0C04  00F1               	movwf	?__tdiv_to_l_+1
  4712  0C05  3000               	movlw	0
  4713  0C06  00F0               	movwf	?__tdiv_to_l_
  4714  0C07  0008               	return
  4715  0C08                     l2087:	
  4716  0C08  0873               	movf	__tdiv_to_l_@f2,w
  4717  0C09  00F6               	movwf	??__tdiv_to_l_
  4718  0C0A  0874               	movf	__tdiv_to_l_@f2+1,w
  4719  0C0B  00F7               	movwf	??__tdiv_to_l_+1
  4720  0C0C  0875               	movf	__tdiv_to_l_@f2+2,w
  4721  0C0D  00F8               	movwf	??__tdiv_to_l_+2
  4722  0C0E  1003               	clrc
  4723  0C0F  0D77               	rlf	??__tdiv_to_l_+1,w
  4724  0C10  0D78               	rlf	??__tdiv_to_l_+2,w
  4725  0C11  00F9               	movwf	??__tdiv_to_l_+3
  4726  0C12  0879               	movf	??__tdiv_to_l_+3,w
  4727  0C13  00A4               	movwf	__tdiv_to_l_@cntr
  4728  0C14  08A4               	movf	__tdiv_to_l_@cntr,f
  4729  0C15  1D03               	skipz
  4730  0C16  2C20               	goto	l489
  4731  0C17  3000               	movlw	0
  4732  0C18  00F3               	movwf	?__tdiv_to_l_+3
  4733  0C19  3000               	movlw	0
  4734  0C1A  00F2               	movwf	?__tdiv_to_l_+2
  4735  0C1B  3000               	movlw	0
  4736  0C1C  00F1               	movwf	?__tdiv_to_l_+1
  4737  0C1D  3000               	movlw	0
  4738  0C1E  00F0               	movwf	?__tdiv_to_l_
  4739  0C1F  0008               	return
  4740  0C20                     l489:	
  4741  0C20  17F1               	bsf	__tdiv_to_l_@f1+1,7
  4742  0C21  30FF               	movlw	255
  4743  0C22  05F0               	andwf	__tdiv_to_l_@f1,f
  4744  0C23  30FF               	movlw	255
  4745  0C24  05F1               	andwf	__tdiv_to_l_@f1+1,f
  4746  0C25  3000               	movlw	0
  4747  0C26  05F2               	andwf	__tdiv_to_l_@f1+2,f
  4748  0C27  17F4               	bsf	__tdiv_to_l_@f2+1,7
  4749  0C28  30FF               	movlw	255
  4750  0C29  05F3               	andwf	__tdiv_to_l_@f2,f
  4751  0C2A  30FF               	movlw	255
  4752  0C2B  05F4               	andwf	__tdiv_to_l_@f2+1,f
  4753  0C2C  3000               	movlw	0
  4754  0C2D  05F5               	andwf	__tdiv_to_l_@f2+2,f
  4755  0C2E  3000               	movlw	0
  4756  0C2F  00A3               	movwf	__tdiv_to_l_@quot+3
  4757  0C30  3000               	movlw	0
  4758  0C31  00A2               	movwf	__tdiv_to_l_@quot+2
  4759  0C32  3000               	movlw	0
  4760  0C33  00A1               	movwf	__tdiv_to_l_@quot+1
  4761  0C34  3000               	movlw	0
  4762  0C35  00A0               	movwf	__tdiv_to_l_@quot
  4763  0C36  307F               	movlw	127
  4764  0C37  02A5               	subwf	__tdiv_to_l_@exp1,f
  4765  0C38  3098               	movlw	152
  4766  0C39  0724               	addwf	__tdiv_to_l_@cntr,w
  4767  0C3A  00F6               	movwf	??__tdiv_to_l_
  4768  0C3B  0876               	movf	??__tdiv_to_l_,w
  4769  0C3C  02A5               	subwf	__tdiv_to_l_@exp1,f
  4770  0C3D  3018               	movlw	24
  4771  0C3E  00F6               	movwf	??__tdiv_to_l_
  4772  0C3F  0876               	movf	??__tdiv_to_l_,w
  4773  0C40  00A4               	movwf	__tdiv_to_l_@cntr
  4774  0C41                     l2101:	
  4775  0C41  3001               	movlw	1
  4776  0C42                     u2765:	
  4777  0C42  35A0               	lslf	__tdiv_to_l_@quot,f
  4778  0C43  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4779  0C44  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4780  0C45  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4781  0C46  0B89               	decfsz	9,f
  4782  0C47  2C42               	goto	u2765
  4783  0C48  0875               	movf	__tdiv_to_l_@f2+2,w
  4784  0C49  0272               	subwf	__tdiv_to_l_@f1+2,w
  4785  0C4A  1D03               	skipz
  4786  0C4B  2C52               	goto	u2775
  4787  0C4C  0874               	movf	__tdiv_to_l_@f2+1,w
  4788  0C4D  0271               	subwf	__tdiv_to_l_@f1+1,w
  4789  0C4E  1D03               	skipz
  4790  0C4F  2C52               	goto	u2775
  4791  0C50  0873               	movf	__tdiv_to_l_@f2,w
  4792  0C51  0270               	subwf	__tdiv_to_l_@f1,w
  4793  0C52                     u2775:	
  4794  0C52  1C03               	skipc
  4795  0C53  2C5B               	goto	l2109
  4796  0C54  0873               	movf	__tdiv_to_l_@f2,w
  4797  0C55  02F0               	subwf	__tdiv_to_l_@f1,f
  4798  0C56  0874               	movf	__tdiv_to_l_@f2+1,w
  4799  0C57  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  4800  0C58  0875               	movf	__tdiv_to_l_@f2+2,w
  4801  0C59  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  4802  0C5A  1420               	bsf	__tdiv_to_l_@quot,0
  4803  0C5B                     l2109:	
  4804  0C5B  3001               	movlw	1
  4805  0C5C                     u2785:	
  4806  0C5C  35F0               	lslf	__tdiv_to_l_@f1,f
  4807  0C5D  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  4808  0C5E  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  4809  0C5F  0B89               	decfsz	9,f
  4810  0C60  2C5C               	goto	u2785
  4811  0C61  3001               	movlw	1
  4812  0C62  02A4               	subwf	__tdiv_to_l_@cntr,f
  4813  0C63  1D03               	btfss	3,2
  4814  0C64  2C41               	goto	l2101
  4815  0C65  1FA5               	btfss	__tdiv_to_l_@exp1,7
  4816  0C66  2C83               	goto	l2121
  4817  0C67  0825               	movf	__tdiv_to_l_@exp1,w
  4818  0C68  3A80               	xorlw	128
  4819  0C69  3E97               	addlw	151
  4820  0C6A  1803               	skipnc
  4821  0C6B  2C75               	goto	l2119
  4822  0C6C  3000               	movlw	0
  4823  0C6D  00F3               	movwf	?__tdiv_to_l_+3
  4824  0C6E  3000               	movlw	0
  4825  0C6F  00F2               	movwf	?__tdiv_to_l_+2
  4826  0C70  3000               	movlw	0
  4827  0C71  00F1               	movwf	?__tdiv_to_l_+1
  4828  0C72  3000               	movlw	0
  4829  0C73  00F0               	movwf	?__tdiv_to_l_
  4830  0C74  0008               	return
  4831  0C75                     l2119:	
  4832  0C75  3001               	movlw	1
  4833  0C76                     u2825:	
  4834  0C76  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  4835  0C77  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  4836  0C78  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  4837  0C79  0CA0               	rrf	__tdiv_to_l_@quot,f
  4838  0C7A  0B89               	decfsz	9,f
  4839  0C7B  2C76               	goto	u2825
  4840  0C7C  3001               	movlw	1
  4841  0C7D  00F6               	movwf	??__tdiv_to_l_
  4842  0C7E  0876               	movf	??__tdiv_to_l_,w
  4843  0C7F  07A5               	addwf	__tdiv_to_l_@exp1,f
  4844  0C80  1903               	btfsc	3,2
  4845  0C81  2C9C               	goto	l2131
  4846  0C82  2C75               	goto	l2119
  4847  0C83                     l2121:	
  4848  0C83  3018               	movlw	24
  4849  0C84  0225               	subwf	__tdiv_to_l_@exp1,w
  4850  0C85  1C03               	skipc
  4851  0C86  2C99               	goto	l2129
  4852  0C87  3000               	movlw	0
  4853  0C88  00F3               	movwf	?__tdiv_to_l_+3
  4854  0C89  3000               	movlw	0
  4855  0C8A  00F2               	movwf	?__tdiv_to_l_+2
  4856  0C8B  3000               	movlw	0
  4857  0C8C  00F1               	movwf	?__tdiv_to_l_+1
  4858  0C8D  3000               	movlw	0
  4859  0C8E  00F0               	movwf	?__tdiv_to_l_
  4860  0C8F  0008               	return
  4861  0C90                     l2127:	
  4862  0C90  3001               	movlw	1
  4863  0C91                     u2855:	
  4864  0C91  35A0               	lslf	__tdiv_to_l_@quot,f
  4865  0C92  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4866  0C93  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4867  0C94  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4868  0C95  0B89               	decfsz	9,f
  4869  0C96  2C91               	goto	u2855
  4870  0C97  3001               	movlw	1
  4871  0C98  02A5               	subwf	__tdiv_to_l_@exp1,f
  4872  0C99                     l2129:	
  4873  0C99  08A5               	movf	__tdiv_to_l_@exp1,f
  4874  0C9A  1D03               	skipz
  4875  0C9B  2C90               	goto	l2127
  4876  0C9C                     l2131:	
  4877  0C9C  0823               	movf	__tdiv_to_l_@quot+3,w
  4878  0C9D  00F3               	movwf	?__tdiv_to_l_+3
  4879  0C9E  0822               	movf	__tdiv_to_l_@quot+2,w
  4880  0C9F  00F2               	movwf	?__tdiv_to_l_+2
  4881  0CA0  0821               	movf	__tdiv_to_l_@quot+1,w
  4882  0CA1  00F1               	movwf	?__tdiv_to_l_+1
  4883  0CA2  0820               	movf	__tdiv_to_l_@quot,w
  4884  0CA3  00F0               	movwf	?__tdiv_to_l_
  4885  0CA4  0008               	return
  4886  0CA5                     __end_of__tdiv_to_l_:	
  4887                           
  4888                           	psect	text12
  4889  0024                     __ptext12:	
  4890 ;; *************** function __div_to_l_ *****************
  4891 ;; Defined at:
  4892 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  f1              3    0[COMMON] unsigned long 
  4895 ;;  f2              3    3[COMMON] unsigned long 
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  quot            4    0[BANK0 ] unsigned long 
  4898 ;;  exp1            1    5[BANK0 ] unsigned char 
  4899 ;;  cntr            1    4[BANK0 ] unsigned char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  4    0[COMMON] unsigned long 
  4902 ;; Registers used:
  4903 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4909 ;;      Params:         6       0       0       0       0       0       0       0
  4910 ;;      Locals:         0       6       0       0       0       0       0       0
  4911 ;;      Temps:          8       0       0       0       0       0       0       0
  4912 ;;      Totals:        14       6       0       0       0       0       0       0
  4913 ;;Total ram usage:       20 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		_sprintf
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function __div_to_l_
  4924  0024                     __div_to_l_:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  4928  0024  3070               	movlw	low __div_to_l_@f1
  4929  0025  0086               	movwf	6
  4930  0026  0187               	clrf	7
  4931  0027  3F40               	moviw [0]fsr1
  4932  0028  00F6               	movwf	??__div_to_l_
  4933  0029  3F41               	moviw [1]fsr1
  4934  002A  00F7               	movwf	??__div_to_l_+1
  4935  002B  3F42               	moviw [2]fsr1
  4936  002C  00F8               	movwf	??__div_to_l_+2
  4937  002D  3F43               	moviw [3]fsr1
  4938  002E  00F9               	movwf	??__div_to_l_+3
  4939  002F  1003               	clrc
  4940  0030  0D78               	rlf	??__div_to_l_+2,w
  4941  0031  0D79               	rlf	??__div_to_l_+3,w
  4942  0032  00FA               	movwf	??__div_to_l_+4
  4943  0033  087A               	movf	??__div_to_l_+4,w
  4944  0034  0020               	movlb	0	; select bank0
  4945  0035  00A5               	movwf	__div_to_l_@exp1
  4946  0036  08A5               	movf	__div_to_l_@exp1,f
  4947  0037  1D03               	skipz
  4948  0038  2842               	goto	l2141
  4949  0039  3000               	movlw	0
  4950  003A  00F3               	movwf	?__div_to_l_+3
  4951  003B  3000               	movlw	0
  4952  003C  00F2               	movwf	?__div_to_l_+2
  4953  003D  3000               	movlw	0
  4954  003E  00F1               	movwf	?__div_to_l_+1
  4955  003F  3000               	movlw	0
  4956  0040  00F0               	movwf	?__div_to_l_
  4957  0041  0008               	return
  4958  0042                     l2141:	
  4959  0042  3073               	movlw	low __div_to_l_@f2
  4960  0043  0086               	movwf	6
  4961  0044  0187               	clrf	7
  4962  0045  3F40               	moviw [0]fsr1
  4963  0046  00F6               	movwf	??__div_to_l_
  4964  0047  3F41               	moviw [1]fsr1
  4965  0048  00F7               	movwf	??__div_to_l_+1
  4966  0049  3F42               	moviw [2]fsr1
  4967  004A  00F8               	movwf	??__div_to_l_+2
  4968  004B  3F43               	moviw [3]fsr1
  4969  004C  00F9               	movwf	??__div_to_l_+3
  4970  004D  1003               	clrc
  4971  004E  0D78               	rlf	??__div_to_l_+2,w
  4972  004F  0D79               	rlf	??__div_to_l_+3,w
  4973  0050  00FA               	movwf	??__div_to_l_+4
  4974  0051  087A               	movf	??__div_to_l_+4,w
  4975  0052  00A4               	movwf	__div_to_l_@cntr
  4976  0053  08A4               	movf	__div_to_l_@cntr,f
  4977  0054  1D03               	skipz
  4978  0055  285F               	goto	l2147
  4979  0056  3000               	movlw	0
  4980  0057  00F3               	movwf	?__div_to_l_+3
  4981  0058  3000               	movlw	0
  4982  0059  00F2               	movwf	?__div_to_l_+2
  4983  005A  3000               	movlw	0
  4984  005B  00F1               	movwf	?__div_to_l_+1
  4985  005C  3000               	movlw	0
  4986  005D  00F0               	movwf	?__div_to_l_
  4987  005E  0008               	return
  4988  005F                     l2147:	
  4989  005F  3070               	movlw	low __div_to_l_@f1
  4990  0060  0086               	movwf	6
  4991  0061  0187               	clrf	7
  4992  0062  3000               	movlw	0
  4993  0063  0481               	iorwf	1,f
  4994  0064  3141               	addfsr 1,1
  4995  0065  3000               	movlw	0
  4996  0066  0481               	iorwf	1,f
  4997  0067  3141               	addfsr 1,1
  4998  0068  3080               	movlw	128
  4999  0069  0481               	iorwf	1,f
  5000  006A  3141               	addfsr 1,1
  5001  006B  3000               	movlw	0
  5002  006C  0481               	iorwf	1,f
  5003  006D  3070               	movlw	low __div_to_l_@f1
  5004  006E  0086               	movwf	6
  5005  006F  0187               	clrf	7
  5006  0070  30FF               	movlw	255
  5007  0071  0581               	andwf	1,f
  5008  0072  3141               	addfsr 1,1
  5009  0073  30FF               	movlw	255
  5010  0074  0581               	andwf	1,f
  5011  0075  3141               	addfsr 1,1
  5012  0076  30FF               	movlw	255
  5013  0077  0581               	andwf	1,f
  5014  0078  3141               	addfsr 1,1
  5015  0079  3000               	movlw	0
  5016  007A  0581               	andwf	1,f
  5017  007B  3073               	movlw	low __div_to_l_@f2
  5018  007C  0086               	movwf	6
  5019  007D  0187               	clrf	7
  5020  007E  3000               	movlw	0
  5021  007F  0481               	iorwf	1,f
  5022  0080  3141               	addfsr 1,1
  5023  0081  3000               	movlw	0
  5024  0082  0481               	iorwf	1,f
  5025  0083  3141               	addfsr 1,1
  5026  0084  3080               	movlw	128
  5027  0085  0481               	iorwf	1,f
  5028  0086  3141               	addfsr 1,1
  5029  0087  3000               	movlw	0
  5030  0088  0481               	iorwf	1,f
  5031  0089  3073               	movlw	low __div_to_l_@f2
  5032  008A  0086               	movwf	6
  5033  008B  0187               	clrf	7
  5034  008C  30FF               	movlw	255
  5035  008D  0581               	andwf	1,f
  5036  008E  3141               	addfsr 1,1
  5037  008F  30FF               	movlw	255
  5038  0090  0581               	andwf	1,f
  5039  0091  3141               	addfsr 1,1
  5040  0092  30FF               	movlw	255
  5041  0093  0581               	andwf	1,f
  5042  0094  3141               	addfsr 1,1
  5043  0095  3000               	movlw	0
  5044  0096  0581               	andwf	1,f
  5045  0097  3000               	movlw	0
  5046  0098  00A3               	movwf	__div_to_l_@quot+3
  5047  0099  3000               	movlw	0
  5048  009A  00A2               	movwf	__div_to_l_@quot+2
  5049  009B  3000               	movlw	0
  5050  009C  00A1               	movwf	__div_to_l_@quot+1
  5051  009D  3000               	movlw	0
  5052  009E  00A0               	movwf	__div_to_l_@quot
  5053  009F  307F               	movlw	127
  5054  00A0  02A5               	subwf	__div_to_l_@exp1,f
  5055  00A1  30A0               	movlw	160
  5056  00A2  0724               	addwf	__div_to_l_@cntr,w
  5057  00A3  00F6               	movwf	??__div_to_l_
  5058  00A4  0876               	movf	??__div_to_l_,w
  5059  00A5  02A5               	subwf	__div_to_l_@exp1,f
  5060  00A6  3020               	movlw	32
  5061  00A7  00F6               	movwf	??__div_to_l_
  5062  00A8  0876               	movf	??__div_to_l_,w
  5063  00A9  00A4               	movwf	__div_to_l_@cntr
  5064  00AA                     l2157:	
  5065  00AA  3001               	movlw	1
  5066  00AB                     u2895:	
  5067  00AB  35A0               	lslf	__div_to_l_@quot,f
  5068  00AC  0DA1               	rlf	__div_to_l_@quot+1,f
  5069  00AD  0DA2               	rlf	__div_to_l_@quot+2,f
  5070  00AE  0DA3               	rlf	__div_to_l_@quot+3,f
  5071  00AF  0B89               	decfsz	9,f
  5072  00B0  28AB               	goto	u2895
  5073  00B1  3073               	movlw	low __div_to_l_@f2
  5074  00B2  0086               	movwf	6
  5075  00B3  0187               	clrf	7
  5076  00B4  3F40               	moviw [0]fsr1
  5077  00B5  00F6               	movwf	??__div_to_l_
  5078  00B6  3F41               	moviw [1]fsr1
  5079  00B7  00F7               	movwf	??__div_to_l_+1
  5080  00B8  3F42               	moviw [2]fsr1
  5081  00B9  00F8               	movwf	??__div_to_l_+2
  5082  00BA  3F43               	moviw [3]fsr1
  5083  00BB  00F9               	movwf	??__div_to_l_+3
  5084  00BC  3070               	movlw	low __div_to_l_@f1
  5085  00BD  0086               	movwf	6
  5086  00BE  0187               	clrf	7
  5087  00BF  3F40               	moviw [0]fsr1
  5088  00C0  00FA               	movwf	??__div_to_l_+4
  5089  00C1  3F41               	moviw [1]fsr1
  5090  00C2  00FB               	movwf	??__div_to_l_+5
  5091  00C3  3F42               	moviw [2]fsr1
  5092  00C4  00FC               	movwf	??__div_to_l_+6
  5093  00C5  3F43               	moviw [3]fsr1
  5094  00C6  00FD               	movwf	??__div_to_l_+7
  5095  00C7  0879               	movf	??__div_to_l_+3,w
  5096  00C8  027D               	subwf	??__div_to_l_+7,w
  5097  00C9  1D03               	skipz
  5098  00CA  28D5               	goto	u2905
  5099  00CB  0878               	movf	??__div_to_l_+2,w
  5100  00CC  027C               	subwf	??__div_to_l_+6,w
  5101  00CD  1D03               	skipz
  5102  00CE  28D5               	goto	u2905
  5103  00CF  0877               	movf	??__div_to_l_+1,w
  5104  00D0  027B               	subwf	??__div_to_l_+5,w
  5105  00D1  1D03               	skipz
  5106  00D2  28D5               	goto	u2905
  5107  00D3  0876               	movf	??__div_to_l_,w
  5108  00D4  027A               	subwf	??__div_to_l_+4,w
  5109  00D5                     u2905:	
  5110  00D5  1C03               	skipc
  5111  00D6  28F2               	goto	l2165
  5112  00D7  3073               	movlw	low __div_to_l_@f2
  5113  00D8  0086               	movwf	6
  5114  00D9  0187               	clrf	7
  5115  00DA  3F40               	moviw [0]fsr1
  5116  00DB  00F6               	movwf	??__div_to_l_
  5117  00DC  3F41               	moviw [1]fsr1
  5118  00DD  00F7               	movwf	??__div_to_l_+1
  5119  00DE  3F42               	moviw [2]fsr1
  5120  00DF  00F8               	movwf	??__div_to_l_+2
  5121  00E0  3F43               	moviw [3]fsr1
  5122  00E1  00F9               	movwf	??__div_to_l_+3
  5123  00E2  3070               	movlw	low __div_to_l_@f1
  5124  00E3  0086               	movwf	6
  5125  00E4  0187               	clrf	7
  5126  00E5  0876               	movf	??__div_to_l_,w
  5127  00E6  0281               	subwf	1,f
  5128  00E7  3141               	addfsr 1,1
  5129  00E8  0877               	movf	??__div_to_l_+1,w
  5130  00E9  3B81               	subwfb	1,f
  5131  00EA  3141               	addfsr 1,1
  5132  00EB  0878               	movf	??__div_to_l_+2,w
  5133  00EC  3B81               	subwfb	1,f
  5134  00ED  3141               	addfsr 1,1
  5135  00EE  0879               	movf	??__div_to_l_+3,w
  5136  00EF  3B81               	subwfb	1,f
  5137  00F0  317D               	addfsr 1,-3
  5138  00F1  1420               	bsf	__div_to_l_@quot,0
  5139  00F2                     l2165:	
  5140  00F2  3070               	movlw	low __div_to_l_@f1
  5141  00F3  0086               	movwf	6
  5142  00F4  0187               	clrf	7
  5143  00F5  3581               	lslf	1,f
  5144  00F6  3141               	addfsr 1,1
  5145  00F7  0D81               	rlf	1,f
  5146  00F8  3141               	addfsr 1,1
  5147  00F9  0D81               	rlf	1,f
  5148  00FA  3141               	addfsr 1,1
  5149  00FB  0D81               	rlf	1,f
  5150  00FC  317D               	addfsr 1,-3
  5151  00FD  3001               	movlw	1
  5152  00FE  02A4               	subwf	__div_to_l_@cntr,f
  5153  00FF  1D03               	btfss	3,2
  5154  0100  28AA               	goto	l2157
  5155  0101  1FA5               	btfss	__div_to_l_@exp1,7
  5156  0102  291F               	goto	l2177
  5157  0103  0825               	movf	__div_to_l_@exp1,w
  5158  0104  3A80               	xorlw	128
  5159  0105  3E9F               	addlw	159
  5160  0106  1803               	skipnc
  5161  0107  2911               	goto	l2175
  5162  0108  3000               	movlw	0
  5163  0109  00F3               	movwf	?__div_to_l_+3
  5164  010A  3000               	movlw	0
  5165  010B  00F2               	movwf	?__div_to_l_+2
  5166  010C  3000               	movlw	0
  5167  010D  00F1               	movwf	?__div_to_l_+1
  5168  010E  3000               	movlw	0
  5169  010F  00F0               	movwf	?__div_to_l_
  5170  0110  0008               	return
  5171  0111                     l2175:	
  5172  0111  3001               	movlw	1
  5173  0112                     u2945:	
  5174  0112  36A3               	lsrf	__div_to_l_@quot+3,f
  5175  0113  0CA2               	rrf	__div_to_l_@quot+2,f
  5176  0114  0CA1               	rrf	__div_to_l_@quot+1,f
  5177  0115  0CA0               	rrf	__div_to_l_@quot,f
  5178  0116  0B89               	decfsz	9,f
  5179  0117  2912               	goto	u2945
  5180  0118  3001               	movlw	1
  5181  0119  00F6               	movwf	??__div_to_l_
  5182  011A  0876               	movf	??__div_to_l_,w
  5183  011B  07A5               	addwf	__div_to_l_@exp1,f
  5184  011C  1903               	btfsc	3,2
  5185  011D  2938               	goto	l2187
  5186  011E  2911               	goto	l2175
  5187  011F                     l2177:	
  5188  011F  3020               	movlw	32
  5189  0120  0225               	subwf	__div_to_l_@exp1,w
  5190  0121  1C03               	skipc
  5191  0122  2935               	goto	l2185
  5192  0123  3000               	movlw	0
  5193  0124  00F3               	movwf	?__div_to_l_+3
  5194  0125  3000               	movlw	0
  5195  0126  00F2               	movwf	?__div_to_l_+2
  5196  0127  3000               	movlw	0
  5197  0128  00F1               	movwf	?__div_to_l_+1
  5198  0129  3000               	movlw	0
  5199  012A  00F0               	movwf	?__div_to_l_
  5200  012B  0008               	return
  5201  012C                     l2183:	
  5202  012C  3001               	movlw	1
  5203  012D                     u2975:	
  5204  012D  35A0               	lslf	__div_to_l_@quot,f
  5205  012E  0DA1               	rlf	__div_to_l_@quot+1,f
  5206  012F  0DA2               	rlf	__div_to_l_@quot+2,f
  5207  0130  0DA3               	rlf	__div_to_l_@quot+3,f
  5208  0131  0B89               	decfsz	9,f
  5209  0132  292D               	goto	u2975
  5210  0133  3001               	movlw	1
  5211  0134  02A5               	subwf	__div_to_l_@exp1,f
  5212  0135                     l2185:	
  5213  0135  08A5               	movf	__div_to_l_@exp1,f
  5214  0136  1D03               	skipz
  5215  0137  292C               	goto	l2183
  5216  0138                     l2187:	
  5217  0138  0823               	movf	__div_to_l_@quot+3,w
  5218  0139  00F3               	movwf	?__div_to_l_+3
  5219  013A  0822               	movf	__div_to_l_@quot+2,w
  5220  013B  00F2               	movwf	?__div_to_l_+2
  5221  013C  0821               	movf	__div_to_l_@quot+1,w
  5222  013D  00F1               	movwf	?__div_to_l_+1
  5223  013E  0820               	movf	__div_to_l_@quot,w
  5224  013F  00F0               	movwf	?__div_to_l_
  5225  0140  0008               	return
  5226  0141                     __end_of__div_to_l_:	
  5227                           
  5228                           	psect	text13
  5229  15EC                     __ptext13:	
  5230 ;; *************** function ___lltoft *****************
  5231 ;; Defined at:
  5232 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;  c               4    8[COMMON] unsigned long 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  exp             1   13[COMMON] unsigned char 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  3    8[COMMON] float 
  5239 ;; Registers used:
  5240 ;;		wreg, status,2, status,0, pclath, cstack
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5246 ;;      Params:         4       0       0       0       0       0       0       0
  5247 ;;      Locals:         1       0       0       0       0       0       0       0
  5248 ;;      Temps:          1       0       0       0       0       0       0       0
  5249 ;;      Totals:         6       0       0       0       0       0       0       0
  5250 ;;Total ram usage:        6 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    1
  5253 ;; This function calls:
  5254 ;;		___ftpack
  5255 ;; This function is called by:
  5256 ;;		_sprintf
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function ___lltoft
  5262  15EC                     ___lltoft:	
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5266  15EC  308E               	movlw	142
  5267  15ED  00FC               	movwf	??___lltoft
  5268  15EE  087C               	movf	??___lltoft,w
  5269  15EF  00FD               	movwf	___lltoft@exp
  5270  15F0                     l2317:	
  5271  15F0  30FF               	movlw	255
  5272  15F1  057B               	andwf	___lltoft@c+3,w
  5273  15F2  1903               	btfsc	3,2
  5274  15F3  2E00               	goto	l2319
  5275  15F4  3001               	movlw	1
  5276  15F5                     u3265:	
  5277  15F5  36FB               	lsrf	___lltoft@c+3,f
  5278  15F6  0CFA               	rrf	___lltoft@c+2,f
  5279  15F7  0CF9               	rrf	___lltoft@c+1,f
  5280  15F8  0CF8               	rrf	___lltoft@c,f
  5281  15F9  0B89               	decfsz	9,f
  5282  15FA  2DF5               	goto	u3265
  5283  15FB  3001               	movlw	1
  5284  15FC  00FC               	movwf	??___lltoft
  5285  15FD  087C               	movf	??___lltoft,w
  5286  15FE  07FD               	addwf	___lltoft@exp,f
  5287  15FF  2DF0               	goto	l2317
  5288  1600                     l2319:	
  5289  1600  0878               	movf	___lltoft@c,w
  5290  1601  00F0               	movwf	___ftpack@arg
  5291  1602  0879               	movf	___lltoft@c+1,w
  5292  1603  00F1               	movwf	___ftpack@arg+1
  5293  1604  087A               	movf	___lltoft@c+2,w
  5294  1605  00F2               	movwf	___ftpack@arg+2
  5295  1606  087D               	movf	___lltoft@exp,w
  5296  1607  00FC               	movwf	??___lltoft
  5297  1608  087C               	movf	??___lltoft,w
  5298  1609  00F3               	movwf	___ftpack@exp
  5299  160A  01F4               	clrf	___ftpack@sign
  5300  160B  3197  27A0         	fcall	___ftpack
  5301  160D  0870               	movf	?___ftpack,w
  5302  160E  00F8               	movwf	?___lltoft
  5303  160F  0871               	movf	?___ftpack+1,w
  5304  1610  00F9               	movwf	?___lltoft+1
  5305  1611  0872               	movf	?___ftpack+2,w
  5306  1612  00FA               	movwf	?___lltoft+2
  5307  1613  0008               	return
  5308  1614                     __end_of___lltoft:	
  5309                           
  5310                           	psect	text14
  5311  16C3                     __ptext14:	
  5312 ;; *************** function ___llmod *****************
  5313 ;; Defined at:
  5314 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  divisor         4    0[COMMON] unsigned long 
  5317 ;;  dividend        4    4[COMMON] unsigned long 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  counter         1    9[COMMON] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  4    0[COMMON] unsigned long 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5329 ;;      Params:         8       0       0       0       0       0       0       0
  5330 ;;      Locals:         1       0       0       0       0       0       0       0
  5331 ;;      Temps:          1       0       0       0       0       0       0       0
  5332 ;;      Totals:        10       0       0       0       0       0       0       0
  5333 ;;Total ram usage:       10 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_sprintf
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function ___llmod
  5344  16C3                     ___llmod:	
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5348  16C3  0873               	movf	___llmod@divisor+3,w
  5349  16C4  0472               	iorwf	___llmod@divisor+2,w
  5350  16C5  0471               	iorwf	___llmod@divisor+1,w
  5351  16C6  0470               	iorwf	___llmod@divisor,w
  5352  16C7  1903               	skipnz
  5353  16C8  2EFC               	goto	l2309
  5354  16C9  01F9               	clrf	___llmod@counter
  5355  16CA  0AF9               	incf	___llmod@counter,f
  5356  16CB                     l2299:	
  5357  16CB  1BF3               	btfsc	___llmod@divisor+3,7
  5358  16CC  2ED9               	goto	l2301
  5359  16CD  3001               	movlw	1
  5360  16CE                     u3215:	
  5361  16CE  35F0               	lslf	___llmod@divisor,f
  5362  16CF  0DF1               	rlf	___llmod@divisor+1,f
  5363  16D0  0DF2               	rlf	___llmod@divisor+2,f
  5364  16D1  0DF3               	rlf	___llmod@divisor+3,f
  5365  16D2  0B89               	decfsz	9,f
  5366  16D3  2ECE               	goto	u3215
  5367  16D4  3001               	movlw	1
  5368  16D5  00F8               	movwf	??___llmod
  5369  16D6  0878               	movf	??___llmod,w
  5370  16D7  07F9               	addwf	___llmod@counter,f
  5371  16D8  2ECB               	goto	l2299
  5372  16D9                     l2301:	
  5373  16D9  0873               	movf	___llmod@divisor+3,w
  5374  16DA  0277               	subwf	___llmod@dividend+3,w
  5375  16DB  1D03               	skipz
  5376  16DC  2EE7               	goto	u3235
  5377  16DD  0872               	movf	___llmod@divisor+2,w
  5378  16DE  0276               	subwf	___llmod@dividend+2,w
  5379  16DF  1D03               	skipz
  5380  16E0  2EE7               	goto	u3235
  5381  16E1  0871               	movf	___llmod@divisor+1,w
  5382  16E2  0275               	subwf	___llmod@dividend+1,w
  5383  16E3  1D03               	skipz
  5384  16E4  2EE7               	goto	u3235
  5385  16E5  0870               	movf	___llmod@divisor,w
  5386  16E6  0274               	subwf	___llmod@dividend,w
  5387  16E7                     u3235:	
  5388  16E7  1C03               	skipc
  5389  16E8  2EF1               	goto	l2305
  5390  16E9  0870               	movf	___llmod@divisor,w
  5391  16EA  02F4               	subwf	___llmod@dividend,f
  5392  16EB  0871               	movf	___llmod@divisor+1,w
  5393  16EC  3BF5               	subwfb	___llmod@dividend+1,f
  5394  16ED  0872               	movf	___llmod@divisor+2,w
  5395  16EE  3BF6               	subwfb	___llmod@dividend+2,f
  5396  16EF  0873               	movf	___llmod@divisor+3,w
  5397  16F0  3BF7               	subwfb	___llmod@dividend+3,f
  5398  16F1                     l2305:	
  5399  16F1  3001               	movlw	1
  5400  16F2                     u3245:	
  5401  16F2  36F3               	lsrf	___llmod@divisor+3,f
  5402  16F3  0CF2               	rrf	___llmod@divisor+2,f
  5403  16F4  0CF1               	rrf	___llmod@divisor+1,f
  5404  16F5  0CF0               	rrf	___llmod@divisor,f
  5405  16F6  0B89               	decfsz	9,f
  5406  16F7  2EF2               	goto	u3245
  5407  16F8  3001               	movlw	1
  5408  16F9  02F9               	subwf	___llmod@counter,f
  5409  16FA  1D03               	btfss	3,2
  5410  16FB  2ED9               	goto	l2301
  5411  16FC                     l2309:	
  5412  16FC  0877               	movf	___llmod@dividend+3,w
  5413  16FD  00F3               	movwf	?___llmod+3
  5414  16FE  0876               	movf	___llmod@dividend+2,w
  5415  16FF  00F2               	movwf	?___llmod+2
  5416  1700  0875               	movf	___llmod@dividend+1,w
  5417  1701  00F1               	movwf	?___llmod+1
  5418  1702  0874               	movf	___llmod@dividend,w
  5419  1703  00F0               	movwf	?___llmod
  5420  1704  0008               	return
  5421  1705                     __end_of___llmod:	
  5422                           
  5423                           	psect	text15
  5424  0800                     __ptext15:	
  5425 ;; *************** function ___lldiv *****************
  5426 ;; Defined at:
  5427 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  divisor         4    0[COMMON] unsigned long 
  5430 ;;  dividend        4    4[COMMON] unsigned long 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  quotient        4    9[COMMON] unsigned long 
  5433 ;;  counter         1   13[COMMON] unsigned char 
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  4    0[COMMON] unsigned long 
  5436 ;; Registers used:
  5437 ;;		wreg, status,2, status,0
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5443 ;;      Params:         8       0       0       0       0       0       0       0
  5444 ;;      Locals:         5       0       0       0       0       0       0       0
  5445 ;;      Temps:          1       0       0       0       0       0       0       0
  5446 ;;      Totals:        14       0       0       0       0       0       0       0
  5447 ;;Total ram usage:       14 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_sprintf
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           
  5457                           ;psect for function ___lldiv
  5458  0800                     ___lldiv:	
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5462  0800  3000               	movlw	0
  5463  0801  00FC               	movwf	___lldiv@quotient+3
  5464  0802  3000               	movlw	0
  5465  0803  00FB               	movwf	___lldiv@quotient+2
  5466  0804  3000               	movlw	0
  5467  0805  00FA               	movwf	___lldiv@quotient+1
  5468  0806  3000               	movlw	0
  5469  0807  00F9               	movwf	___lldiv@quotient
  5470  0808  0873               	movf	___lldiv@divisor+3,w
  5471  0809  0472               	iorwf	___lldiv@divisor+2,w
  5472  080A  0471               	iorwf	___lldiv@divisor+1,w
  5473  080B  0470               	iorwf	___lldiv@divisor,w
  5474  080C  1903               	skipnz
  5475  080D  2849               	goto	l2289
  5476  080E  01FD               	clrf	___lldiv@counter
  5477  080F  0AFD               	incf	___lldiv@counter,f
  5478  0810                     l2275:	
  5479  0810  1BF3               	btfsc	___lldiv@divisor+3,7
  5480  0811  281E               	goto	l2277
  5481  0812  3001               	movlw	1
  5482  0813                     u3145:	
  5483  0813  35F0               	lslf	___lldiv@divisor,f
  5484  0814  0DF1               	rlf	___lldiv@divisor+1,f
  5485  0815  0DF2               	rlf	___lldiv@divisor+2,f
  5486  0816  0DF3               	rlf	___lldiv@divisor+3,f
  5487  0817  0B89               	decfsz	9,f
  5488  0818  2813               	goto	u3145
  5489  0819  3001               	movlw	1
  5490  081A  00F8               	movwf	??___lldiv
  5491  081B  0878               	movf	??___lldiv,w
  5492  081C  07FD               	addwf	___lldiv@counter,f
  5493  081D  2810               	goto	l2275
  5494  081E                     l2277:	
  5495  081E  3001               	movlw	1
  5496  081F                     u3165:	
  5497  081F  35F9               	lslf	___lldiv@quotient,f
  5498  0820  0DFA               	rlf	___lldiv@quotient+1,f
  5499  0821  0DFB               	rlf	___lldiv@quotient+2,f
  5500  0822  0DFC               	rlf	___lldiv@quotient+3,f
  5501  0823  0B89               	decfsz	9,f
  5502  0824  281F               	goto	u3165
  5503  0825  0873               	movf	___lldiv@divisor+3,w
  5504  0826  0277               	subwf	___lldiv@dividend+3,w
  5505  0827  1D03               	skipz
  5506  0828  2833               	goto	u3175
  5507  0829  0872               	movf	___lldiv@divisor+2,w
  5508  082A  0276               	subwf	___lldiv@dividend+2,w
  5509  082B  1D03               	skipz
  5510  082C  2833               	goto	u3175
  5511  082D  0871               	movf	___lldiv@divisor+1,w
  5512  082E  0275               	subwf	___lldiv@dividend+1,w
  5513  082F  1D03               	skipz
  5514  0830  2833               	goto	u3175
  5515  0831  0870               	movf	___lldiv@divisor,w
  5516  0832  0274               	subwf	___lldiv@dividend,w
  5517  0833                     u3175:	
  5518  0833  1C03               	skipc
  5519  0834  283E               	goto	l2285
  5520  0835  0870               	movf	___lldiv@divisor,w
  5521  0836  02F4               	subwf	___lldiv@dividend,f
  5522  0837  0871               	movf	___lldiv@divisor+1,w
  5523  0838  3BF5               	subwfb	___lldiv@dividend+1,f
  5524  0839  0872               	movf	___lldiv@divisor+2,w
  5525  083A  3BF6               	subwfb	___lldiv@dividend+2,f
  5526  083B  0873               	movf	___lldiv@divisor+3,w
  5527  083C  3BF7               	subwfb	___lldiv@dividend+3,f
  5528  083D  1479               	bsf	___lldiv@quotient,0
  5529  083E                     l2285:	
  5530  083E  3001               	movlw	1
  5531  083F                     u3185:	
  5532  083F  36F3               	lsrf	___lldiv@divisor+3,f
  5533  0840  0CF2               	rrf	___lldiv@divisor+2,f
  5534  0841  0CF1               	rrf	___lldiv@divisor+1,f
  5535  0842  0CF0               	rrf	___lldiv@divisor,f
  5536  0843  0B89               	decfsz	9,f
  5537  0844  283F               	goto	u3185
  5538  0845  3001               	movlw	1
  5539  0846  02FD               	subwf	___lldiv@counter,f
  5540  0847  1D03               	btfss	3,2
  5541  0848  281E               	goto	l2277
  5542  0849                     l2289:	
  5543  0849  087C               	movf	___lldiv@quotient+3,w
  5544  084A  00F3               	movwf	?___lldiv+3
  5545  084B  087B               	movf	___lldiv@quotient+2,w
  5546  084C  00F2               	movwf	?___lldiv+2
  5547  084D  087A               	movf	___lldiv@quotient+1,w
  5548  084E  00F1               	movwf	?___lldiv+1
  5549  084F  0879               	movf	___lldiv@quotient,w
  5550  0850  00F0               	movwf	?___lldiv
  5551  0851  0008               	return
  5552  0852                     __end_of___lldiv:	
  5553                           
  5554                           	psect	text16
  5555  0852                     __ptext16:	
  5556 ;; *************** function ___fttol *****************
  5557 ;; Defined at:
  5558 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  f1              3   41[BANK0 ] float 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  lval            4   50[BANK0 ] unsigned long 
  5563 ;;  exp1            1   54[BANK0 ] unsigned char 
  5564 ;;  sign1           1   49[BANK0 ] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  4   41[BANK0 ] long 
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5574 ;;      Params:         0       4       0       0       0       0       0       0
  5575 ;;      Locals:         0       6       0       0       0       0       0       0
  5576 ;;      Temps:          0       4       0       0       0       0       0       0
  5577 ;;      Totals:         0      14       0       0       0       0       0       0
  5578 ;;Total ram usage:       14 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		_sprintf
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function ___fttol
  5589  0852                     ___fttol:	
  5590                           
  5591                           ;incstack = 0
  5592                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5593  0852  0020               	movlb	0	; select bank0
  5594  0853  0849               	movf	___fttol@f1,w
  5595  0854  00CD               	movwf	??___fttol
  5596  0855  084A               	movf	___fttol@f1+1,w
  5597  0856  00CE               	movwf	??___fttol+1
  5598  0857  084B               	movf	___fttol@f1+2,w
  5599  0858  00CF               	movwf	??___fttol+2
  5600  0859  1003               	clrc
  5601  085A  0D4E               	rlf	??___fttol+1,w
  5602  085B  0D4F               	rlf	??___fttol+2,w
  5603  085C  00D0               	movwf	??___fttol+3
  5604  085D  0850               	movf	??___fttol+3,w
  5605  085E  00D6               	movwf	___fttol@exp1
  5606  085F  08D6               	movf	___fttol@exp1,f
  5607  0860  1D03               	skipz
  5608  0861  286B               	goto	l2231
  5609  0862  3000               	movlw	0
  5610  0863  00CC               	movwf	?___fttol+3
  5611  0864  3000               	movlw	0
  5612  0865  00CB               	movwf	?___fttol+2
  5613  0866  3000               	movlw	0
  5614  0867  00CA               	movwf	?___fttol+1
  5615  0868  3000               	movlw	0
  5616  0869  00C9               	movwf	?___fttol
  5617  086A  0008               	return
  5618  086B                     l2231:	
  5619  086B  0849               	movf	___fttol@f1,w
  5620  086C  00CD               	movwf	??___fttol
  5621  086D  084A               	movf	___fttol@f1+1,w
  5622  086E  00CE               	movwf	??___fttol+1
  5623  086F  084B               	movf	___fttol@f1+2,w
  5624  0870  00CF               	movwf	??___fttol+2
  5625  0871  3017               	movlw	23
  5626  0872                     u3045:	
  5627  0872  36CF               	lsrf	??___fttol+2,f
  5628  0873  0CCE               	rrf	??___fttol+1,f
  5629  0874  0CCD               	rrf	??___fttol,f
  5630  0875  0B89               	decfsz	9,f
  5631  0876  2872               	goto	u3045
  5632  0877  084D               	movf	??___fttol,w
  5633  0878  00D0               	movwf	??___fttol+3
  5634  0879  0850               	movf	??___fttol+3,w
  5635  087A  00D1               	movwf	___fttol@sign1
  5636  087B  17CA               	bsf	___fttol@f1+1,7
  5637  087C  30FF               	movlw	255
  5638  087D  05C9               	andwf	___fttol@f1,f
  5639  087E  30FF               	movlw	255
  5640  087F  05CA               	andwf	___fttol@f1+1,f
  5641  0880  3000               	movlw	0
  5642  0881  05CB               	andwf	___fttol@f1+2,f
  5643  0882  0849               	movf	___fttol@f1,w
  5644  0883  00D2               	movwf	___fttol@lval
  5645  0884  084A               	movf	___fttol@f1+1,w
  5646  0885  00D3               	movwf	___fttol@lval+1
  5647  0886  084B               	movf	___fttol@f1+2,w
  5648  0887  00D4               	movwf	___fttol@lval+2
  5649  0888  01D5               	clrf	___fttol@lval+3
  5650  0889  308E               	movlw	142
  5651  088A  02D6               	subwf	___fttol@exp1,f
  5652  088B  1FD6               	btfss	___fttol@exp1,7
  5653  088C  28A9               	goto	l2251
  5654  088D  0856               	movf	___fttol@exp1,w
  5655  088E  3A80               	xorlw	128
  5656  088F  3E8F               	addlw	143
  5657  0890  1803               	skipnc
  5658  0891  289B               	goto	l2249
  5659  0892  3000               	movlw	0
  5660  0893  00CC               	movwf	?___fttol+3
  5661  0894  3000               	movlw	0
  5662  0895  00CB               	movwf	?___fttol+2
  5663  0896  3000               	movlw	0
  5664  0897  00CA               	movwf	?___fttol+1
  5665  0898  3000               	movlw	0
  5666  0899  00C9               	movwf	?___fttol
  5667  089A  0008               	return
  5668  089B                     l2249:	
  5669  089B  3001               	movlw	1
  5670  089C                     u3075:	
  5671  089C  36D5               	lsrf	___fttol@lval+3,f
  5672  089D  0CD4               	rrf	___fttol@lval+2,f
  5673  089E  0CD3               	rrf	___fttol@lval+1,f
  5674  089F  0CD2               	rrf	___fttol@lval,f
  5675  08A0  0B89               	decfsz	9,f
  5676  08A1  289C               	goto	u3075
  5677  08A2  3001               	movlw	1
  5678  08A3  00CD               	movwf	??___fttol
  5679  08A4  084D               	movf	??___fttol,w
  5680  08A5  07D6               	addwf	___fttol@exp1,f
  5681  08A6  1903               	btfsc	3,2
  5682  08A7  28C2               	goto	l2261
  5683  08A8  289B               	goto	l2249
  5684  08A9                     l2251:	
  5685  08A9  3018               	movlw	24
  5686  08AA  0256               	subwf	___fttol@exp1,w
  5687  08AB  1C03               	skipc
  5688  08AC  28BF               	goto	l2259
  5689  08AD  3000               	movlw	0
  5690  08AE  00CC               	movwf	?___fttol+3
  5691  08AF  3000               	movlw	0
  5692  08B0  00CB               	movwf	?___fttol+2
  5693  08B1  3000               	movlw	0
  5694  08B2  00CA               	movwf	?___fttol+1
  5695  08B3  3000               	movlw	0
  5696  08B4  00C9               	movwf	?___fttol
  5697  08B5  0008               	return
  5698  08B6                     l2257:	
  5699  08B6  3001               	movlw	1
  5700  08B7                     u3105:	
  5701  08B7  35D2               	lslf	___fttol@lval,f
  5702  08B8  0DD3               	rlf	___fttol@lval+1,f
  5703  08B9  0DD4               	rlf	___fttol@lval+2,f
  5704  08BA  0DD5               	rlf	___fttol@lval+3,f
  5705  08BB  0B89               	decfsz	9,f
  5706  08BC  28B7               	goto	u3105
  5707  08BD  3001               	movlw	1
  5708  08BE  02D6               	subwf	___fttol@exp1,f
  5709  08BF                     l2259:	
  5710  08BF  08D6               	movf	___fttol@exp1,f
  5711  08C0  1D03               	skipz
  5712  08C1  28B6               	goto	l2257
  5713  08C2                     l2261:	
  5714  08C2  0851               	movf	___fttol@sign1,w
  5715  08C3  1903               	btfsc	3,2
  5716  08C4  28D0               	goto	l2265
  5717  08C5  09D2               	comf	___fttol@lval,f
  5718  08C6  09D3               	comf	___fttol@lval+1,f
  5719  08C7  09D4               	comf	___fttol@lval+2,f
  5720  08C8  09D5               	comf	___fttol@lval+3,f
  5721  08C9  0AD2               	incf	___fttol@lval,f
  5722  08CA  1903               	skipnz
  5723  08CB  0AD3               	incf	___fttol@lval+1,f
  5724  08CC  1903               	skipnz
  5725  08CD  0AD4               	incf	___fttol@lval+2,f
  5726  08CE  1903               	skipnz
  5727  08CF  0AD5               	incf	___fttol@lval+3,f
  5728  08D0                     l2265:	
  5729  08D0  0855               	movf	___fttol@lval+3,w
  5730  08D1  00CC               	movwf	?___fttol+3
  5731  08D2  0854               	movf	___fttol@lval+2,w
  5732  08D3  00CB               	movwf	?___fttol+2
  5733  08D4  0853               	movf	___fttol@lval+1,w
  5734  08D5  00CA               	movwf	?___fttol+1
  5735  08D6  0852               	movf	___fttol@lval,w
  5736  08D7  00C9               	movwf	?___fttol
  5737  08D8  0008               	return
  5738  08D9                     __end_of___fttol:	
  5739                           
  5740                           	psect	text17
  5741  158E                     __ptext17:	
  5742 ;; *************** function ___ftsub *****************
  5743 ;; Defined at:
  5744 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  f2              3   59[BANK0 ] float 
  5747 ;;  f1              3   62[BANK0 ] float 
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;		None
  5750 ;; Return value:  Size  Location     Type
  5751 ;;                  3   59[BANK0 ] float 
  5752 ;; Registers used:
  5753 ;;		wreg, status,2, status,0, pclath, cstack
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5759 ;;      Params:         0       6       0       0       0       0       0       0
  5760 ;;      Locals:         0       0       0       0       0       0       0       0
  5761 ;;      Temps:          0       0       0       0       0       0       0       0
  5762 ;;      Totals:         0       6       0       0       0       0       0       0
  5763 ;;Total ram usage:        6 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    2
  5766 ;; This function calls:
  5767 ;;		___ftadd
  5768 ;; This function is called by:
  5769 ;;		_sprintf
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           
  5774                           ;psect for function ___ftsub
  5775  158E                     ___ftsub:	
  5776                           
  5777                           ;incstack = 0
  5778                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5779  158E  3080               	movlw	128
  5780  158F  0020               	movlb	0	; select bank0
  5781  1590  06DD               	xorwf	___ftsub@f2+2,f
  5782  1591  085E               	movf	___ftsub@f1,w
  5783  1592  00CE               	movwf	___ftadd@f1
  5784  1593  085F               	movf	___ftsub@f1+1,w
  5785  1594  00CF               	movwf	___ftadd@f1+1
  5786  1595  0860               	movf	___ftsub@f1+2,w
  5787  1596  00D0               	movwf	___ftadd@f1+2
  5788  1597  085B               	movf	___ftsub@f2,w
  5789  1598  00D1               	movwf	___ftadd@f2
  5790  1599  085C               	movf	___ftsub@f2+1,w
  5791  159A  00D2               	movwf	___ftadd@f2+1
  5792  159B  085D               	movf	___ftsub@f2+2,w
  5793  159C  00D3               	movwf	___ftadd@f2+2
  5794  159D  318C  24A5         	fcall	___ftadd
  5795  159F  0020               	movlb	0	; select bank0
  5796  15A0  084E               	movf	?___ftadd,w
  5797  15A1  00DB               	movwf	?___ftsub
  5798  15A2  084F               	movf	?___ftadd+1,w
  5799  15A3  00DC               	movwf	?___ftsub+1
  5800  15A4  0850               	movf	?___ftadd+2,w
  5801  15A5  00DD               	movwf	?___ftsub+2
  5802  15A6  0008               	return
  5803  15A7                     __end_of___ftsub:	
  5804                           
  5805                           	psect	text18
  5806  0CA5                     __ptext18:	
  5807 ;; *************** function ___ftadd *****************
  5808 ;; Defined at:
  5809 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  f1              3   46[BANK0 ] float 
  5812 ;;  f2              3   49[BANK0 ] float 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  exp1            1   58[BANK0 ] unsigned char 
  5815 ;;  exp2            1   57[BANK0 ] unsigned char 
  5816 ;;  sign            1   56[BANK0 ] unsigned char 
  5817 ;; Return value:  Size  Location     Type
  5818 ;;                  3   46[BANK0 ] float 
  5819 ;; Registers used:
  5820 ;;		wreg, status,2, status,0, pclath, cstack
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5826 ;;      Params:         0       6       0       0       0       0       0       0
  5827 ;;      Locals:         0       3       0       0       0       0       0       0
  5828 ;;      Temps:          0       4       0       0       0       0       0       0
  5829 ;;      Totals:         0      13       0       0       0       0       0       0
  5830 ;;Total ram usage:       13 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; Hardware stack levels required when called:    1
  5833 ;; This function calls:
  5834 ;;		___ftpack
  5835 ;; This function is called by:
  5836 ;;		_sprintf
  5837 ;;		___ftsub
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           
  5842                           ;psect for function ___ftadd
  5843  0CA5                     ___ftadd:	
  5844                           
  5845                           ;incstack = 0
  5846                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5847  0CA5  0020               	movlb	0	; select bank0
  5848  0CA6  084E               	movf	___ftadd@f1,w
  5849  0CA7  00D4               	movwf	??___ftadd
  5850  0CA8  084F               	movf	___ftadd@f1+1,w
  5851  0CA9  00D5               	movwf	??___ftadd+1
  5852  0CAA  0850               	movf	___ftadd@f1+2,w
  5853  0CAB  00D6               	movwf	??___ftadd+2
  5854  0CAC  1003               	clrc
  5855  0CAD  0D55               	rlf	??___ftadd+1,w
  5856  0CAE  0D56               	rlf	??___ftadd+2,w
  5857  0CAF  00D7               	movwf	??___ftadd+3
  5858  0CB0  0857               	movf	??___ftadd+3,w
  5859  0CB1  00DA               	movwf	___ftadd@exp1
  5860  0CB2  0851               	movf	___ftadd@f2,w
  5861  0CB3  00D4               	movwf	??___ftadd
  5862  0CB4  0852               	movf	___ftadd@f2+1,w
  5863  0CB5  00D5               	movwf	??___ftadd+1
  5864  0CB6  0853               	movf	___ftadd@f2+2,w
  5865  0CB7  00D6               	movwf	??___ftadd+2
  5866  0CB8  1003               	clrc
  5867  0CB9  0D55               	rlf	??___ftadd+1,w
  5868  0CBA  0D56               	rlf	??___ftadd+2,w
  5869  0CBB  00D7               	movwf	??___ftadd+3
  5870  0CBC  0857               	movf	??___ftadd+3,w
  5871  0CBD  00D9               	movwf	___ftadd@exp2
  5872  0CBE  085A               	movf	___ftadd@exp1,w
  5873  0CBF  1903               	btfsc	3,2
  5874  0CC0  2CCD               	goto	l1843
  5875  0CC1  0859               	movf	___ftadd@exp2,w
  5876  0CC2  025A               	subwf	___ftadd@exp1,w
  5877  0CC3  1803               	skipnc
  5878  0CC4  2CD4               	goto	l1847
  5879  0CC5  035A               	decf	___ftadd@exp1,w
  5880  0CC6  3AFF               	xorlw	255
  5881  0CC7  0759               	addwf	___ftadd@exp2,w
  5882  0CC8  00D4               	movwf	??___ftadd
  5883  0CC9  3019               	movlw	25
  5884  0CCA  0254               	subwf	??___ftadd,w
  5885  0CCB  1C03               	skipc
  5886  0CCC  2CD4               	goto	l1847
  5887  0CCD                     l1843:	
  5888  0CCD  0851               	movf	___ftadd@f2,w
  5889  0CCE  00CE               	movwf	?___ftadd
  5890  0CCF  0852               	movf	___ftadd@f2+1,w
  5891  0CD0  00CF               	movwf	?___ftadd+1
  5892  0CD1  0853               	movf	___ftadd@f2+2,w
  5893  0CD2  00D0               	movwf	?___ftadd+2
  5894  0CD3  0008               	return
  5895  0CD4                     l1847:	
  5896  0CD4  0859               	movf	___ftadd@exp2,w
  5897  0CD5  1903               	btfsc	3,2
  5898  0CD6  0008               	return
  5899  0CD7  085A               	movf	___ftadd@exp1,w
  5900  0CD8  0259               	subwf	___ftadd@exp2,w
  5901  0CD9  1803               	skipnc
  5902  0CDA  2CE3               	goto	l1853
  5903  0CDB  0359               	decf	___ftadd@exp2,w
  5904  0CDC  3AFF               	xorlw	255
  5905  0CDD  075A               	addwf	___ftadd@exp1,w
  5906  0CDE  00D4               	movwf	??___ftadd
  5907  0CDF  3019               	movlw	25
  5908  0CE0  0254               	subwf	??___ftadd,w
  5909  0CE1  1803               	btfsc	3,0
  5910  0CE2  0008               	return
  5911  0CE3                     l1853:	
  5912  0CE3  3006               	movlw	6
  5913  0CE4  00D4               	movwf	??___ftadd
  5914  0CE5  0854               	movf	??___ftadd,w
  5915  0CE6  00D8               	movwf	___ftadd@sign
  5916  0CE7  1BD0               	btfsc	___ftadd@f1+2,7
  5917  0CE8  17D8               	bsf	___ftadd@sign,7
  5918  0CE9  1BD3               	btfsc	___ftadd@f2+2,7
  5919  0CEA  1758               	bsf	___ftadd@sign,6
  5920  0CEB  17CF               	bsf	___ftadd@f1+1,7
  5921  0CEC  30FF               	movlw	255
  5922  0CED  05CE               	andwf	___ftadd@f1,f
  5923  0CEE  30FF               	movlw	255
  5924  0CEF  05CF               	andwf	___ftadd@f1+1,f
  5925  0CF0  3000               	movlw	0
  5926  0CF1  05D0               	andwf	___ftadd@f1+2,f
  5927  0CF2  17D2               	bsf	___ftadd@f2+1,7
  5928  0CF3  30FF               	movlw	255
  5929  0CF4  05D1               	andwf	___ftadd@f2,f
  5930  0CF5  30FF               	movlw	255
  5931  0CF6  05D2               	andwf	___ftadd@f2+1,f
  5932  0CF7  3000               	movlw	0
  5933  0CF8  05D3               	andwf	___ftadd@f2+2,f
  5934  0CF9  0859               	movf	___ftadd@exp2,w
  5935  0CFA  025A               	subwf	___ftadd@exp1,w
  5936  0CFB  1803               	skipnc
  5937  0CFC  2D1F               	goto	l1875
  5938  0CFD                     l1865:	
  5939  0CFD  3001               	movlw	1
  5940  0CFE                     u2295:	
  5941  0CFE  35D1               	lslf	___ftadd@f2,f
  5942  0CFF  0DD2               	rlf	___ftadd@f2+1,f
  5943  0D00  0DD3               	rlf	___ftadd@f2+2,f
  5944  0D01  0B89               	decfsz	9,f
  5945  0D02  2CFE               	goto	u2295
  5946  0D03  3001               	movlw	1
  5947  0D04  02D9               	subwf	___ftadd@exp2,f
  5948  0D05  0859               	movf	___ftadd@exp2,w
  5949  0D06  065A               	xorwf	___ftadd@exp1,w
  5950  0D07  1903               	skipnz
  5951  0D08  2D1A               	goto	l1873
  5952  0D09  3001               	movlw	1
  5953  0D0A  02D8               	subwf	___ftadd@sign,f
  5954  0D0B  0858               	movf	___ftadd@sign,w
  5955  0D0C  3907               	andlw	7
  5956  0D0D  1903               	btfsc	3,2
  5957  0D0E  2D1A               	goto	l1873
  5958  0D0F  2CFD               	goto	l1865
  5959  0D10                     l1871:	
  5960  0D10  3001               	movlw	1
  5961  0D11                     u2325:	
  5962  0D11  36D0               	lsrf	___ftadd@f1+2,f
  5963  0D12  0CCF               	rrf	___ftadd@f1+1,f
  5964  0D13  0CCE               	rrf	___ftadd@f1,f
  5965  0D14  0B89               	decfsz	9,f
  5966  0D15  2D11               	goto	u2325
  5967  0D16  3001               	movlw	1
  5968  0D17  00D4               	movwf	??___ftadd
  5969  0D18  0854               	movf	??___ftadd,w
  5970  0D19  07DA               	addwf	___ftadd@exp1,f
  5971  0D1A                     l1873:	
  5972  0D1A  085A               	movf	___ftadd@exp1,w
  5973  0D1B  0659               	xorwf	___ftadd@exp2,w
  5974  0D1C  1903               	btfsc	3,2
  5975  0D1D  2D44               	goto	l463
  5976  0D1E  2D10               	goto	l1871
  5977  0D1F                     l1875:	
  5978  0D1F  085A               	movf	___ftadd@exp1,w
  5979  0D20  0259               	subwf	___ftadd@exp2,w
  5980  0D21  1803               	skipnc
  5981  0D22  2D44               	goto	l463
  5982  0D23                     l1877:	
  5983  0D23  3001               	movlw	1
  5984  0D24                     u2355:	
  5985  0D24  35CE               	lslf	___ftadd@f1,f
  5986  0D25  0DCF               	rlf	___ftadd@f1+1,f
  5987  0D26  0DD0               	rlf	___ftadd@f1+2,f
  5988  0D27  0B89               	decfsz	9,f
  5989  0D28  2D24               	goto	u2355
  5990  0D29  3001               	movlw	1
  5991  0D2A  02DA               	subwf	___ftadd@exp1,f
  5992  0D2B  0859               	movf	___ftadd@exp2,w
  5993  0D2C  065A               	xorwf	___ftadd@exp1,w
  5994  0D2D  1903               	skipnz
  5995  0D2E  2D40               	goto	l1885
  5996  0D2F  3001               	movlw	1
  5997  0D30  02D8               	subwf	___ftadd@sign,f
  5998  0D31  0858               	movf	___ftadd@sign,w
  5999  0D32  3907               	andlw	7
  6000  0D33  1903               	btfsc	3,2
  6001  0D34  2D40               	goto	l1885
  6002  0D35  2D23               	goto	l1877
  6003  0D36                     l1883:	
  6004  0D36  3001               	movlw	1
  6005  0D37                     u2385:	
  6006  0D37  36D3               	lsrf	___ftadd@f2+2,f
  6007  0D38  0CD2               	rrf	___ftadd@f2+1,f
  6008  0D39  0CD1               	rrf	___ftadd@f2,f
  6009  0D3A  0B89               	decfsz	9,f
  6010  0D3B  2D37               	goto	u2385
  6011  0D3C  3001               	movlw	1
  6012  0D3D  00D4               	movwf	??___ftadd
  6013  0D3E  0854               	movf	??___ftadd,w
  6014  0D3F  07D9               	addwf	___ftadd@exp2,f
  6015  0D40                     l1885:	
  6016  0D40  085A               	movf	___ftadd@exp1,w
  6017  0D41  0659               	xorwf	___ftadd@exp2,w
  6018  0D42  1D03               	skipz
  6019  0D43  2D36               	goto	l1883
  6020  0D44                     l463:	
  6021  0D44  1FD8               	btfss	___ftadd@sign,7
  6022  0D45  2D56               	goto	l1889
  6023  0D46  30FF               	movlw	255
  6024  0D47  06CE               	xorwf	___ftadd@f1,f
  6025  0D48  30FF               	movlw	255
  6026  0D49  06CF               	xorwf	___ftadd@f1+1,f
  6027  0D4A  30FF               	movlw	255
  6028  0D4B  06D0               	xorwf	___ftadd@f1+2,f
  6029  0D4C  3001               	movlw	1
  6030  0D4D  07CE               	addwf	___ftadd@f1,f
  6031  0D4E  3000               	movlw	0
  6032  0D4F  1803               	skipnc
  6033  0D50  3001               	movlw	1
  6034  0D51  07CF               	addwf	___ftadd@f1+1,f
  6035  0D52  3000               	movlw	0
  6036  0D53  1803               	skipnc
  6037  0D54  3001               	movlw	1
  6038  0D55  07D0               	addwf	___ftadd@f1+2,f
  6039  0D56                     l1889:	
  6040  0D56  1F58               	btfss	___ftadd@sign,6
  6041  0D57  2D68               	goto	l1893
  6042  0D58  30FF               	movlw	255
  6043  0D59  06D1               	xorwf	___ftadd@f2,f
  6044  0D5A  30FF               	movlw	255
  6045  0D5B  06D2               	xorwf	___ftadd@f2+1,f
  6046  0D5C  30FF               	movlw	255
  6047  0D5D  06D3               	xorwf	___ftadd@f2+2,f
  6048  0D5E  3001               	movlw	1
  6049  0D5F  07D1               	addwf	___ftadd@f2,f
  6050  0D60  3000               	movlw	0
  6051  0D61  1803               	skipnc
  6052  0D62  3001               	movlw	1
  6053  0D63  07D2               	addwf	___ftadd@f2+1,f
  6054  0D64  3000               	movlw	0
  6055  0D65  1803               	skipnc
  6056  0D66  3001               	movlw	1
  6057  0D67  07D3               	addwf	___ftadd@f2+2,f
  6058  0D68                     l1893:	
  6059  0D68  01D8               	clrf	___ftadd@sign
  6060  0D69  084E               	movf	___ftadd@f1,w
  6061  0D6A  07D1               	addwf	___ftadd@f2,f
  6062  0D6B  084F               	movf	___ftadd@f1+1,w
  6063  0D6C  3DD2               	addwfc	___ftadd@f2+1,f
  6064  0D6D  0850               	movf	___ftadd@f1+2,w
  6065  0D6E  3DD3               	addwfc	___ftadd@f2+2,f
  6066  0D6F  1FD3               	btfss	___ftadd@f2+2,7
  6067  0D70  2D83               	goto	l1903
  6068  0D71  30FF               	movlw	255
  6069  0D72  06D1               	xorwf	___ftadd@f2,f
  6070  0D73  30FF               	movlw	255
  6071  0D74  06D2               	xorwf	___ftadd@f2+1,f
  6072  0D75  30FF               	movlw	255
  6073  0D76  06D3               	xorwf	___ftadd@f2+2,f
  6074  0D77  3001               	movlw	1
  6075  0D78  07D1               	addwf	___ftadd@f2,f
  6076  0D79  3000               	movlw	0
  6077  0D7A  1803               	skipnc
  6078  0D7B  3001               	movlw	1
  6079  0D7C  07D2               	addwf	___ftadd@f2+1,f
  6080  0D7D  3000               	movlw	0
  6081  0D7E  1803               	skipnc
  6082  0D7F  3001               	movlw	1
  6083  0D80  07D3               	addwf	___ftadd@f2+2,f
  6084  0D81  01D8               	clrf	___ftadd@sign
  6085  0D82  0AD8               	incf	___ftadd@sign,f
  6086  0D83                     l1903:	
  6087  0D83  0851               	movf	___ftadd@f2,w
  6088  0D84  00F0               	movwf	___ftpack@arg
  6089  0D85  0852               	movf	___ftadd@f2+1,w
  6090  0D86  00F1               	movwf	___ftpack@arg+1
  6091  0D87  0853               	movf	___ftadd@f2+2,w
  6092  0D88  00F2               	movwf	___ftpack@arg+2
  6093  0D89  085A               	movf	___ftadd@exp1,w
  6094  0D8A  00D4               	movwf	??___ftadd
  6095  0D8B  0854               	movf	??___ftadd,w
  6096  0D8C  00F3               	movwf	___ftpack@exp
  6097  0D8D  0858               	movf	___ftadd@sign,w
  6098  0D8E  00D5               	movwf	??___ftadd+1
  6099  0D8F  0855               	movf	??___ftadd+1,w
  6100  0D90  00F4               	movwf	___ftpack@sign
  6101  0D91  3197  27A0         	fcall	___ftpack
  6102  0D93  0870               	movf	?___ftpack,w
  6103  0D94  0020               	movlb	0	; select bank0
  6104  0D95  00CE               	movwf	?___ftadd
  6105  0D96  0871               	movf	?___ftpack+1,w
  6106  0D97  00CF               	movwf	?___ftadd+1
  6107  0D98  0872               	movf	?___ftpack+2,w
  6108  0D99  00D0               	movwf	?___ftadd+2
  6109  0D9A  0008               	return
  6110  0D9B                     __end_of___ftadd:	
  6111                           
  6112                           	psect	text19
  6113  1586                     __ptext19:	
  6114 ;; *************** function ___ftneg *****************
  6115 ;; Defined at:
  6116 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  f1              3    0[COMMON] float 
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;		None
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  3    0[COMMON] float 
  6123 ;; Registers used:
  6124 ;;		wreg
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6130 ;;      Params:         3       0       0       0       0       0       0       0
  6131 ;;      Locals:         0       0       0       0       0       0       0       0
  6132 ;;      Temps:          0       0       0       0       0       0       0       0
  6133 ;;      Totals:         3       0       0       0       0       0       0       0
  6134 ;;Total ram usage:        3 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; This function calls:
  6137 ;;		Nothing
  6138 ;; This function is called by:
  6139 ;;		_sprintf
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           
  6144                           ;psect for function ___ftneg
  6145  1586                     ___ftneg:	
  6146                           
  6147                           ;incstack = 0
  6148                           ; Regs used in ___ftneg: [wreg]
  6149  1586  0872               	movf	___ftneg@f1+2,w
  6150  1587  0471               	iorwf	___ftneg@f1+1,w
  6151  1588  0470               	iorwf	___ftneg@f1,w
  6152  1589  1903               	skipnz
  6153  158A  0008               	return
  6154  158B  3080               	movlw	128
  6155  158C  06F2               	xorwf	___ftneg@f1+2,f
  6156  158D  0008               	return
  6157  158E                     __end_of___ftneg:	
  6158                           
  6159                           	psect	text20
  6160  1649                     __ptext20:	
  6161 ;; *************** function ___ftge *****************
  6162 ;; Defined at:
  6163 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  ff1             3    0[COMMON] float 
  6166 ;;  ff2             3    3[COMMON] float 
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;		None               void
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6178 ;;      Params:         6       0       0       0       0       0       0       0
  6179 ;;      Locals:         0       0       0       0       0       0       0       0
  6180 ;;      Temps:          3       0       0       0       0       0       0       0
  6181 ;;      Totals:         9       0       0       0       0       0       0       0
  6182 ;;Total ram usage:        9 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; This function calls:
  6185 ;;		Nothing
  6186 ;; This function is called by:
  6187 ;;		_sprintf
  6188 ;; This function uses a non-reentrant model
  6189 ;;
  6190                           
  6191                           
  6192                           ;psect for function ___ftge
  6193  1649                     ___ftge:	
  6194                           
  6195                           ;incstack = 0
  6196                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6197  1649  1FF2               	btfss	___ftge@ff1+2,7
  6198  164A  2E5F               	goto	l2195
  6199  164B  0970               	comf	___ftge@ff1,w
  6200  164C  00F6               	movwf	??___ftge
  6201  164D  0971               	comf	___ftge@ff1+1,w
  6202  164E  00F7               	movwf	??___ftge+1
  6203  164F  0972               	comf	___ftge@ff1+2,w
  6204  1650  00F8               	movwf	??___ftge+2
  6205  1651  0AF6               	incf	??___ftge,f
  6206  1652  1903               	skipnz
  6207  1653  0AF7               	incf	??___ftge+1,f
  6208  1654  1903               	skipnz
  6209  1655  0AF8               	incf	??___ftge+2,f
  6210  1656  3000               	movlw	0
  6211  1657  0776               	addwf	??___ftge,w
  6212  1658  00F0               	movwf	___ftge@ff1
  6213  1659  3000               	movlw	0
  6214  165A  3D77               	addwfc	??___ftge+1,w
  6215  165B  00F1               	movwf	___ftge@ff1+1
  6216  165C  3080               	movlw	128
  6217  165D  3D78               	addwfc	??___ftge+2,w
  6218  165E  00F2               	movwf	___ftge@ff1+2
  6219  165F                     l2195:	
  6220  165F  1FF5               	btfss	___ftge@ff2+2,7
  6221  1660  2E75               	goto	l2199
  6222  1661  0973               	comf	___ftge@ff2,w
  6223  1662  00F6               	movwf	??___ftge
  6224  1663  0974               	comf	___ftge@ff2+1,w
  6225  1664  00F7               	movwf	??___ftge+1
  6226  1665  0975               	comf	___ftge@ff2+2,w
  6227  1666  00F8               	movwf	??___ftge+2
  6228  1667  0AF6               	incf	??___ftge,f
  6229  1668  1903               	skipnz
  6230  1669  0AF7               	incf	??___ftge+1,f
  6231  166A  1903               	skipnz
  6232  166B  0AF8               	incf	??___ftge+2,f
  6233  166C  3000               	movlw	0
  6234  166D  0776               	addwf	??___ftge,w
  6235  166E  00F3               	movwf	___ftge@ff2
  6236  166F  3000               	movlw	0
  6237  1670  3D77               	addwfc	??___ftge+1,w
  6238  1671  00F4               	movwf	___ftge@ff2+1
  6239  1672  3080               	movlw	128
  6240  1673  3D78               	addwfc	??___ftge+2,w
  6241  1674  00F5               	movwf	___ftge@ff2+2
  6242  1675                     l2199:	
  6243  1675  3080               	movlw	128
  6244  1676  06F2               	xorwf	___ftge@ff1+2,f
  6245  1677  3080               	movlw	128
  6246  1678  06F5               	xorwf	___ftge@ff2+2,f
  6247  1679  0875               	movf	___ftge@ff2+2,w
  6248  167A  0272               	subwf	___ftge@ff1+2,w
  6249  167B  1D03               	skipz
  6250  167C  0008               	return
  6251  167D  0874               	movf	___ftge@ff2+1,w
  6252  167E  0271               	subwf	___ftge@ff1+1,w
  6253  167F  1D03               	skipz
  6254  1680  0008               	return
  6255  1681  0873               	movf	___ftge@ff2,w
  6256  1682  0270               	subwf	___ftge@ff1,w
  6257  1683  0008               	return
  6258  1684                     __end_of___ftge:	
  6259                           
  6260                           	psect	text21
  6261  1684                     __ptext21:	
  6262 ;; *************** function _convertir *****************
  6263 ;; Defined at:
  6264 ;;		line 62 in file "principal.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  channel         2    0[COMMON] int 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;  i               2    9[COMMON] int 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  2    0[COMMON] int 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6278 ;;      Params:         2       0       0       0       0       0       0       0
  6279 ;;      Locals:         2       0       0       0       0       0       0       0
  6280 ;;      Temps:          7       0       0       0       0       0       0       0
  6281 ;;      Totals:        11       0       0       0       0       0       0       0
  6282 ;;Total ram usage:       11 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; This function calls:
  6285 ;;		Nothing
  6286 ;; This function is called by:
  6287 ;;		_loop
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           
  6292                           ;psect for function _convertir
  6293  1684                     _convertir:	
  6294                           
  6295                           ;principal.c: 64: int i=0;
  6296                           
  6297                           ;incstack = 0
  6298                           ; Regs used in _convertir: [wreg+status,2+status,0]
  6299  1684  01F9               	clrf	convertir@i
  6300  1685  01FA               	clrf	convertir@i+1
  6301                           
  6302                           ;principal.c: 65: ADRESL=0x00;
  6303  1686  0021               	movlb	1	; select bank1
  6304  1687  019B               	clrf	27	;volatile
  6305                           
  6306                           ;principal.c: 66: ADRESH=0x00;
  6307  1688  019C               	clrf	28	;volatile
  6308                           
  6309                           ;principal.c: 67: ADCON0bits.CHS=channel;
  6310  1689  0870               	movf	convertir@channel,w
  6311  168A  00F2               	movwf	??_convertir
  6312  168B  0DF2               	rlf	??_convertir,f
  6313  168C  0DF2               	rlf	??_convertir,f
  6314  168D  081D               	movf	29,w	;volatile
  6315  168E  0672               	xorwf	??_convertir,w
  6316  168F  3983               	andlw	-125
  6317  1690  0672               	xorwf	??_convertir,w
  6318  1691  009D               	movwf	29	;volatile
  6319                           
  6320                           ;principal.c: 68: ADCON0bits.ADON=1;
  6321  1692  141D               	bsf	29,0	;volatile
  6322                           
  6323                           ;principal.c: 69: ADCON0bits.GO=1;
  6324  1693  149D               	bsf	29,1	;volatile
  6325                           
  6326                           ;principal.c: 70: _delay((unsigned long)((10)*(1000000/4000.0)));
  6327  1694  3004               	movlw	4
  6328  1695  00F3               	movwf	??_convertir+1
  6329  1696  303D               	movlw	61
  6330  1697  00F2               	movwf	??_convertir
  6331  1698                     u3797:	
  6332  1698  0BF2               	decfsz	??_convertir,f
  6333  1699  2E98               	goto	u3797
  6334  169A  0BF3               	decfsz	??_convertir+1,f
  6335  169B  2E98               	goto	u3797
  6336  169C  3200               	nop2
  6337  169D                     l73:	
  6338                           ;principal.c: 71: while(ADCON0bits.GO);
  6339                           
  6340  169D  0021               	movlb	1	; select bank1
  6341  169E  189D               	btfsc	29,1	;volatile
  6342  169F  2E9D               	goto	l73
  6343                           
  6344                           ;principal.c: 72: ADCON0bits.ADON=0;
  6345  16A0  101D               	bcf	29,0	;volatile
  6346                           
  6347                           ;principal.c: 73: i=ADRESH;
  6348  16A1  081C               	movf	28,w	;volatile
  6349  16A2  00F2               	movwf	??_convertir
  6350  16A3  01F3               	clrf	??_convertir+1
  6351  16A4  0872               	movf	??_convertir,w
  6352  16A5  00F9               	movwf	convertir@i
  6353  16A6  0873               	movf	??_convertir+1,w
  6354  16A7  00FA               	movwf	convertir@i+1
  6355                           
  6356                           ;principal.c: 74: i=(i<<8)|ADRESL;
  6357  16A8  081B               	movf	27,w	;volatile
  6358  16A9  00F2               	movwf	??_convertir
  6359  16AA  01F3               	clrf	??_convertir+1
  6360  16AB  087A               	movf	convertir@i+1,w
  6361  16AC  00F5               	movwf	??_convertir+3
  6362  16AD  0879               	movf	convertir@i,w
  6363  16AE  00F4               	movwf	??_convertir+2
  6364  16AF  0874               	movf	??_convertir+2,w
  6365  16B0  00F5               	movwf	??_convertir+3
  6366  16B1  01F4               	clrf	??_convertir+2
  6367  16B2  0872               	movf	??_convertir,w
  6368  16B3  0474               	iorwf	??_convertir+2,w
  6369  16B4  00F7               	movwf	??_convertir+5
  6370  16B5  0873               	movf	??_convertir+1,w
  6371  16B6  0475               	iorwf	??_convertir+3,w
  6372  16B7  00F8               	movwf	??_convertir+6
  6373  16B8  0877               	movf	??_convertir+5,w
  6374  16B9  00F9               	movwf	convertir@i
  6375  16BA  0878               	movf	??_convertir+6,w
  6376  16BB  00FA               	movwf	convertir@i+1
  6377                           
  6378                           ;principal.c: 75: return i;
  6379  16BC  087A               	movf	convertir@i+1,w
  6380  16BD  01F1               	clrf	?_convertir+1
  6381  16BE  07F1               	addwf	?_convertir+1,f
  6382  16BF  0879               	movf	convertir@i,w
  6383  16C0  01F0               	clrf	?_convertir
  6384  16C1  07F0               	addwf	?_convertir,f
  6385  16C2  0008               	return
  6386  16C3                     __end_of_convertir:	
  6387                           
  6388                           	psect	text22
  6389  0A92                     __ptext22:	
  6390 ;; *************** function ___ftdiv *****************
  6391 ;; Defined at:
  6392 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  f2              3    0[BANK0 ] float 
  6395 ;;  f1              3    3[BANK0 ] float 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  f3              3   11[BANK0 ] float 
  6398 ;;  sign            1   15[BANK0 ] unsigned char 
  6399 ;;  exp             1   14[BANK0 ] unsigned char 
  6400 ;;  cntr            1   10[BANK0 ] unsigned char 
  6401 ;; Return value:  Size  Location     Type
  6402 ;;                  3    0[BANK0 ] float 
  6403 ;; Registers used:
  6404 ;;		wreg, status,2, status,0, pclath, cstack
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6410 ;;      Params:         0       6       0       0       0       0       0       0
  6411 ;;      Locals:         0       6       0       0       0       0       0       0
  6412 ;;      Temps:          0       4       0       0       0       0       0       0
  6413 ;;      Totals:         0      16       0       0       0       0       0       0
  6414 ;;Total ram usage:       16 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    1
  6417 ;; This function calls:
  6418 ;;		___ftpack
  6419 ;; This function is called by:
  6420 ;;		_loop
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function ___ftdiv
  6426  0A92                     ___ftdiv:	
  6427                           
  6428                           ;incstack = 0
  6429                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6430  0A92  0020               	movlb	0	; select bank0
  6431  0A93  0823               	movf	___ftdiv@f1,w
  6432  0A94  00A6               	movwf	??___ftdiv
  6433  0A95  0824               	movf	___ftdiv@f1+1,w
  6434  0A96  00A7               	movwf	??___ftdiv+1
  6435  0A97  0825               	movf	___ftdiv@f1+2,w
  6436  0A98  00A8               	movwf	??___ftdiv+2
  6437  0A99  1003               	clrc
  6438  0A9A  0D27               	rlf	??___ftdiv+1,w
  6439  0A9B  0D28               	rlf	??___ftdiv+2,w
  6440  0A9C  00A9               	movwf	??___ftdiv+3
  6441  0A9D  0829               	movf	??___ftdiv+3,w
  6442  0A9E  00AE               	movwf	___ftdiv@exp
  6443  0A9F  08AE               	movf	___ftdiv@exp,f
  6444  0AA0  1D03               	skipz
  6445  0AA1  2AA9               	goto	l2611
  6446  0AA2  3000               	movlw	0
  6447  0AA3  00A0               	movwf	?___ftdiv
  6448  0AA4  3000               	movlw	0
  6449  0AA5  00A1               	movwf	?___ftdiv+1
  6450  0AA6  3000               	movlw	0
  6451  0AA7  00A2               	movwf	?___ftdiv+2
  6452  0AA8  0008               	return
  6453  0AA9                     l2611:	
  6454  0AA9  0820               	movf	___ftdiv@f2,w
  6455  0AAA  00A6               	movwf	??___ftdiv
  6456  0AAB  0821               	movf	___ftdiv@f2+1,w
  6457  0AAC  00A7               	movwf	??___ftdiv+1
  6458  0AAD  0822               	movf	___ftdiv@f2+2,w
  6459  0AAE  00A8               	movwf	??___ftdiv+2
  6460  0AAF  1003               	clrc
  6461  0AB0  0D27               	rlf	??___ftdiv+1,w
  6462  0AB1  0D28               	rlf	??___ftdiv+2,w
  6463  0AB2  00A9               	movwf	??___ftdiv+3
  6464  0AB3  0829               	movf	??___ftdiv+3,w
  6465  0AB4  00AF               	movwf	___ftdiv@sign
  6466  0AB5  08AF               	movf	___ftdiv@sign,f
  6467  0AB6  1D03               	skipz
  6468  0AB7  2ABF               	goto	l2617
  6469  0AB8  3000               	movlw	0
  6470  0AB9  00A0               	movwf	?___ftdiv
  6471  0ABA  3000               	movlw	0
  6472  0ABB  00A1               	movwf	?___ftdiv+1
  6473  0ABC  3000               	movlw	0
  6474  0ABD  00A2               	movwf	?___ftdiv+2
  6475  0ABE  0008               	return
  6476  0ABF                     l2617:	
  6477  0ABF  3000               	movlw	0
  6478  0AC0  00AB               	movwf	___ftdiv@f3
  6479  0AC1  3000               	movlw	0
  6480  0AC2  00AC               	movwf	___ftdiv@f3+1
  6481  0AC3  3000               	movlw	0
  6482  0AC4  00AD               	movwf	___ftdiv@f3+2
  6483  0AC5  3089               	movlw	137
  6484  0AC6  072F               	addwf	___ftdiv@sign,w
  6485  0AC7  00A6               	movwf	??___ftdiv
  6486  0AC8  0826               	movf	??___ftdiv,w
  6487  0AC9  02AE               	subwf	___ftdiv@exp,f
  6488  0ACA  0823               	movf	___ftdiv@f1,w
  6489  0ACB  00A6               	movwf	??___ftdiv
  6490  0ACC  0824               	movf	___ftdiv@f1+1,w
  6491  0ACD  00A7               	movwf	??___ftdiv+1
  6492  0ACE  0825               	movf	___ftdiv@f1+2,w
  6493  0ACF  00A8               	movwf	??___ftdiv+2
  6494  0AD0  3010               	movlw	16
  6495  0AD1                     u3615:	
  6496  0AD1  36A8               	lsrf	??___ftdiv+2,f
  6497  0AD2  0CA7               	rrf	??___ftdiv+1,f
  6498  0AD3  0CA6               	rrf	??___ftdiv,f
  6499  0AD4  0B89               	decfsz	9,f
  6500  0AD5  2AD1               	goto	u3615
  6501  0AD6  0826               	movf	??___ftdiv,w
  6502  0AD7  00A9               	movwf	??___ftdiv+3
  6503  0AD8  0829               	movf	??___ftdiv+3,w
  6504  0AD9  00AF               	movwf	___ftdiv@sign
  6505  0ADA  0820               	movf	___ftdiv@f2,w
  6506  0ADB  00A6               	movwf	??___ftdiv
  6507  0ADC  0821               	movf	___ftdiv@f2+1,w
  6508  0ADD  00A7               	movwf	??___ftdiv+1
  6509  0ADE  0822               	movf	___ftdiv@f2+2,w
  6510  0ADF  00A8               	movwf	??___ftdiv+2
  6511  0AE0  3010               	movlw	16
  6512  0AE1                     u3625:	
  6513  0AE1  36A8               	lsrf	??___ftdiv+2,f
  6514  0AE2  0CA7               	rrf	??___ftdiv+1,f
  6515  0AE3  0CA6               	rrf	??___ftdiv,f
  6516  0AE4  0B89               	decfsz	9,f
  6517  0AE5  2AE1               	goto	u3625
  6518  0AE6  0826               	movf	??___ftdiv,w
  6519  0AE7  00A9               	movwf	??___ftdiv+3
  6520  0AE8  0829               	movf	??___ftdiv+3,w
  6521  0AE9  06AF               	xorwf	___ftdiv@sign,f
  6522  0AEA  3080               	movlw	128
  6523  0AEB  00A6               	movwf	??___ftdiv
  6524  0AEC  0826               	movf	??___ftdiv,w
  6525  0AED  05AF               	andwf	___ftdiv@sign,f
  6526  0AEE  17A4               	bsf	___ftdiv@f1+1,7
  6527  0AEF  30FF               	movlw	255
  6528  0AF0  05A3               	andwf	___ftdiv@f1,f
  6529  0AF1  30FF               	movlw	255
  6530  0AF2  05A4               	andwf	___ftdiv@f1+1,f
  6531  0AF3  3000               	movlw	0
  6532  0AF4  05A5               	andwf	___ftdiv@f1+2,f
  6533  0AF5  17A1               	bsf	___ftdiv@f2+1,7
  6534  0AF6  30FF               	movlw	255
  6535  0AF7  05A0               	andwf	___ftdiv@f2,f
  6536  0AF8  30FF               	movlw	255
  6537  0AF9  05A1               	andwf	___ftdiv@f2+1,f
  6538  0AFA  3000               	movlw	0
  6539  0AFB  05A2               	andwf	___ftdiv@f2+2,f
  6540  0AFC  3018               	movlw	24
  6541  0AFD  00A6               	movwf	??___ftdiv
  6542  0AFE  0826               	movf	??___ftdiv,w
  6543  0AFF  00AA               	movwf	___ftdiv@cntr
  6544  0B00                     l2631:	
  6545  0B00  3001               	movlw	1
  6546  0B01                     u3635:	
  6547  0B01  35AB               	lslf	___ftdiv@f3,f
  6548  0B02  0DAC               	rlf	___ftdiv@f3+1,f
  6549  0B03  0DAD               	rlf	___ftdiv@f3+2,f
  6550  0B04  0B89               	decfsz	9,f
  6551  0B05  2B01               	goto	u3635
  6552  0B06  0822               	movf	___ftdiv@f2+2,w
  6553  0B07  0225               	subwf	___ftdiv@f1+2,w
  6554  0B08  1D03               	skipz
  6555  0B09  2B10               	goto	u3645
  6556  0B0A  0821               	movf	___ftdiv@f2+1,w
  6557  0B0B  0224               	subwf	___ftdiv@f1+1,w
  6558  0B0C  1D03               	skipz
  6559  0B0D  2B10               	goto	u3645
  6560  0B0E  0820               	movf	___ftdiv@f2,w
  6561  0B0F  0223               	subwf	___ftdiv@f1,w
  6562  0B10                     u3645:	
  6563  0B10  1C03               	skipc
  6564  0B11  2B19               	goto	l2639
  6565  0B12  0820               	movf	___ftdiv@f2,w
  6566  0B13  02A3               	subwf	___ftdiv@f1,f
  6567  0B14  0821               	movf	___ftdiv@f2+1,w
  6568  0B15  3BA4               	subwfb	___ftdiv@f1+1,f
  6569  0B16  0822               	movf	___ftdiv@f2+2,w
  6570  0B17  3BA5               	subwfb	___ftdiv@f1+2,f
  6571  0B18  142B               	bsf	___ftdiv@f3,0
  6572  0B19                     l2639:	
  6573  0B19  3001               	movlw	1
  6574  0B1A                     u3655:	
  6575  0B1A  35A3               	lslf	___ftdiv@f1,f
  6576  0B1B  0DA4               	rlf	___ftdiv@f1+1,f
  6577  0B1C  0DA5               	rlf	___ftdiv@f1+2,f
  6578  0B1D  0B89               	decfsz	9,f
  6579  0B1E  2B1A               	goto	u3655
  6580  0B1F  3001               	movlw	1
  6581  0B20  02AA               	subwf	___ftdiv@cntr,f
  6582  0B21  1D03               	btfss	3,2
  6583  0B22  2B00               	goto	l2631
  6584  0B23  082B               	movf	___ftdiv@f3,w
  6585  0B24  00F0               	movwf	___ftpack@arg
  6586  0B25  082C               	movf	___ftdiv@f3+1,w
  6587  0B26  00F1               	movwf	___ftpack@arg+1
  6588  0B27  082D               	movf	___ftdiv@f3+2,w
  6589  0B28  00F2               	movwf	___ftpack@arg+2
  6590  0B29  082E               	movf	___ftdiv@exp,w
  6591  0B2A  00A6               	movwf	??___ftdiv
  6592  0B2B  0826               	movf	??___ftdiv,w
  6593  0B2C  00F3               	movwf	___ftpack@exp
  6594  0B2D  082F               	movf	___ftdiv@sign,w
  6595  0B2E  00A7               	movwf	??___ftdiv+1
  6596  0B2F  0827               	movf	??___ftdiv+1,w
  6597  0B30  00F4               	movwf	___ftpack@sign
  6598  0B31  3197  27A0         	fcall	___ftpack
  6599  0B33  0870               	movf	?___ftpack,w
  6600  0B34  0020               	movlb	0	; select bank0
  6601  0B35  00A0               	movwf	?___ftdiv
  6602  0B36  0871               	movf	?___ftpack+1,w
  6603  0B37  00A1               	movwf	?___ftdiv+1
  6604  0B38  0872               	movf	?___ftpack+2,w
  6605  0B39  00A2               	movwf	?___ftdiv+2
  6606  0B3A  0008               	return
  6607  0B3B                     __end_of___ftdiv:	
  6608                           
  6609                           	psect	text23
  6610  0004                     __ptext23:	
  6611 ;; *************** function ___awtoft *****************
  6612 ;; Defined at:
  6613 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  c               2    8[COMMON] int 
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;  sign            1   13[COMMON] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  3    8[COMMON] float 
  6620 ;; Registers used:
  6621 ;;		wreg, status,2, status,0, pclath, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6627 ;;      Params:         3       0       0       0       0       0       0       0
  6628 ;;      Locals:         1       0       0       0       0       0       0       0
  6629 ;;      Temps:          2       0       0       0       0       0       0       0
  6630 ;;      Totals:         6       0       0       0       0       0       0       0
  6631 ;;Total ram usage:        6 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    1
  6634 ;; This function calls:
  6635 ;;		___ftpack
  6636 ;; This function is called by:
  6637 ;;		_loop
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           
  6642                           ;psect for function ___awtoft
  6643  0004                     ___awtoft:	
  6644                           
  6645                           ;incstack = 0
  6646                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6647  0004  01FD               	clrf	___awtoft@sign
  6648  0005  1FF9               	btfss	___awtoft@c+1,7
  6649  0006  280E               	goto	l2601
  6650  0007  09F8               	comf	___awtoft@c,f
  6651  0008  09F9               	comf	___awtoft@c+1,f
  6652  0009  0AF8               	incf	___awtoft@c,f
  6653  000A  1903               	skipnz
  6654  000B  0AF9               	incf	___awtoft@c+1,f
  6655  000C  01FD               	clrf	___awtoft@sign
  6656  000D  0AFD               	incf	___awtoft@sign,f
  6657  000E                     l2601:	
  6658  000E  0878               	movf	___awtoft@c,w
  6659  000F  00F0               	movwf	___ftpack@arg
  6660  0010  0879               	movf	___awtoft@c+1,w
  6661  0011  00F1               	movwf	___ftpack@arg+1
  6662  0012  01F2               	clrf	___ftpack@arg+2
  6663  0013  308E               	movlw	142
  6664  0014  00FB               	movwf	??___awtoft
  6665  0015  087B               	movf	??___awtoft,w
  6666  0016  00F3               	movwf	___ftpack@exp
  6667  0017  087D               	movf	___awtoft@sign,w
  6668  0018  00FC               	movwf	??___awtoft+1
  6669  0019  087C               	movf	??___awtoft+1,w
  6670  001A  00F4               	movwf	___ftpack@sign
  6671  001B  3197  27A0         	fcall	___ftpack
  6672  001D  0870               	movf	?___ftpack,w
  6673  001E  00F8               	movwf	?___awtoft
  6674  001F  0871               	movf	?___ftpack+1,w
  6675  0020  00F9               	movwf	?___awtoft+1
  6676  0021  0872               	movf	?___ftpack+2,w
  6677  0022  00FA               	movwf	?___awtoft+2
  6678  0023  0008               	return
  6679  0024                     __end_of___awtoft:	
  6680                           
  6681                           	psect	text24
  6682  17A0                     __ptext24:	
  6683 ;; *************** function ___ftpack *****************
  6684 ;; Defined at:
  6685 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  arg             3    0[COMMON] unsigned um
  6688 ;;  exp             1    3[COMMON] unsigned char 
  6689 ;;  sign            1    4[COMMON] unsigned char 
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;		None
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  3    0[COMMON] float 
  6694 ;; Registers used:
  6695 ;;		wreg, status,2, status,0
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6701 ;;      Params:         5       0       0       0       0       0       0       0
  6702 ;;      Locals:         0       0       0       0       0       0       0       0
  6703 ;;      Temps:          3       0       0       0       0       0       0       0
  6704 ;;      Totals:         8       0       0       0       0       0       0       0
  6705 ;;Total ram usage:        8 bytes
  6706 ;; Hardware stack levels used:    1
  6707 ;; This function calls:
  6708 ;;		Nothing
  6709 ;; This function is called by:
  6710 ;;		___awtoft
  6711 ;;		___ftadd
  6712 ;;		___ftdiv
  6713 ;;		___ftmul
  6714 ;;		___lltoft
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function ___ftpack
  6720  17A0                     ___ftpack:	
  6721                           
  6722                           ;incstack = 0
  6723                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6724  17A0  0873               	movf	___ftpack@exp,w
  6725  17A1  1903               	btfsc	3,2
  6726  17A2  2FA8               	goto	l1715
  6727  17A3  0872               	movf	___ftpack@arg+2,w
  6728  17A4  0471               	iorwf	___ftpack@arg+1,w
  6729  17A5  0470               	iorwf	___ftpack@arg,w
  6730  17A6  1D03               	skipz
  6731  17A7  2FB9               	goto	l1721
  6732  17A8                     l1715:	
  6733  17A8  3000               	movlw	0
  6734  17A9  00F0               	movwf	?___ftpack
  6735  17AA  3000               	movlw	0
  6736  17AB  00F1               	movwf	?___ftpack+1
  6737  17AC  3000               	movlw	0
  6738  17AD  00F2               	movwf	?___ftpack+2
  6739  17AE  0008               	return
  6740  17AF                     l1719:	
  6741  17AF  3001               	movlw	1
  6742  17B0  00F5               	movwf	??___ftpack
  6743  17B1  0875               	movf	??___ftpack,w
  6744  17B2  07F3               	addwf	___ftpack@exp,f
  6745  17B3  3001               	movlw	1
  6746  17B4                     u1885:	
  6747  17B4  36F2               	lsrf	___ftpack@arg+2,f
  6748  17B5  0CF1               	rrf	___ftpack@arg+1,f
  6749  17B6  0CF0               	rrf	___ftpack@arg,f
  6750  17B7  0B89               	decfsz	9,f
  6751  17B8  2FB4               	goto	u1885
  6752  17B9                     l1721:	
  6753  17B9  30FE               	movlw	254
  6754  17BA  0572               	andwf	___ftpack@arg+2,w
  6755  17BB  1903               	btfsc	3,2
  6756  17BC  2FD2               	goto	l434
  6757  17BD  2FAF               	goto	l1719
  6758  17BE                     l1723:	
  6759  17BE  3001               	movlw	1
  6760  17BF  00F5               	movwf	??___ftpack
  6761  17C0  0875               	movf	??___ftpack,w
  6762  17C1  07F3               	addwf	___ftpack@exp,f
  6763  17C2  3001               	movlw	1
  6764  17C3  07F0               	addwf	___ftpack@arg,f
  6765  17C4  3000               	movlw	0
  6766  17C5  1803               	skipnc
  6767  17C6  3001               	movlw	1
  6768  17C7  07F1               	addwf	___ftpack@arg+1,f
  6769  17C8  3000               	movlw	0
  6770  17C9  1803               	skipnc
  6771  17CA  3001               	movlw	1
  6772  17CB  07F2               	addwf	___ftpack@arg+2,f
  6773  17CC  3001               	movlw	1
  6774  17CD                     u1905:	
  6775  17CD  36F2               	lsrf	___ftpack@arg+2,f
  6776  17CE  0CF1               	rrf	___ftpack@arg+1,f
  6777  17CF  0CF0               	rrf	___ftpack@arg,f
  6778  17D0  0B89               	decfsz	9,f
  6779  17D1  2FCD               	goto	u1905
  6780  17D2                     l434:	
  6781  17D2  30FF               	movlw	255
  6782  17D3  0572               	andwf	___ftpack@arg+2,w
  6783  17D4  1903               	btfsc	3,2
  6784  17D5  2FDF               	goto	l1731
  6785  17D6  2FBE               	goto	l1723
  6786  17D7                     l1729:	
  6787  17D7  3001               	movlw	1
  6788  17D8  02F3               	subwf	___ftpack@exp,f
  6789  17D9  3001               	movlw	1
  6790  17DA                     u1925:	
  6791  17DA  35F0               	lslf	___ftpack@arg,f
  6792  17DB  0DF1               	rlf	___ftpack@arg+1,f
  6793  17DC  0DF2               	rlf	___ftpack@arg+2,f
  6794  17DD  0B89               	decfsz	9,f
  6795  17DE  2FDA               	goto	u1925
  6796  17DF                     l1731:	
  6797  17DF  1FF1               	btfss	___ftpack@arg+1,7
  6798  17E0  2FD7               	goto	l1729
  6799  17E1  1873               	btfsc	___ftpack@exp,0
  6800  17E2  2FE9               	goto	l440
  6801  17E3  30FF               	movlw	255
  6802  17E4  05F0               	andwf	___ftpack@arg,f
  6803  17E5  307F               	movlw	127
  6804  17E6  05F1               	andwf	___ftpack@arg+1,f
  6805  17E7  30FF               	movlw	255
  6806  17E8  05F2               	andwf	___ftpack@arg+2,f
  6807  17E9                     l440:	
  6808  17E9  1003               	clrc
  6809  17EA  0CF3               	rrf	___ftpack@exp,f
  6810  17EB  0873               	movf	___ftpack@exp,w
  6811  17EC  00F5               	movwf	??___ftpack
  6812  17ED  01F6               	clrf	??___ftpack+1
  6813  17EE  01F7               	clrf	??___ftpack+2
  6814  17EF  3010               	movlw	16
  6815  17F0                     u1955:	
  6816  17F0  35F5               	lslf	??___ftpack,f
  6817  17F1  0DF6               	rlf	??___ftpack+1,f
  6818  17F2  0DF7               	rlf	??___ftpack+2,f
  6819  17F3  0B89               	decfsz	9,f
  6820  17F4  2FF0               	goto	u1955
  6821  17F5  0875               	movf	??___ftpack,w
  6822  17F6  04F0               	iorwf	___ftpack@arg,f
  6823  17F7  0876               	movf	??___ftpack+1,w
  6824  17F8  04F1               	iorwf	___ftpack@arg+1,f
  6825  17F9  0877               	movf	??___ftpack+2,w
  6826  17FA  04F2               	iorwf	___ftpack@arg+2,f
  6827  17FB  0874               	movf	___ftpack@sign,w
  6828  17FC  1903               	btfsc	3,2
  6829  17FD  0008               	return
  6830  17FE  17F2               	bsf	___ftpack@arg+2,7
  6831  17FF  0008               	return
  6832  1800                     __end_of___ftpack:	
  6833                           
  6834                           	psect	text25
  6835  1614                     __ptext25:	
  6836 ;; *************** function _Lcd_Out *****************
  6837 ;; Defined at:
  6838 ;;		line 101 in file "lcd.h"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  y               1    wreg     unsigned char 
  6841 ;;  x               1    3[COMMON] unsigned char 
  6842 ;;  buffer          1    4[COMMON] PTR const unsigned char 
  6843 ;;		 -> buffer(30), 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  y               1    6[COMMON] unsigned char 
  6846 ;;  data            1    7[COMMON] unsigned char 
  6847 ;; Return value:  Size  Location     Type
  6848 ;;		None               void
  6849 ;; Registers used:
  6850 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6856 ;;      Params:         2       0       0       0       0       0       0       0
  6857 ;;      Locals:         2       0       0       0       0       0       0       0
  6858 ;;      Temps:          1       0       0       0       0       0       0       0
  6859 ;;      Totals:         5       0       0       0       0       0       0       0
  6860 ;;Total ram usage:        5 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    1
  6863 ;; This function calls:
  6864 ;;		_Lcd_Chr_CP
  6865 ;;		_Lcd_Cmd
  6866 ;; This function is called by:
  6867 ;;		_loop
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           
  6872                           ;psect for function _Lcd_Out
  6873  1614                     _Lcd_Out:	
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in _Lcd_Out: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6877                           ;Lcd_Out@y stored from wreg
  6878  1614  00F6               	movwf	Lcd_Out@y
  6879                           
  6880                           ;lcd.h: 103: unsigned char data;
  6881                           ;lcd.h: 104: switch (y)
  6882  1615  2E25               	goto	l2397
  6883  1616                     l2387:	
  6884                           ;lcd.h: 105: {
  6885                           ;lcd.h: 106: case 1: data = 128 + x; break;
  6886                           
  6887  1616  0873               	movf	Lcd_Out@x,w
  6888  1617  3E80               	addlw	128
  6889  1618  2E21               	goto	L11
  6890  1619                     l2389:	
  6891                           ;lcd.h: 107: case 2: data = 192 + x; break;
  6892                           
  6893  1619  0873               	movf	Lcd_Out@x,w
  6894  161A  3EC0               	addlw	192
  6895  161B  2E21               	goto	L11
  6896  161C                     l2391:	
  6897                           ;lcd.h: 108: case 3: data = 148 + x; break;
  6898                           
  6899  161C  0873               	movf	Lcd_Out@x,w
  6900  161D  3E94               	addlw	148
  6901  161E  2E21               	goto	L11
  6902  161F                     l2393:	
  6903                           ;lcd.h: 109: case 4: data = 212 + x; break;
  6904                           
  6905  161F  0873               	movf	Lcd_Out@x,w
  6906  1620  3ED4               	addlw	212
  6907  1621                     L11:	
  6908  1621  00F5               	movwf	??_Lcd_Out
  6909  1622  0875               	movf	??_Lcd_Out,w
  6910  1623  00F7               	movwf	Lcd_Out@data
  6911                           
  6912                           ;lcd.h: 111: }
  6913                           
  6914                           ;lcd.h: 110: default: break;
  6915  1624  2E33               	goto	l2399
  6916  1625                     l2397:	
  6917  1625  0876               	movf	Lcd_Out@y,w
  6918                           
  6919                           ; Switch size 1, requested type "space"
  6920                           ; Number of cases is 4, Range of values is 1 to 4
  6921                           ; switch strategies available:
  6922                           ; Name         Instructions Cycles
  6923                           ; simple_byte           13     7 (average)
  6924                           ; direct_byte           17     9 (fixed)
  6925                           ; jumptable            263     9 (fixed)
  6926                           ;	Chosen strategy is simple_byte
  6927  1626  3A01               	xorlw	1	; case 1
  6928  1627  1903               	skipnz
  6929  1628  2E16               	goto	l2387
  6930  1629  3A03               	xorlw	3	; case 2
  6931  162A  1903               	skipnz
  6932  162B  2E19               	goto	l2389
  6933  162C  3A01               	xorlw	1	; case 3
  6934  162D  1903               	skipnz
  6935  162E  2E1C               	goto	l2391
  6936  162F  3A07               	xorlw	7	; case 4
  6937  1630  1903               	skipnz
  6938  1631  2E1F               	goto	l2393
  6939  1632  2E33               	goto	l2399
  6940  1633                     l2399:	
  6941                           
  6942                           ;lcd.h: 112: Lcd_Cmd(data);
  6943  1633  0877               	movf	Lcd_Out@data,w
  6944  1634  3188  20D9  3196   	fcall	_Lcd_Cmd
  6945  1637                     l2405:	
  6946                           ;lcd.h: 113: while(*buffer)
  6947                           
  6948  1637  0874               	movf	Lcd_Out@buffer,w
  6949  1638  0086               	movwf	6
  6950  1639  0187               	clrf	7
  6951  163A  0881               	movf	1,f
  6952  163B  1903               	btfsc	3,2
  6953  163C  0008               	return
  6954                           
  6955                           ;lcd.h: 114: {
  6956                           ;lcd.h: 115: Lcd_Chr_CP(*buffer);
  6957  163D  0874               	movf	Lcd_Out@buffer,w
  6958  163E  0086               	movwf	6
  6959  163F  0187               	clrf	7
  6960  1640  0801               	movf	1,w
  6961  1641  3189  216A  3196   	fcall	_Lcd_Chr_CP
  6962                           
  6963                           ;lcd.h: 116: buffer++;
  6964  1644  3001               	movlw	1
  6965  1645  00F5               	movwf	??_Lcd_Out
  6966  1646  0875               	movf	??_Lcd_Out,w
  6967  1647  07F4               	addwf	Lcd_Out@buffer,f
  6968  1648  2E37               	goto	l2405
  6969  1649                     __end_of_Lcd_Out:	
  6970                           ;lcd.h: 117: }
  6971                           ;lcd.h: 118: return;
  6972                           
  6973                           
  6974                           	psect	text26
  6975  08D9                     __ptext26:	
  6976 ;; *************** function _Lcd_Cmd *****************
  6977 ;; Defined at:
  6978 ;;		line 157 in file "lcd.h"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  data            1    wreg     unsigned char 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  data            1    2[COMMON] unsigned char 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;		None               void
  6985 ;; Registers used:
  6986 ;;		wreg, status,2, status,0
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6992 ;;      Params:         0       0       0       0       0       0       0       0
  6993 ;;      Locals:         1       0       0       0       0       0       0       0
  6994 ;;      Temps:          2       0       0       0       0       0       0       0
  6995 ;;      Totals:         3       0       0       0       0       0       0       0
  6996 ;;Total ram usage:        3 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; This function calls:
  6999 ;;		Nothing
  7000 ;; This function is called by:
  7001 ;;		_Lcd_Init
  7002 ;;		_Lcd_Out
  7003 ;;		_setup
  7004 ;;		_loop
  7005 ;;		_Lcd_Out2
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           
  7010                           ;psect for function _Lcd_Cmd
  7011  08D9                     _Lcd_Cmd:	
  7012                           
  7013                           ;incstack = 0
  7014                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0]
  7015                           ;Lcd_Cmd@data stored from wreg
  7016  08D9  00F2               	movwf	Lcd_Cmd@data
  7017                           
  7018                           ;lcd.h: 158: PORTBbits.RB2 = 0; PORTBbits.RB1 = 0;
  7019  08DA  0020               	movlb	0	; select bank0
  7020  08DB  110D               	bcf	13,2	;volatile
  7021  08DC  108D               	bcf	13,1	;volatile
  7022                           
  7023                           ;lcd.h: 159: PORTBbits.RB7 = (data & 0b10000000)>>7; PORTBbits.RB6 = (data & 0b01000000)
      +                          >>6;
  7024  08DD  0872               	movf	Lcd_Cmd@data,w
  7025  08DE  00F0               	movwf	??_Lcd_Cmd
  7026  08DF  3007               	movlw	7
  7027  08E0                     u2555:	
  7028  08E0  36F0               	lsrf	??_Lcd_Cmd,f
  7029  08E1  0B89               	decfsz	9,f
  7030  08E2  28E0               	goto	u2555
  7031  08E3  0870               	movf	??_Lcd_Cmd,w
  7032  08E4  3901               	andlw	1
  7033  08E5  00F1               	movwf	??_Lcd_Cmd+1
  7034  08E6  0CF1               	rrf	??_Lcd_Cmd+1,f
  7035  08E7  0CF1               	rrf	??_Lcd_Cmd+1,f
  7036  08E8  080D               	movf	13,w	;volatile
  7037  08E9  0671               	xorwf	??_Lcd_Cmd+1,w
  7038  08EA  397F               	andlw	-129
  7039  08EB  0671               	xorwf	??_Lcd_Cmd+1,w
  7040  08EC  008D               	movwf	13	;volatile
  7041  08ED  0872               	movf	Lcd_Cmd@data,w
  7042  08EE  00F0               	movwf	??_Lcd_Cmd
  7043  08EF  3006               	movlw	6
  7044  08F0                     u2565:	
  7045  08F0  36F0               	lsrf	??_Lcd_Cmd,f
  7046  08F1  0B89               	decfsz	9,f
  7047  08F2  28F0               	goto	u2565
  7048  08F3  0870               	movf	??_Lcd_Cmd,w
  7049  08F4  3901               	andlw	1
  7050  08F5  00F1               	movwf	??_Lcd_Cmd+1
  7051  08F6  0EF1               	swapf	??_Lcd_Cmd+1,f
  7052  08F7  0DF1               	rlf	??_Lcd_Cmd+1,f
  7053  08F8  0DF1               	rlf	??_Lcd_Cmd+1,f
  7054  08F9  080D               	movf	13,w	;volatile
  7055  08FA  0671               	xorwf	??_Lcd_Cmd+1,w
  7056  08FB  39BF               	andlw	-65
  7057  08FC  0671               	xorwf	??_Lcd_Cmd+1,w
  7058  08FD  008D               	movwf	13	;volatile
  7059                           
  7060                           ;lcd.h: 160: PORTBbits.RB5 = (data & 0b00100000)>>5; PORTBbits.RB4 = (data & 0b00010000)
      +                          >>4;
  7061  08FE  0872               	movf	Lcd_Cmd@data,w
  7062  08FF  00F0               	movwf	??_Lcd_Cmd
  7063  0900  3005               	movlw	5
  7064  0901                     u2575:	
  7065  0901  36F0               	lsrf	??_Lcd_Cmd,f
  7066  0902  0B89               	decfsz	9,f
  7067  0903  2901               	goto	u2575
  7068  0904  0870               	movf	??_Lcd_Cmd,w
  7069  0905  3901               	andlw	1
  7070  0906  00F1               	movwf	??_Lcd_Cmd+1
  7071  0907  0EF1               	swapf	??_Lcd_Cmd+1,f
  7072  0908  0DF1               	rlf	??_Lcd_Cmd+1,f
  7073  0909  080D               	movf	13,w	;volatile
  7074  090A  0671               	xorwf	??_Lcd_Cmd+1,w
  7075  090B  39DF               	andlw	-33
  7076  090C  0671               	xorwf	??_Lcd_Cmd+1,w
  7077  090D  008D               	movwf	13	;volatile
  7078  090E  0872               	movf	Lcd_Cmd@data,w
  7079  090F  00F0               	movwf	??_Lcd_Cmd
  7080  0910  3004               	movlw	4
  7081  0911                     u2585:	
  7082  0911  36F0               	lsrf	??_Lcd_Cmd,f
  7083  0912  0B89               	decfsz	9,f
  7084  0913  2911               	goto	u2585
  7085  0914  0870               	movf	??_Lcd_Cmd,w
  7086  0915  3901               	andlw	1
  7087  0916  00F1               	movwf	??_Lcd_Cmd+1
  7088  0917  0EF1               	swapf	??_Lcd_Cmd+1,f
  7089  0918  080D               	movf	13,w	;volatile
  7090  0919  0671               	xorwf	??_Lcd_Cmd+1,w
  7091  091A  39EF               	andlw	-17
  7092  091B  0671               	xorwf	??_Lcd_Cmd+1,w
  7093  091C  008D               	movwf	13	;volatile
  7094                           
  7095                           ;lcd.h: 161: _delay(10);
  7096  091D  3003               	movlw	3
  7097  091E  00F0               	movwf	??_Lcd_Cmd
  7098  091F                     u3807:	
  7099  091F  0BF0               	decfsz	??_Lcd_Cmd,f
  7100  0920  291F               	goto	u3807
  7101                           
  7102                           ;lcd.h: 162: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(1000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  7103  0921  0020               	movlb	0	; select bank0
  7104  0922  150D               	bsf	13,2	;volatile
  7105  0923  0000               	nop
  7106  0924  0020               	movlb	0	; select bank0
  7107  0925  110D               	bcf	13,2	;volatile
  7108                           
  7109                           ;lcd.h: 163: PORTBbits.RB7 = (data & 0b00001000)>>3; PORTBbits.RB6 = (data & 0b00000100)
      +                          >>2;
  7110  0926  0872               	movf	Lcd_Cmd@data,w
  7111  0927  00F0               	movwf	??_Lcd_Cmd
  7112  0928  3003               	movlw	3
  7113  0929                     u2595:	
  7114  0929  36F0               	lsrf	??_Lcd_Cmd,f
  7115  092A  0B89               	decfsz	9,f
  7116  092B  2929               	goto	u2595
  7117  092C  0870               	movf	??_Lcd_Cmd,w
  7118  092D  3901               	andlw	1
  7119  092E  00F1               	movwf	??_Lcd_Cmd+1
  7120  092F  0CF1               	rrf	??_Lcd_Cmd+1,f
  7121  0930  0CF1               	rrf	??_Lcd_Cmd+1,f
  7122  0931  080D               	movf	13,w	;volatile
  7123  0932  0671               	xorwf	??_Lcd_Cmd+1,w
  7124  0933  397F               	andlw	-129
  7125  0934  0671               	xorwf	??_Lcd_Cmd+1,w
  7126  0935  008D               	movwf	13	;volatile
  7127  0936  0872               	movf	Lcd_Cmd@data,w
  7128  0937  00F0               	movwf	??_Lcd_Cmd
  7129  0938  3002               	movlw	2
  7130  0939                     u2605:	
  7131  0939  36F0               	lsrf	??_Lcd_Cmd,f
  7132  093A  0B89               	decfsz	9,f
  7133  093B  2939               	goto	u2605
  7134  093C  0870               	movf	??_Lcd_Cmd,w
  7135  093D  3901               	andlw	1
  7136  093E  00F1               	movwf	??_Lcd_Cmd+1
  7137  093F  0EF1               	swapf	??_Lcd_Cmd+1,f
  7138  0940  0DF1               	rlf	??_Lcd_Cmd+1,f
  7139  0941  0DF1               	rlf	??_Lcd_Cmd+1,f
  7140  0942  080D               	movf	13,w	;volatile
  7141  0943  0671               	xorwf	??_Lcd_Cmd+1,w
  7142  0944  39BF               	andlw	-65
  7143  0945  0671               	xorwf	??_Lcd_Cmd+1,w
  7144  0946  008D               	movwf	13	;volatile
  7145                           
  7146                           ;lcd.h: 164: PORTBbits.RB5 = (data & 0b00000010)>>1; PORTBbits.RB4 = (data & 0b00000001)
      +                          ;
  7147  0947  3672               	lsrf	Lcd_Cmd@data,w
  7148  0948  3901               	andlw	1
  7149  0949  00F0               	movwf	??_Lcd_Cmd
  7150  094A  0EF0               	swapf	??_Lcd_Cmd,f
  7151  094B  0DF0               	rlf	??_Lcd_Cmd,f
  7152  094C  080D               	movf	13,w	;volatile
  7153  094D  0670               	xorwf	??_Lcd_Cmd,w
  7154  094E  39DF               	andlw	-33
  7155  094F  0670               	xorwf	??_Lcd_Cmd,w
  7156  0950  008D               	movwf	13	;volatile
  7157  0951  0872               	movf	Lcd_Cmd@data,w
  7158  0952  3901               	andlw	1
  7159  0953  00F0               	movwf	??_Lcd_Cmd
  7160  0954  0EF0               	swapf	??_Lcd_Cmd,f
  7161  0955  080D               	movf	13,w	;volatile
  7162  0956  0670               	xorwf	??_Lcd_Cmd,w
  7163  0957  39EF               	andlw	-17
  7164  0958  0670               	xorwf	??_Lcd_Cmd,w
  7165  0959  008D               	movwf	13	;volatile
  7166                           
  7167                           ;lcd.h: 165: _delay(10);
  7168  095A  3003               	movlw	3
  7169  095B  00F0               	movwf	??_Lcd_Cmd
  7170  095C                     u3817:	
  7171  095C  0BF0               	decfsz	??_Lcd_Cmd,f
  7172  095D  295C               	goto	u3817
  7173                           
  7174                           ;lcd.h: 166: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(1000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  7175  095E  0020               	movlb	0	; select bank0
  7176  095F  150D               	bsf	13,2	;volatile
  7177  0960  0000               	nop
  7178  0961  0020               	movlb	0	; select bank0
  7179  0962  110D               	bcf	13,2	;volatile
  7180                           
  7181                           ;lcd.h: 167: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  7182  0963  30E5               	movlw	229
  7183  0964  00F0               	movwf	??_Lcd_Cmd
  7184  0965                     u3827:	
  7185  0965  3200               	nop2
  7186  0966  0000               	nop
  7187  0967  0BF0               	decfsz	??_Lcd_Cmd,f
  7188  0968  2965               	goto	u3827
  7189  0969  0008               	return
  7190  096A                     __end_of_Lcd_Cmd:	
  7191                           
  7192                           	psect	text27
  7193  096A                     __ptext27:	
  7194 ;; *************** function _Lcd_Chr_CP *****************
  7195 ;; Defined at:
  7196 ;;		line 143 in file "lcd.h"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;  data            1    wreg     unsigned char 
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;  data            1    2[COMMON] unsigned char 
  7201 ;; Return value:  Size  Location     Type
  7202 ;;		None               void
  7203 ;; Registers used:
  7204 ;;		wreg, status,2, status,0
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7210 ;;      Params:         0       0       0       0       0       0       0       0
  7211 ;;      Locals:         1       0       0       0       0       0       0       0
  7212 ;;      Temps:          2       0       0       0       0       0       0       0
  7213 ;;      Totals:         3       0       0       0       0       0       0       0
  7214 ;;Total ram usage:        3 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_Lcd_Out
  7220 ;;		_Lcd_Out2
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           
  7225                           ;psect for function _Lcd_Chr_CP
  7226  096A                     _Lcd_Chr_CP:	
  7227                           
  7228                           ;incstack = 0
  7229                           ; Regs used in _Lcd_Chr_CP: [wreg+status,2+status,0]
  7230                           ;Lcd_Chr_CP@data stored from wreg
  7231  096A  00F2               	movwf	Lcd_Chr_CP@data
  7232                           
  7233                           ;lcd.h: 144: PORTBbits.RB2 = 0; PORTBbits.RB1 = 1;
  7234  096B  0020               	movlb	0	; select bank0
  7235  096C  110D               	bcf	13,2	;volatile
  7236  096D  148D               	bsf	13,1	;volatile
  7237                           
  7238                           ;lcd.h: 145: PORTBbits.RB7 = (data & 0b10000000)>>7; PORTBbits.RB6 = (data & 0b01000000)
      +                          >>6;
  7239  096E  0872               	movf	Lcd_Chr_CP@data,w
  7240  096F  00F0               	movwf	??_Lcd_Chr_CP
  7241  0970  3007               	movlw	7
  7242  0971                     u2615:	
  7243  0971  36F0               	lsrf	??_Lcd_Chr_CP,f
  7244  0972  0B89               	decfsz	9,f
  7245  0973  2971               	goto	u2615
  7246  0974  0870               	movf	??_Lcd_Chr_CP,w
  7247  0975  3901               	andlw	1
  7248  0976  00F1               	movwf	??_Lcd_Chr_CP+1
  7249  0977  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  7250  0978  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  7251  0979  080D               	movf	13,w	;volatile
  7252  097A  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7253  097B  397F               	andlw	-129
  7254  097C  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7255  097D  008D               	movwf	13	;volatile
  7256  097E  0872               	movf	Lcd_Chr_CP@data,w
  7257  097F  00F0               	movwf	??_Lcd_Chr_CP
  7258  0980  3006               	movlw	6
  7259  0981                     u2625:	
  7260  0981  36F0               	lsrf	??_Lcd_Chr_CP,f
  7261  0982  0B89               	decfsz	9,f
  7262  0983  2981               	goto	u2625
  7263  0984  0870               	movf	??_Lcd_Chr_CP,w
  7264  0985  3901               	andlw	1
  7265  0986  00F1               	movwf	??_Lcd_Chr_CP+1
  7266  0987  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7267  0988  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7268  0989  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7269  098A  080D               	movf	13,w	;volatile
  7270  098B  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7271  098C  39BF               	andlw	-65
  7272  098D  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7273  098E  008D               	movwf	13	;volatile
  7274                           
  7275                           ;lcd.h: 146: PORTBbits.RB5 = (data & 0b00100000)>>5; PORTBbits.RB4 = (data & 0b00010000)
      +                          >>4;
  7276  098F  0872               	movf	Lcd_Chr_CP@data,w
  7277  0990  00F0               	movwf	??_Lcd_Chr_CP
  7278  0991  3005               	movlw	5
  7279  0992                     u2635:	
  7280  0992  36F0               	lsrf	??_Lcd_Chr_CP,f
  7281  0993  0B89               	decfsz	9,f
  7282  0994  2992               	goto	u2635
  7283  0995  0870               	movf	??_Lcd_Chr_CP,w
  7284  0996  3901               	andlw	1
  7285  0997  00F1               	movwf	??_Lcd_Chr_CP+1
  7286  0998  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7287  0999  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7288  099A  080D               	movf	13,w	;volatile
  7289  099B  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7290  099C  39DF               	andlw	-33
  7291  099D  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7292  099E  008D               	movwf	13	;volatile
  7293  099F  0872               	movf	Lcd_Chr_CP@data,w
  7294  09A0  00F0               	movwf	??_Lcd_Chr_CP
  7295  09A1  3004               	movlw	4
  7296  09A2                     u2645:	
  7297  09A2  36F0               	lsrf	??_Lcd_Chr_CP,f
  7298  09A3  0B89               	decfsz	9,f
  7299  09A4  29A2               	goto	u2645
  7300  09A5  0870               	movf	??_Lcd_Chr_CP,w
  7301  09A6  3901               	andlw	1
  7302  09A7  00F1               	movwf	??_Lcd_Chr_CP+1
  7303  09A8  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7304  09A9  080D               	movf	13,w	;volatile
  7305  09AA  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7306  09AB  39EF               	andlw	-17
  7307  09AC  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7308  09AD  008D               	movwf	13	;volatile
  7309                           
  7310                           ;lcd.h: 147: _delay(10);
  7311  09AE  3003               	movlw	3
  7312  09AF  00F0               	movwf	??_Lcd_Chr_CP
  7313  09B0                     u3837:	
  7314  09B0  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7315  09B1  29B0               	goto	u3837
  7316                           
  7317                           ;lcd.h: 148: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(1000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  7318  09B2  0020               	movlb	0	; select bank0
  7319  09B3  150D               	bsf	13,2	;volatile
  7320  09B4  0000               	nop
  7321  09B5  0020               	movlb	0	; select bank0
  7322  09B6  110D               	bcf	13,2	;volatile
  7323                           
  7324                           ;lcd.h: 149: PORTBbits.RB7 = (data & 0b00001000)>>3; PORTBbits.RB6 = (data & 0b00000100)
      +                          >>2;
  7325  09B7  0872               	movf	Lcd_Chr_CP@data,w
  7326  09B8  00F0               	movwf	??_Lcd_Chr_CP
  7327  09B9  3003               	movlw	3
  7328  09BA                     u2655:	
  7329  09BA  36F0               	lsrf	??_Lcd_Chr_CP,f
  7330  09BB  0B89               	decfsz	9,f
  7331  09BC  29BA               	goto	u2655
  7332  09BD  0870               	movf	??_Lcd_Chr_CP,w
  7333  09BE  3901               	andlw	1
  7334  09BF  00F1               	movwf	??_Lcd_Chr_CP+1
  7335  09C0  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  7336  09C1  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  7337  09C2  080D               	movf	13,w	;volatile
  7338  09C3  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7339  09C4  397F               	andlw	-129
  7340  09C5  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7341  09C6  008D               	movwf	13	;volatile
  7342  09C7  0872               	movf	Lcd_Chr_CP@data,w
  7343  09C8  00F0               	movwf	??_Lcd_Chr_CP
  7344  09C9  3002               	movlw	2
  7345  09CA                     u2665:	
  7346  09CA  36F0               	lsrf	??_Lcd_Chr_CP,f
  7347  09CB  0B89               	decfsz	9,f
  7348  09CC  29CA               	goto	u2665
  7349  09CD  0870               	movf	??_Lcd_Chr_CP,w
  7350  09CE  3901               	andlw	1
  7351  09CF  00F1               	movwf	??_Lcd_Chr_CP+1
  7352  09D0  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7353  09D1  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7354  09D2  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7355  09D3  080D               	movf	13,w	;volatile
  7356  09D4  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7357  09D5  39BF               	andlw	-65
  7358  09D6  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7359  09D7  008D               	movwf	13	;volatile
  7360                           
  7361                           ;lcd.h: 150: PORTBbits.RB5 = (data & 0b00000010)>>1; PORTBbits.RB4 = (data & 0b00000001)
      +                          ;
  7362  09D8  3672               	lsrf	Lcd_Chr_CP@data,w
  7363  09D9  3901               	andlw	1
  7364  09DA  00F0               	movwf	??_Lcd_Chr_CP
  7365  09DB  0EF0               	swapf	??_Lcd_Chr_CP,f
  7366  09DC  0DF0               	rlf	??_Lcd_Chr_CP,f
  7367  09DD  080D               	movf	13,w	;volatile
  7368  09DE  0670               	xorwf	??_Lcd_Chr_CP,w
  7369  09DF  39DF               	andlw	-33
  7370  09E0  0670               	xorwf	??_Lcd_Chr_CP,w
  7371  09E1  008D               	movwf	13	;volatile
  7372  09E2  0872               	movf	Lcd_Chr_CP@data,w
  7373  09E3  3901               	andlw	1
  7374  09E4  00F0               	movwf	??_Lcd_Chr_CP
  7375  09E5  0EF0               	swapf	??_Lcd_Chr_CP,f
  7376  09E6  080D               	movf	13,w	;volatile
  7377  09E7  0670               	xorwf	??_Lcd_Chr_CP,w
  7378  09E8  39EF               	andlw	-17
  7379  09E9  0670               	xorwf	??_Lcd_Chr_CP,w
  7380  09EA  008D               	movwf	13	;volatile
  7381                           
  7382                           ;lcd.h: 151: _delay(10);
  7383  09EB  3003               	movlw	3
  7384  09EC  00F0               	movwf	??_Lcd_Chr_CP
  7385  09ED                     u3847:	
  7386  09ED  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7387  09EE  29ED               	goto	u3847
  7388                           
  7389                           ;lcd.h: 152: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(1000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  7390  09EF  0020               	movlb	0	; select bank0
  7391  09F0  150D               	bsf	13,2	;volatile
  7392  09F1  0000               	nop
  7393  09F2  0020               	movlb	0	; select bank0
  7394  09F3  110D               	bcf	13,2	;volatile
  7395                           
  7396                           ;lcd.h: 153: _delay((unsigned long)((5)*(1000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(1000000/4000000.0)));
  7397  09F4  0000               	nop
  7398  09F5  30E5               	movlw	229
  7399  09F6  00F0               	movwf	??_Lcd_Chr_CP
  7400  09F7                     u3857:	
  7401  09F7  3200               	nop2
  7402  09F8  0000               	nop
  7403  09F9  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7404  09FA  29F7               	goto	u3857
  7405  09FB  0008               	return
  7406  09FC                     __end_of_Lcd_Chr_CP:	
  7407  007E                     btemp	set	126	;btemp
  7408  007E                     pic14e$flags	set	126
  7409  007E                     wtemp	set	126
  7410  007E                     wtemp0	set	126
  7411  0080                     wtemp1	set	128
  7412  0082                     wtemp2	set	130
  7413  0084                     wtemp3	set	132
  7414  0086                     wtemp4	set	134
  7415  0088                     wtemp5	set	136
  7416  007F                     wtemp6	set	127
  7417  007E                     ttemp	set	126
  7418  007E                     ttemp0	set	126
  7419  0081                     ttemp1	set	129
  7420  0084                     ttemp2	set	132
  7421  0087                     ttemp3	set	135
  7422  007F                     ttemp4	set	127
  7423  007E                     ltemp	set	126
  7424  007E                     ltemp0	set	126
  7425  0082                     ltemp1	set	130
  7426  0086                     ltemp2	set	134
  7427  0080                     ltemp3	set	128


Data Sizes:
    Strings     9
    Constant    118
    Data        0
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      78
    BANK1            80     44      74
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 30
		 -> buffer(BANK1[30]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S362$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    Lcd_Out@buffer	PTR const unsigned char  size(1) Largest target is 30
		 -> buffer(BANK1[30]), 


Critical Paths under _main in COMMON

    _setup->_Lcd_Init
    _Lcd_Init->_Lcd_Cmd
    _loop->___awtoft
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_loop
    _loop->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   53681
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     490
                            _Lcd_Cmd
                           _Lcd_Init
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     314
                                              3 COMMON     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _loop                                                12    12      0   53191
                                             76 BANK0      2     2      0
                                             34 BANK1     10    10      0
                            _Lcd_Cmd
                            _Lcd_Out
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                          _convertir
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             51    46      5   42623
                                             65 BANK0     11     6      5
                                              0 BANK1     34    34      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               12     9      3   10374
                                             32 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              17    14      3   10176
                                             32 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2524
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    4333
                                             16 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1580
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     431
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     574
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     543
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     418
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     444
                                             41 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3356
                                             59 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             46 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     648
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) _convertir                                           11     9      2     197
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2623
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2306
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              5     3      2     661
                                              3 COMMON     5     3      2
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _Lcd_Cmd
     _Lcd_Out
       _Lcd_Chr_CP
       _Lcd_Cmd
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _convertir
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _setup
     _Lcd_Cmd
     _Lcd_Init
       _Lcd_Cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A6       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4E      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     2C      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      A6      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Jun 01 04:31:05 2015

            __CFG_CP$OFF 0000                       l33 0A36                       l34 0A59  
                     l73 169D             ___awdiv@sign 0021      ___wmul@multiplicand 0026  
           ___ftadd@exp1 005A             ___ftadd@exp2 0059             ___ftadd@sign 0058  
                    l130 03B7                      l135 04DE                      l440 17E9  
                    l256 15B0                      l434 17D2                      l463 0D44  
                    l489 0C20             __CFG_CPD$OFF 0000             ___awmod@sign 0076  
           __CFG_BORV$LO 0000                      wreg 0009              _sprintf$375 00A3  
            _sprintf$792 00A0             __CFG_LVP$OFF 0000             ___ftdiv@cntr 002A  
           ___ftdiv@sign 002F                     l2101 0C41                     l2121 0C83  
                   l2131 0C9C                     l2301 16D9                     l2141 0042  
                   l2109 0C5B                     l2037 0FD3                     l2029 0F59  
                   l2053 01EE                     l2231 086B                     l2127 0C90  
                   l2119 0C75                     l2071 0313                     l2063 026C  
                   l2305 16F1                     l2129 0C99                     l2251 08A9  
                   l2147 005F                     l2059 024F                     l2405 1637  
                   l2261 08C2                     l2309 16FC                     l2317 15F0  
                   l2165 00F2                     l2157 00AA                     l2077 0374  
                   l2319 1600                     l2183 012C                     l2175 0111  
                   l2087 0C08                     l2431 03B4                     l1721 17B9  
                   l2601 000E                     l2265 08D0                     l2257 08B6  
                   l2249 089B                     l2185 0135                     l2177 011F  
                   l2505 059A                     l1731 17DF                     l1723 17BE  
                   l1715 17A8                     l2611 0AA9                     l2195 165F  
                   l2259 08BF                     l2275 0810                     l2187 0138  
                   l2523 0625                     l2515 05EE                     l2451 0416  
                   l2435 03B9                     l2285 083E                     l2277 081E  
                   l1805 170F                     l2509 05E8                     l2437 03CF  
                   l2391 161C                     l1719 17AF                     l2631 0B00  
                   l2199 1675                     l1903 0D83                     l1831 1745  
                   l1823 1734                     l1743 15A9                     l2551 06C5  
                   l2393 161F                     l1729 17D7                     l2617 0ABF  
                   l2289 0849                     l1761 1757                     l1817 171C  
                   l1809 1716                     l1913 0B52                     l2545 06A8  
                   l2537 0640                     l2481 0513                     l2387 1616  
                   l1843 0CCD                     l2299 16CB                     l1819 1728  
                   l1827 173D                     l1931 0BA3                     l2539 0695  
                   l2475 04C7                     l2467 047A                     l2389 1619  
                   l2397 1625                     l1853 0CE3                     l2573 07BB  
                   l2557 06EB                     l2493 055E                     l2581 07D3  
                   l2399 1633                     l2639 0B19                     l1871 0D10  
                   l1847 0CD4                     l1767 1762                     l1943 0BBF  
                   l1935 0BAB                     l1919 0B68                     l1873 0D1A  
                   l1865 0CFD                     l1793 1799                     l1785 1788  
                   l1777 176A                     l2489 054A                     l1883 0D36  
                   l1875 0D1F                     l1779 1776                     l1947 0BC7  
                   l2579 07CE                     l2587 0399                     l1893 0D68  
                   l1885 0D40                     l1877 0D23                     l1789 1791  
                   l2589 07F0                     l2685 0DA6                     l2695 0E0D  
                   l1889 0D56                     l2699 0E63                     STR_1 1076  
                   u2045 176D                     u3105 08B7                     u2065 1777  
                   u2145 171F                     u2075 1781                     u2325 0D11  
                   u3045 0872                     u2085 1789                     u2165 172E  
                   u3215 16CE                     u2175 1735                     u3145 0813  
                   u2355 0D24                     u3075 089C                     u3235 16E7  
                   u2605 0939                     u3165 081F                     u3245 16F2  
                   u2525 0BC8                     u3405 04EA                     u2615 0971  
                   u2295 0CFE                     u3175 0833                     u2535 0BCE  
                   u2455 0B74                     u3415 051F                     u2625 0981  
                   u1905 17CD                     u2385 0D37                     u3185 083F  
                   u3265 15F5                     u2465 0B84                     u2635 0992  
                   u2555 08E0                     u3515 06B3                     u2645 09A2  
                   u2565 08F0                     u1925 17DA                     u2485 0BAC  
                   u3525 06C1                     u3445 0548                     u3365 042B  
                   u2655 09BA                     u2575 0901                     u3615 0AD1  
                   u2495 0BB2                     u2665 09CA                     u2585 0911  
                   u3625 0AE1                     u2905 00D5                     u2825 0C76  
                   u2595 0929                     u1955 17F0                     u3635 0B01  
                   u3475 0619                     u1885 17B4                     u3645 0B10  
                   u2765 0C42                     u3717 0A0E                     u3807 091F  
                   u3655 0B1A                     u2855 0C91                     u2775 0C52  
                   u3727 0A14                     u3817 095C                     u2945 0112  
                   u2785 0C5C                     u1985 15B1                     u3737 0A1A  
                   u3827 0965                     u1995 15B6                     u3675 0DD7  
                   u3747 0A20                     u3837 09B0                     u3685 0E1C  
                   u3757 0A26                     u3847 09ED                     u2975 012D  
                   u2895 00AB                     u3695 0E6E                     u3767 0A2C  
                   u3857 09F7                     u3777 0A4D                     u3787 0A70  
                   u3797 1698             __CFG_WRT$OFF 0000                     _main 157F  
           ___ftpack@arg 0070                     _loop 0D9B             ___ftpack@exp 0073  
                   fsr0h 0005                     fsr1h 0007                     fsr0l 0004  
                   indf0 0000                     indf1 0001                     fsr1l 0006  
                   btemp 007E                     ltemp 007E                     start 0002  
                   ttemp 007E                     wtemp 007E            __CFG_IESO$OFF 0000  
        __end_of_Lcd_Cmd 096A          __end_of_Lcd_Out 1649             ___ftmul@cntr 003E  
           ___ftmul@sign 003F               _Lcd_Chr_CP 096A             ___fttol@exp1 0056  
           ___fttol@lval 0052                    ?_main 0070          __end_of___awdiv 17A0  
                  ?_loop 0070          __end_of___ftadd 0D9B            __CFG_WDTE$OFF 0000  
        __end_of___awmod 174C          __end_of___ftdiv 0B3B          __end_of___ftneg 158E  
        __end_of___lldiv 0852          __end_of___ftmul 0BEF          ___awdiv@divisor 0077  
        __end_of___llmod 1705          __end_of___ftsub 15A7          __end_of___fttol 08D9  
        ___awdiv@counter 0020                    _PORTA 000C             ___lltoft@exp 007D  
         __CFG_FCMEN$OFF 0000            ___awtoft@sign 007D          __end_of_dpowers 1028  
                  _scale 0141            ___ftpack@sign 0074                    _setup 15C5  
         __CFG_BOREN$OFF 0000                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __end_of_sprintf 07F5         __end_of_Lcd_Init 0A92           __CFG_MCLRE$OFF 0000  
        __initialization 07F5             __end_of_main 1586             __end_of_loop 0E95  
                 ??_main 007E            ___fttol@sign1 0051                   ??_loop 006C  
         __CFG_PLLEN$OFF 0000     __size_of__tdiv_to_l_ 00B6         ___llmod@dividend 0074  
                 ?_scale 0040                   _ADRESH 009C                   _ADRESL 009B  
       ___awdiv@dividend 0079                   ?_setup 0070         __end_of___awtoft 0024  
                 _ANSELB 018D         __end_of___ftpack 1800         __end_of___lltoft 1614  
              ??_Lcd_Cmd 0070                ??_Lcd_Out 0075           __CFG_PWRTE$OFF 0000  
       __end_of__powers_ 1076                   ___ftge 1649              ?_Lcd_Chr_CP 0070  
                 ___wmul 15A7                ??___awdiv 007B                ??___ftadd 0054  
              ??___awmod 0074                ??___ftdiv 0026                ??___ftneg 0073  
              ??___lldiv 0078                ??___ftmul 0036                ??___llmod 0078  
              ??___ftsub 007E                ??___fttol 004D                   _buffer 00CC  
                 _fround 0E95         ___awdiv@quotient 0022          ___awmod@divisor 0070  
        ___awmod@counter 0075    ___ftmul@f3_as_product 003B                ??_sprintf 0066  
__end_of__initialization 07FC               ___ftadd@f1 004E               ___ftadd@f2 0051  
             ___ftge@ff1 0070               ___ftge@ff2 0073               ___ftdiv@f1 0023  
             ___ftdiv@f2 0020               ___ftdiv@f3 002B               ___ftneg@f1 0070  
             ___awtoft@c 0078               ___ftmul@f1 0030               ___ftmul@f2 0033  
             ___ftsub@f1 005E               ___ftsub@f2 005B               ___fttol@f1 0049  
         __pcstackCOMMON 0070               ___lltoft@c 0078            __end_of_scale 0391  
          __end_of_setup 15EC               __div_to_l_ 0024                ?_Lcd_Init 0070  
        __div_to_l_@exp1 0025          __div_to_l_@cntr 0024             sprintf@integ 00B8  
                ??_scale 0043          __div_to_l_@quot 0020                  ??_setup 0075  
    __size_of_Lcd_Chr_CP 0092       __size_of_convertir 003F               __pbssBANK1 00CC  
          __div_to_l_@f1 0070            __div_to_l_@f2 0073               __pmaintext 157F  
                ?___ftge 0070                  ?___wmul 0024                  ?_fround 0040  
              ?___awtoft 0078                ?___ftpack 0070                ?___lltoft 0078  
             ??_Lcd_Init 0073                  _Lcd_Cmd 08D9                  _Lcd_Out 1614  
      __end_of__npowers_ 104F          __size_of___ftge 003B                  ___awdiv 174C  
                ___ftadd 0CA5                  ___awmod 1705                  ___ftdiv 0A92  
                ___ftneg 1586                  ___lldiv 0800          __size_of___wmul 001E  
                ___ftmul 0B3B                  ___llmod 16C3                  ___ftsub 158E  
                ___fttol 0852               _fround$790 0047               _fround$789 004A  
        __CFG_STVREN$OFF 0000        __end_of_convertir 16C3               ??___awtoft 007B  
             ??___ftpack 0075          __size_of_fround 016B               ??___lltoft 007C  
                __ptext1 15C5                  __ptext2 09FC                  __ptext3 0D9B  
                __ptext4 0391                  __ptext5 0141                  __ptext6 0E95  
                __ptext7 15A7                  __ptext8 0B3B                  __ptext9 1705  
            ?__div_to_l_ 0070                  _dpowers 1000         ___awmod@dividend 0072  
                _sprintf 0391                  clrloop0 157A     end_of_initialization 07FC  
                loop@ant 00C2                  loop@neg 00CA                  loop@pos 00C8  
        ___lldiv@divisor 0070          ___lldiv@counter 007D             ??_Lcd_Chr_CP 0070  
           __pstringtext 1000           __tdiv_to_l_@f1 0070           __tdiv_to_l_@f2 0073  
          ??__tdiv_to_l_ 0076                _PORTBbits 000D         __CFG_FOSC$INTOSC 0000  
              _TRISAbits 008C                _TRISBbits 008D       __end_of_Lcd_Chr_CP 09FC  
            ___ftdiv@exp 002E      __size_of__div_to_l_ 011D              ___ftmul@exp 003A  
       convertir@channel 0070           __end_of___ftge 1684           __end_of___wmul 15C5  
         __end_of_fround 1000               convertir@i 0079      start_initialization 07F5  
    __end_of__tdiv_to_l_ 0CA5            Lcd_Out@buffer 0074        __size_of_Lcd_Init 0096  
        ___llmod@divisor 0070          ___llmod@counter 0079                 ??___ftge 0076  
               ??___wmul 007C            sprintf@vd_377 00AC                 ??_fround 0043  
             fround@prec 004D        __size_of___awtoft 0020        __size_of___ftpack 0060  
      __size_of___lltoft 0028                ___latbits 0002            __pcstackBANK0 0020  
          __pcstackBANK1 00A0      __end_of__stringdata 107F                 ?_Lcd_Cmd 0070  
            sprintf@_val 00B4              sprintf@flag 00B0                 ?_Lcd_Out 0073  
            sprintf@fval 00BE              sprintf@prec 00B2               loop@result 00C5  
               ?___awdiv 0077                 ?___ftadd 004E                 ?___awmod 0070  
               ?___ftdiv 0020                 ?___ftneg 0070                 ?___lldiv 0070  
               ?___ftmul 0030                 ?___llmod 0070                 ?___ftsub 005B  
              __npowers_ 1028                 ?___fttol 0049              __tdiv_to_l_ 0BEF  
           ??__div_to_l_ 0076                _convertir 1684                _scale$791 0045  
               ?_sprintf 0061           __size_of_scale 0250           __size_of_setup 0027  
         ___wmul@product 007C                clear_ram0 1579       __end_of__div_to_l_ 0141  
               Lcd_Out@x 0073                 Lcd_Out@y 0076             Lcd_Init@data 0074  
             _ADCON0bits 009D               _ADCON1bits 009E              __stringdata 1076  
      ___wmul@multiplier 0024               ?_convertir 0070                 _Lcd_Init 09FC  
       __size_of_Lcd_Cmd 0091         __size_of_Lcd_Out 0035         __size_of___awdiv 0054  
       __size_of___ftadd 00F6         __size_of___awmod 0047         __size_of___ftdiv 00A9  
       __size_of___ftneg 0008         __size_of___lldiv 0052         __size_of___ftmul 00B4  
       __size_of___llmod 0042         __size_of___ftsub 0019         __size_of___fttol 0087  
               ___awtoft 0004                 ___ftpack 17A0                 ___lltoft 15EC  
             _ANSELAbits 018C               sprintf@exp 00BB           Lcd_Chr_CP@data 0072  
               __ptext10 174C                 __ptext11 0BEF                 __ptext20 1649  
               __ptext12 0024                 __ptext21 1684                 __ptext13 15EC  
               __ptext22 0A92                 __ptext14 16C3                 __ptext23 0004  
               __ptext15 0800                 __ptext24 17A0                 __ptext16 0852  
               __ptext25 1614                 __ptext17 158E                 __ptext26 08D9  
               __ptext18 0CA5                 __ptext27 096A                 __ptext19 1586  
               __powers_ 104F         __size_of_sprintf 0464              Lcd_Cmd@data 0072  
          __size_of_main 0007            __size_of_loop 00FA              ??_convertir 0072  
            Lcd_Out@data 0077              pic14e$flags 007E                 scale@scl 0048  
              sprintf@ap 00A7         __tdiv_to_l_@exp1 0025                sprintf@vd 00A8  
       __tdiv_to_l_@cntr 0024                sprintf@sp 00BD         __tdiv_to_l_@quot 0020  
       ___lldiv@dividend 0074        __CFG_CLKOUTEN$OFF 0000               _OSCCONbits 0099  
           ?__tdiv_to_l_ 0070                 sprintf@c 00C1                 sprintf@f 0061  
       ___lldiv@quotient 0079  

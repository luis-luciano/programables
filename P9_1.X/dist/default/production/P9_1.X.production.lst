

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jun 02 11:47:13 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16LF1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     	;# 
    43  0001                     	;# 
    44  0002                     	;# 
    45  0003                     	;# 
    46  0004                     	;# 
    47  0005                     	;# 
    48  0006                     	;# 
    49  0007                     	;# 
    50  0008                     	;# 
    51  0009                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000D                     	;# 
    56  000E                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001E                     	;# 
    71  001F                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  008E                     	;# 
    75  0090                     	;# 
    76  0091                     	;# 
    77  0092                     	;# 
    78  0093                     	;# 
    79  0095                     	;# 
    80  0096                     	;# 
    81  0097                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009E                     	;# 
    90  010C                     	;# 
    91  010D                     	;# 
    92  010E                     	;# 
    93  0110                     	;# 
    94  0111                     	;# 
    95  0112                     	;# 
    96  0113                     	;# 
    97  0114                     	;# 
    98  0115                     	;# 
    99  0116                     	;# 
   100  0117                     	;# 
   101  0118                     	;# 
   102  0119                     	;# 
   103  011A                     	;# 
   104  011B                     	;# 
   105  011D                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0191                     	;# 
   109  0191                     	;# 
   110  0192                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0193                     	;# 
   114  0194                     	;# 
   115  0195                     	;# 
   116  0196                     	;# 
   117  0199                     	;# 
   118  019A                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019C                     	;# 
   124  019C                     	;# 
   125  019D                     	;# 
   126  019E                     	;# 
   127  019F                     	;# 
   128  020D                     	;# 
   129  0210                     	;# 
   130  0211                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0216                     	;# 
   137  0217                     	;# 
   138  0291                     	;# 
   139  0291                     	;# 
   140  0292                     	;# 
   141  0293                     	;# 
   142  0294                     	;# 
   143  0295                     	;# 
   144  0295                     	;# 
   145  0296                     	;# 
   146  0298                     	;# 
   147  0298                     	;# 
   148  0299                     	;# 
   149  029A                     	;# 
   150  029B                     	;# 
   151  029C                     	;# 
   152  029C                     	;# 
   153  029D                     	;# 
   154  029E                     	;# 
   155  029F                     	;# 
   156  0311                     	;# 
   157  0311                     	;# 
   158  0312                     	;# 
   159  0313                     	;# 
   160  0314                     	;# 
   161  0315                     	;# 
   162  0315                     	;# 
   163  0316                     	;# 
   164  0318                     	;# 
   165  0318                     	;# 
   166  0319                     	;# 
   167  031A                     	;# 
   168  031C                     	;# 
   169  031C                     	;# 
   170  031D                     	;# 
   171  031E                     	;# 
   172  0394                     	;# 
   173  0395                     	;# 
   174  0396                     	;# 
   175  0415                     	;# 
   176  0416                     	;# 
   177  0417                     	;# 
   178  041C                     	;# 
   179  041D                     	;# 
   180  041E                     	;# 
   181  0791                     	;# 
   182  0792                     	;# 
   183  0793                     	;# 
   184  0794                     	;# 
   185  0795                     	;# 
   186  0798                     	;# 
   187  0799                     	;# 
   188  07A0                     	;# 
   189  07A1                     	;# 
   190  07A3                     	;# 
   191  07A4                     	;# 
   192  07A6                     	;# 
   193  07A7                     	;# 
   194  07A9                     	;# 
   195  07AA                     	;# 
   196  0FE4                     	;# 
   197  0FE5                     	;# 
   198  0FE6                     	;# 
   199  0FE7                     	;# 
   200  0FE8                     	;# 
   201  0FE9                     	;# 
   202  0FEA                     	;# 
   203  0FEB                     	;# 
   204  0FED                     	;# 
   205  0FEE                     	;# 
   206  0FEF                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  0010                     	;# 
   223  0011                     	;# 
   224  0012                     	;# 
   225  0013                     	;# 
   226  0015                     	;# 
   227  0016                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001C                     	;# 
   235  001E                     	;# 
   236  001F                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0090                     	;# 
   241  0091                     	;# 
   242  0092                     	;# 
   243  0093                     	;# 
   244  0095                     	;# 
   245  0096                     	;# 
   246  0097                     	;# 
   247  0098                     	;# 
   248  0099                     	;# 
   249  009A                     	;# 
   250  009B                     	;# 
   251  009B                     	;# 
   252  009C                     	;# 
   253  009D                     	;# 
   254  009E                     	;# 
   255  010C                     	;# 
   256  010D                     	;# 
   257  010E                     	;# 
   258  0110                     	;# 
   259  0111                     	;# 
   260  0112                     	;# 
   261  0113                     	;# 
   262  0114                     	;# 
   263  0115                     	;# 
   264  0116                     	;# 
   265  0117                     	;# 
   266  0118                     	;# 
   267  0119                     	;# 
   268  011A                     	;# 
   269  011B                     	;# 
   270  011D                     	;# 
   271  018C                     	;# 
   272  018D                     	;# 
   273  0191                     	;# 
   274  0191                     	;# 
   275  0192                     	;# 
   276  0193                     	;# 
   277  0193                     	;# 
   278  0193                     	;# 
   279  0194                     	;# 
   280  0195                     	;# 
   281  0196                     	;# 
   282  0199                     	;# 
   283  019A                     	;# 
   284  019B                     	;# 
   285  019B                     	;# 
   286  019B                     	;# 
   287  019B                     	;# 
   288  019C                     	;# 
   289  019C                     	;# 
   290  019D                     	;# 
   291  019E                     	;# 
   292  019F                     	;# 
   293  020D                     	;# 
   294  0210                     	;# 
   295  0211                     	;# 
   296  0212                     	;# 
   297  0213                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0216                     	;# 
   302  0217                     	;# 
   303  0291                     	;# 
   304  0291                     	;# 
   305  0292                     	;# 
   306  0293                     	;# 
   307  0294                     	;# 
   308  0295                     	;# 
   309  0295                     	;# 
   310  0296                     	;# 
   311  0298                     	;# 
   312  0298                     	;# 
   313  0299                     	;# 
   314  029A                     	;# 
   315  029B                     	;# 
   316  029C                     	;# 
   317  029C                     	;# 
   318  029D                     	;# 
   319  029E                     	;# 
   320  029F                     	;# 
   321  0311                     	;# 
   322  0311                     	;# 
   323  0312                     	;# 
   324  0313                     	;# 
   325  0314                     	;# 
   326  0315                     	;# 
   327  0315                     	;# 
   328  0316                     	;# 
   329  0318                     	;# 
   330  0318                     	;# 
   331  0319                     	;# 
   332  031A                     	;# 
   333  031C                     	;# 
   334  031C                     	;# 
   335  031D                     	;# 
   336  031E                     	;# 
   337  0394                     	;# 
   338  0395                     	;# 
   339  0396                     	;# 
   340  0415                     	;# 
   341  0416                     	;# 
   342  0417                     	;# 
   343  041C                     	;# 
   344  041D                     	;# 
   345  041E                     	;# 
   346  0791                     	;# 
   347  0792                     	;# 
   348  0793                     	;# 
   349  0794                     	;# 
   350  0795                     	;# 
   351  0798                     	;# 
   352  0799                     	;# 
   353  07A0                     	;# 
   354  07A1                     	;# 
   355  07A3                     	;# 
   356  07A4                     	;# 
   357  07A6                     	;# 
   358  07A7                     	;# 
   359  07A9                     	;# 
   360  07AA                     	;# 
   361  0FE4                     	;# 
   362  0FE5                     	;# 
   363  0FE6                     	;# 
   364  0FE7                     	;# 
   365  0FE8                     	;# 
   366  0FE9                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEF                     	;# 
   372                           
   373                           	psect	stringtext
   374  1000                     __pstringtext:	
   375  1000                     _dpowers:	
   376  1000  3401               	retlw	1
   377  1001  3400               	retlw	0
   378  1002  3400               	retlw	0
   379  1003  3400               	retlw	0
   380  1004  340A               	retlw	10
   381  1005  3400               	retlw	0
   382  1006  3400               	retlw	0
   383  1007  3400               	retlw	0
   384  1008  3464               	retlw	100
   385  1009  3400               	retlw	0
   386  100A  3400               	retlw	0
   387  100B  3400               	retlw	0
   388  100C  34E8               	retlw	232
   389  100D  3403               	retlw	3
   390  100E  3400               	retlw	0
   391  100F  3400               	retlw	0
   392  1010  3410               	retlw	16
   393  1011  3427               	retlw	39
   394  1012  3400               	retlw	0
   395  1013  3400               	retlw	0
   396  1014  34A0               	retlw	160
   397  1015  3486               	retlw	134
   398  1016  3401               	retlw	1
   399  1017  3400               	retlw	0
   400  1018  3440               	retlw	64
   401  1019  3442               	retlw	66
   402  101A  340F               	retlw	15
   403  101B  3400               	retlw	0
   404  101C  3480               	retlw	128
   405  101D  3496               	retlw	150
   406  101E  3498               	retlw	152
   407  101F  3400               	retlw	0
   408  1020  3400               	retlw	0
   409  1021  34E1               	retlw	225
   410  1022  34F5               	retlw	245
   411  1023  3405               	retlw	5
   412  1024  3400               	retlw	0
   413  1025  34CA               	retlw	202
   414  1026  349A               	retlw	154
   415  1027  343B               	retlw	59
   416  1028                     __end_of_dpowers:	
   417  1028                     __npowers_:	
   418  1028  3400               	retlw	0
   419  1029  3480               	retlw	128
   420  102A  343F               	retlw	63
   421  102B  34CD               	retlw	205
   422  102C  34CC               	retlw	204
   423  102D  343D               	retlw	61
   424  102E  34D7               	retlw	215
   425  102F  3423               	retlw	35
   426  1030  343C               	retlw	60
   427  1031  3412               	retlw	18
   428  1032  3483               	retlw	131
   429  1033  343A               	retlw	58
   430  1034  34B7               	retlw	183
   431  1035  34D1               	retlw	209
   432  1036  3438               	retlw	56
   433  1037  34C6               	retlw	198
   434  1038  3427               	retlw	39
   435  1039  3437               	retlw	55
   436  103A  3438               	retlw	56
   437  103B  3486               	retlw	134
   438  103C  3435               	retlw	53
   439  103D  34C0               	retlw	192
   440  103E  34D6               	retlw	214
   441  103F  3433               	retlw	51
   442  1040  34CC               	retlw	204
   443  1041  342B               	retlw	43
   444  1042  3432               	retlw	50
   445  1043  3470               	retlw	112
   446  1044  3489               	retlw	137
   447  1045  3430               	retlw	48
   448  1046  34E7               	retlw	231
   449  1047  34DB               	retlw	219
   450  1048  342E               	retlw	46
   451  1049  34E5               	retlw	229
   452  104A  343C               	retlw	60
   453  104B  341E               	retlw	30
   454  104C  3442               	retlw	66
   455  104D  34A2               	retlw	162
   456  104E  340D               	retlw	13
   457  104F                     __end_of__npowers_:	
   458  104F                     __powers_:	
   459  104F  3400               	retlw	0
   460  1050  3480               	retlw	128
   461  1051  343F               	retlw	63
   462  1052  3400               	retlw	0
   463  1053  3420               	retlw	32
   464  1054  3441               	retlw	65
   465  1055  3400               	retlw	0
   466  1056  34C8               	retlw	200
   467  1057  3442               	retlw	66
   468  1058  3400               	retlw	0
   469  1059  347A               	retlw	122
   470  105A  3444               	retlw	68
   471  105B  3440               	retlw	64
   472  105C  341C               	retlw	28
   473  105D  3446               	retlw	70
   474  105E  3450               	retlw	80
   475  105F  34C3               	retlw	195
   476  1060  3447               	retlw	71
   477  1061  3424               	retlw	36
   478  1062  3474               	retlw	116
   479  1063  3449               	retlw	73
   480  1064  3497               	retlw	151
   481  1065  3418               	retlw	24
   482  1066  344B               	retlw	75
   483  1067  34BC               	retlw	188
   484  1068  34BE               	retlw	190
   485  1069  344C               	retlw	76
   486  106A  346B               	retlw	107
   487  106B  346E               	retlw	110
   488  106C  344E               	retlw	78
   489  106D  3403               	retlw	3
   490  106E  3415               	retlw	21
   491  106F  3450               	retlw	80
   492  1070  3479               	retlw	121
   493  1071  34AD               	retlw	173
   494  1072  3460               	retlw	96
   495  1073  34F3               	retlw	243
   496  1074  3449               	retlw	73
   497  1075  3471               	retlw	113
   498  1076                     __end_of__powers_:	
   499  1076                     __stringdata:	
   500  1076                     STR_1:	
   501  1076  3454               	retlw	84	;'T'
   502  1077  3465               	retlw	101	;'e'
   503  1078  346D               	retlw	109	;'m'
   504  1079  3470               	retlw	112	;'p'
   505  107A  3465               	retlw	101	;'e'
   506  107B  3472               	retlw	114	;'r'
   507  107C  3461               	retlw	97	;'a'
   508  107D  3474               	retlw	116	;'t'
   509  107E  3475               	retlw	117	;'u'
   510  107F  3472               	retlw	114	;'r'
   511  1080  3461               	retlw	97	;'a'
   512  1081  343D               	retlw	61	;'='
   513  1082  3420               	retlw	32	;' '
   514  1083  3425               	retlw	37	;'%'
   515  1084  3466               	retlw	102	;'f'
   516  1085  340A               	retlw	10
   517  1086  3400               	retlw	0
   518  1087                     __end_of__stringdata:	
   519                           
   520                           ; #config settings
   521  0000                     
   522                           	psect	nvBANK0
   523  006E                     __pnvBANK0:	
   524  006E                     _pos:	
   525  006E                     	ds	2
   526                           
   527                           	psect	nvBANK1
   528  00E3                     __pnvBANK1:	
   529  00E3                     _ant:	
   530  00E3                     	ds	3
   531  00E6                     _neg:	
   532  00E6                     	ds	2
   533  0011                     _PIR1bits	set	17
   534  000C                     _PORTA	set	12
   535  009D                     _ADCON0bits	set	157
   536  009E                     _ADCON1bits	set	158
   537  009C                     _ADRESH	set	156
   538  009B                     _ADRESL	set	155
   539  0099                     _OSCCONbits	set	153
   540  008C                     _TRISAbits	set	140
   541  008E                     _TRISCbits	set	142
   542  018C                     _ANSELAbits	set	396
   543  019F                     _BAUDCONbits	set	415
   544  0199                     _RCREG	set	409
   545  019D                     _RCSTA	set	413
   546  019D                     _RCSTAbits	set	413
   547  019B                     _SPBRG	set	411
   548  019A                     _TXREG	set	410
   549  019E                     _TXSTA	set	414
   550  019E                     _TXSTAbits	set	414
   551                           
   552                           	psect	cinit
   553  07F5                     start_initialization:	
   554  07F5                     __initialization:	
   555                           
   556                           ; Clear objects allocated to BANK1
   557  07F5  30C2               	movlw	low __pbssBANK1
   558  07F6  0084               	movwf	4
   559  07F7  3000               	movlw	high __pbssBANK1
   560  07F8  0085               	movwf	5
   561  07F9  3021               	movlw	33
   562  07FA  3197  2764         	fcall	clear_ram0
   563  07FC                     end_of_initialization:	
   564                           ;End of C runtime variable initialization code
   565                           
   566  07FC                     __end_of__initialization:	
   567  07FC  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   568  07FD  0020               	movlb	0
   569  07FE  3197  2F71         	ljmp	_main	;jump to C main() function
   570                           
   571                           	psect	bssBANK1
   572  00C2                     __pbssBANK1:	
   573  00C2                     _result:	
   574  00C2                     	ds	3
   575  00C5                     _buffer:	
   576  00C5                     	ds	30
   577                           
   578                           	psect	clrtext
   579  1764                     clear_ram0:	
   580                           ;	Called with FSR0 containing the base address, and
   581                           ;	WREG with the size to clear
   582                           
   583  1764  0064               	clrwdt	;clear the watchdog before getting into this loop
   584  1765                     clrloop0:	
   585  1765  0180               	clrf	0	;clear RAM location pointed to by FSR
   586  1766  3101               	addfsr 0,1
   587  1767  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   588  1768  2F65               	goto	clrloop0	;have we reached the end yet?
   589  1769  3400               	retlw	0	;all done for this memory range, return
   590                           
   591                           	psect	cstackBANK1
   592  00A0                     __pcstackBANK1:	
   593  00A0                     _sprintf$883:	
   594                           
   595                           ; 3 bytes @ 0x0
   596  00A0                     	ds	3
   597  00A3                     _sprintf$462:	
   598                           
   599                           ; 4 bytes @ 0x3
   600  00A3                     	ds	4
   601  00A7                     sprintf@ap:	
   602                           
   603                           ; 1 bytes @ 0x7
   604  00A7                     	ds	1
   605  00A8                     sprintf@vd:	
   606                           
   607                           ; 4 bytes @ 0x8
   608  00A8                     	ds	4
   609  00AC                     sprintf@vd_464:	
   610                           
   611                           ; 4 bytes @ 0xC
   612  00AC                     	ds	4
   613  00B0                     sprintf@flag:	
   614                           
   615                           ; 2 bytes @ 0x10
   616  00B0                     	ds	2
   617  00B2                     sprintf@prec:	
   618                           
   619                           ; 2 bytes @ 0x12
   620  00B2                     	ds	2
   621  00B4                     sprintf@_val:	
   622                           
   623                           ; 4 bytes @ 0x14
   624  00B4                     	ds	4
   625  00B8                     sprintf@integ:	
   626                           
   627                           ; 3 bytes @ 0x18
   628  00B8                     	ds	3
   629  00BB                     sprintf@exp:	
   630                           
   631                           ; 2 bytes @ 0x1B
   632  00BB                     	ds	2
   633  00BD                     sprintf@sp:	
   634                           
   635                           ; 1 bytes @ 0x1D
   636  00BD                     	ds	1
   637  00BE                     sprintf@fval:	
   638                           
   639                           ; 3 bytes @ 0x1E
   640  00BE                     	ds	3
   641  00C1                     sprintf@c:	
   642                           
   643                           ; 1 bytes @ 0x21
   644  00C1                     	ds	1
   645                           
   646                           	psect	cstackCOMMON
   647  0070                     __pcstackCOMMON:	
   648  0070                     ?_openEUSART:	
   649  0070                     ??_openEUSART:	
   650                           ; 0 bytes @ 0x0
   651                           
   652  0070                     ??_busyEUSART:	
   653                           ; 0 bytes @ 0x0
   654                           
   655  0070                     ?_putsEUSART:	
   656                           ; 0 bytes @ 0x0
   657                           
   658  0070                     ?_setup:	
   659                           ; 0 bytes @ 0x0
   660                           
   661  0070                     ??_setup:	
   662                           ; 0 bytes @ 0x0
   663                           
   664  0070                     ?_loop:	
   665                           ; 0 bytes @ 0x0
   666                           
   667  0070                     ?_main:	
   668                           ; 0 bytes @ 0x0
   669                           
   670  0070                     ?_writeEUSART:	
   671                           ; 0 bytes @ 0x0
   672                           
   673  0070                     ??_writeEUSART:	
   674                           ; 0 bytes @ 0x0
   675                           
   676  0070                     ?___ftge:	
   677                           ; 0 bytes @ 0x0
   678                           
   679  0070                     ?_busyEUSART:	
   680                           ; 1 bit 
   681                           
   682  0070                     ?_convertir:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?___awmod:	
   686                           ; 2 bytes @ 0x0
   687                           
   688  0070                     ?___ftpack:	
   689                           ; 2 bytes @ 0x0
   690                           
   691  0070                     ?___ftneg:	
   692                           ; 3 bytes @ 0x0
   693                           
   694  0070                     ?__tdiv_to_l_:	
   695                           ; 3 bytes @ 0x0
   696                           
   697  0070                     ?__div_to_l_:	
   698                           ; 4 bytes @ 0x0
   699                           
   700  0070                     ?___lldiv:	
   701                           ; 4 bytes @ 0x0
   702                           
   703  0070                     ?___llmod:	
   704                           ; 4 bytes @ 0x0
   705                           
   706  0070                     writeEUSART@data:	
   707                           ; 4 bytes @ 0x0
   708                           
   709  0070                     convertir@channel:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ___awmod@divisor:	
   713                           ; 2 bytes @ 0x0
   714                           
   715  0070                     __div_to_l_@f1:	
   716                           ; 2 bytes @ 0x0
   717                           
   718  0070                     ___ftpack@arg:	
   719                           ; 3 bytes @ 0x0
   720                           
   721  0070                     __tdiv_to_l_@f1:	
   722                           ; 3 bytes @ 0x0
   723                           
   724  0070                     ___ftge@ff1:	
   725                           ; 3 bytes @ 0x0
   726                           
   727  0070                     ___ftneg@f1:	
   728                           ; 3 bytes @ 0x0
   729                           
   730  0070                     ___lldiv@divisor:	
   731                           ; 3 bytes @ 0x0
   732                           
   733  0070                     ___llmod@divisor:	
   734                           ; 4 bytes @ 0x0
   735                           
   736                           
   737                           ; 4 bytes @ 0x0
   738  0070                     	ds	1
   739  0071                     ??_putsEUSART:	
   740  0071                     putsEUSART@buffer:	
   741                           ; 0 bytes @ 0x1
   742                           
   743                           
   744                           ; 1 bytes @ 0x1
   745  0071                     	ds	1
   746  0072                     ??_convertir:	
   747  0072                     ___awmod@dividend:	
   748                           ; 0 bytes @ 0x2
   749                           
   750                           
   751                           ; 2 bytes @ 0x2
   752  0072                     	ds	1
   753  0073                     ??___ftneg:	
   754  0073                     ___ftpack@exp:	
   755                           ; 0 bytes @ 0x3
   756                           
   757  0073                     __div_to_l_@f2:	
   758                           ; 1 bytes @ 0x3
   759                           
   760  0073                     __tdiv_to_l_@f2:	
   761                           ; 3 bytes @ 0x3
   762                           
   763  0073                     ___ftge@ff2:	
   764                           ; 3 bytes @ 0x3
   765                           
   766                           
   767                           ; 3 bytes @ 0x3
   768  0073                     	ds	1
   769  0074                     ??___awmod:	
   770  0074                     ___ftpack@sign:	
   771                           ; 0 bytes @ 0x4
   772                           
   773  0074                     ___lldiv@dividend:	
   774                           ; 1 bytes @ 0x4
   775                           
   776  0074                     ___llmod@dividend:	
   777                           ; 4 bytes @ 0x4
   778                           
   779                           
   780                           ; 4 bytes @ 0x4
   781  0074                     	ds	1
   782  0075                     ??___ftpack:	
   783  0075                     ___awmod@counter:	
   784                           ; 0 bytes @ 0x5
   785                           
   786                           
   787                           ; 1 bytes @ 0x5
   788  0075                     	ds	1
   789  0076                     ??__tdiv_to_l_:	
   790  0076                     ??__div_to_l_:	
   791                           ; 0 bytes @ 0x6
   792                           
   793  0076                     ??___ftge:	
   794                           ; 0 bytes @ 0x6
   795                           
   796  0076                     ___awmod@sign:	
   797                           ; 0 bytes @ 0x6
   798                           
   799                           
   800                           ; 1 bytes @ 0x6
   801  0076                     	ds	1
   802  0077                     ?___awdiv:	
   803  0077                     ___awdiv@divisor:	
   804                           ; 2 bytes @ 0x7
   805                           
   806                           
   807                           ; 2 bytes @ 0x7
   808  0077                     	ds	1
   809  0078                     ??___lldiv:	
   810  0078                     ??___llmod:	
   811                           ; 0 bytes @ 0x8
   812                           
   813  0078                     ?___awtoft:	
   814                           ; 0 bytes @ 0x8
   815                           
   816  0078                     ?___lltoft:	
   817                           ; 3 bytes @ 0x8
   818                           
   819  0078                     ___awtoft@c:	
   820                           ; 3 bytes @ 0x8
   821                           
   822  0078                     ___lltoft@c:	
   823                           ; 2 bytes @ 0x8
   824                           
   825                           
   826                           ; 4 bytes @ 0x8
   827  0078                     	ds	1
   828  0079                     ___llmod@counter:	
   829  0079                     convertir@i:	
   830                           ; 1 bytes @ 0x9
   831                           
   832  0079                     ___awdiv@dividend:	
   833                           ; 2 bytes @ 0x9
   834                           
   835  0079                     ___lldiv@quotient:	
   836                           ; 2 bytes @ 0x9
   837                           
   838                           
   839                           ; 4 bytes @ 0x9
   840  0079                     	ds	2
   841  007B                     ??___awdiv:	
   842  007B                     ??___awtoft:	
   843                           ; 0 bytes @ 0xB
   844                           
   845                           
   846                           ; 0 bytes @ 0xB
   847  007B                     	ds	1
   848  007C                     ??___wmul:	
   849  007C                     ??___lltoft:	
   850                           ; 0 bytes @ 0xC
   851                           
   852  007C                     ___wmul@product:	
   853                           ; 0 bytes @ 0xC
   854                           
   855                           
   856                           ; 2 bytes @ 0xC
   857  007C                     	ds	1
   858  007D                     ___awtoft@sign:	
   859  007D                     ___lldiv@counter:	
   860                           ; 1 bytes @ 0xD
   861                           
   862  007D                     ___lltoft@exp:	
   863                           ; 1 bytes @ 0xD
   864                           
   865                           
   866                           ; 1 bytes @ 0xD
   867  007D                     	ds	1
   868  007E                     ??_main:	
   869  007E                     ??___ftsub:	
   870                           ; 0 bytes @ 0xE
   871                           
   872                           
   873                           	psect	cstackBANK0
   874  0020                     __pcstackBANK0:	
   875                           ; 0 bytes @ 0xE
   876                           
   877  0020                     ?___ftdiv:	
   878  0020                     ___awdiv@counter:	
   879                           ; 3 bytes @ 0x0
   880                           
   881  0020                     ___ftdiv@f2:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  0020                     __div_to_l_@quot:	
   885                           ; 3 bytes @ 0x0
   886                           
   887  0020                     __tdiv_to_l_@quot:	
   888                           ; 4 bytes @ 0x0
   889                           
   890                           
   891                           ; 4 bytes @ 0x0
   892  0020                     	ds	1
   893  0021                     ___awdiv@sign:	
   894                           
   895                           ; 1 bytes @ 0x1
   896  0021                     	ds	1
   897  0022                     ___awdiv@quotient:	
   898                           
   899                           ; 2 bytes @ 0x2
   900  0022                     	ds	1
   901  0023                     ___ftdiv@f1:	
   902                           
   903                           ; 3 bytes @ 0x3
   904  0023                     	ds	1
   905  0024                     ?___wmul:	
   906  0024                     __div_to_l_@cntr:	
   907                           ; 2 bytes @ 0x4
   908                           
   909  0024                     __tdiv_to_l_@cntr:	
   910                           ; 1 bytes @ 0x4
   911                           
   912  0024                     ___wmul@multiplier:	
   913                           ; 1 bytes @ 0x4
   914                           
   915                           
   916                           ; 2 bytes @ 0x4
   917  0024                     	ds	1
   918  0025                     __div_to_l_@exp1:	
   919  0025                     __tdiv_to_l_@exp1:	
   920                           ; 1 bytes @ 0x5
   921                           
   922                           
   923                           ; 1 bytes @ 0x5
   924  0025                     	ds	1
   925  0026                     ??___ftdiv:	
   926  0026                     ___wmul@multiplicand:	
   927                           ; 0 bytes @ 0x6
   928                           
   929                           
   930                           ; 2 bytes @ 0x6
   931  0026                     	ds	4
   932  002A                     ___ftdiv@cntr:	
   933                           
   934                           ; 1 bytes @ 0xA
   935  002A                     	ds	1
   936  002B                     ___ftdiv@f3:	
   937                           
   938                           ; 3 bytes @ 0xB
   939  002B                     	ds	3
   940  002E                     ___ftdiv@exp:	
   941                           
   942                           ; 1 bytes @ 0xE
   943  002E                     	ds	1
   944  002F                     ___ftdiv@sign:	
   945                           
   946                           ; 1 bytes @ 0xF
   947  002F                     	ds	1
   948  0030                     ?___ftmul:	
   949  0030                     ___ftmul@f1:	
   950                           ; 3 bytes @ 0x10
   951                           
   952                           
   953                           ; 3 bytes @ 0x10
   954  0030                     	ds	3
   955  0033                     ___ftmul@f2:	
   956                           
   957                           ; 3 bytes @ 0x13
   958  0033                     	ds	3
   959  0036                     ??___ftmul:	
   960                           
   961                           ; 0 bytes @ 0x16
   962  0036                     	ds	4
   963  003A                     ___ftmul@exp:	
   964                           
   965                           ; 1 bytes @ 0x1A
   966  003A                     	ds	1
   967  003B                     ___ftmul@f3_as_product:	
   968                           
   969                           ; 3 bytes @ 0x1B
   970  003B                     	ds	3
   971  003E                     ___ftmul@cntr:	
   972                           
   973                           ; 1 bytes @ 0x1E
   974  003E                     	ds	1
   975  003F                     ___ftmul@sign:	
   976                           
   977                           ; 1 bytes @ 0x1F
   978  003F                     	ds	1
   979  0040                     ?_fround:	
   980  0040                     ?_scale:	
   981                           ; 3 bytes @ 0x20
   982                           
   983                           
   984                           ; 3 bytes @ 0x20
   985  0040                     	ds	3
   986  0043                     ??_fround:	
   987  0043                     ??_scale:	
   988                           ; 0 bytes @ 0x23
   989                           
   990                           
   991                           ; 0 bytes @ 0x23
   992  0043                     	ds	2
   993  0045                     _scale$882:	
   994                           
   995                           ; 3 bytes @ 0x25
   996  0045                     	ds	2
   997  0047                     _fround$881:	
   998                           
   999                           ; 3 bytes @ 0x27
  1000  0047                     	ds	1
  1001  0048                     scale@scl:	
  1002                           
  1003                           ; 1 bytes @ 0x28
  1004  0048                     	ds	1
  1005  0049                     ?___fttol:	
  1006  0049                     ___fttol@f1:	
  1007                           ; 4 bytes @ 0x29
  1008                           
  1009                           
  1010                           ; 3 bytes @ 0x29
  1011  0049                     	ds	1
  1012  004A                     _fround$880:	
  1013                           
  1014                           ; 3 bytes @ 0x2A
  1015  004A                     	ds	3
  1016  004D                     ??___fttol:	
  1017  004D                     fround@prec:	
  1018                           ; 0 bytes @ 0x2D
  1019                           
  1020                           
  1021                           ; 1 bytes @ 0x2D
  1022  004D                     	ds	1
  1023  004E                     ?___ftadd:	
  1024  004E                     ___ftadd@f1:	
  1025                           ; 3 bytes @ 0x2E
  1026                           
  1027                           
  1028                           ; 3 bytes @ 0x2E
  1029  004E                     	ds	3
  1030  0051                     ___fttol@sign1:	
  1031  0051                     ___ftadd@f2:	
  1032                           ; 1 bytes @ 0x31
  1033                           
  1034                           
  1035                           ; 3 bytes @ 0x31
  1036  0051                     	ds	1
  1037  0052                     ___fttol@lval:	
  1038                           
  1039                           ; 4 bytes @ 0x32
  1040  0052                     	ds	2
  1041  0054                     ??___ftadd:	
  1042                           
  1043                           ; 0 bytes @ 0x34
  1044  0054                     	ds	2
  1045  0056                     ___fttol@exp1:	
  1046                           
  1047                           ; 1 bytes @ 0x36
  1048  0056                     	ds	2
  1049  0058                     ___ftadd@sign:	
  1050                           
  1051                           ; 1 bytes @ 0x38
  1052  0058                     	ds	1
  1053  0059                     ___ftadd@exp2:	
  1054                           
  1055                           ; 1 bytes @ 0x39
  1056  0059                     	ds	1
  1057  005A                     ___ftadd@exp1:	
  1058                           
  1059                           ; 1 bytes @ 0x3A
  1060  005A                     	ds	1
  1061  005B                     ?___ftsub:	
  1062  005B                     ___ftsub@f2:	
  1063                           ; 3 bytes @ 0x3B
  1064                           
  1065                           
  1066                           ; 3 bytes @ 0x3B
  1067  005B                     	ds	3
  1068  005E                     ___ftsub@f1:	
  1069                           
  1070                           ; 3 bytes @ 0x3E
  1071  005E                     	ds	3
  1072  0061                     ?_sprintf:	
  1073  0061                     sprintf@f:	
  1074                           ; 2 bytes @ 0x41
  1075                           
  1076                           
  1077                           ; 2 bytes @ 0x41
  1078  0061                     	ds	5
  1079  0066                     ??_sprintf:	
  1080                           
  1081                           ; 0 bytes @ 0x46
  1082  0066                     	ds	6
  1083  006C                     ??_loop:	
  1084                           
  1085                           ; 0 bytes @ 0x4C
  1086  006C                     	ds	2
  1087                           
  1088                           	psect	maintext
  1089  1771                     __pmaintext:	
  1090 ;;
  1091 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1092 ;;
  1093 ;; *************** function _main *****************
  1094 ;; Defined at:
  1095 ;;		line 97 in file "principal.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;		None
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;		None
  1100 ;; Return value:  Size  Location     Type
  1101 ;;		None               void
  1102 ;; Registers used:
  1103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 17F/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1109 ;;      Params:         0       0       0       0       0       0       0       0
  1110 ;;      Locals:         0       0       0       0       0       0       0       0
  1111 ;;      Temps:          0       0       0       0       0       0       0       0
  1112 ;;      Totals:         0       0       0       0       0       0       0       0
  1113 ;;Total ram usage:        0 bytes
  1114 ;; Hardware stack levels required when called:    5
  1115 ;; This function calls:
  1116 ;;		_loop
  1117 ;;		_setup
  1118 ;; This function is called by:
  1119 ;;		Startup code after reset
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           
  1124                           ;psect for function _main
  1125  1771                     _main:	
  1126                           
  1127                           ;principal.c: 99: setup();
  1128                           
  1129                           ;incstack = 0
  1130                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1131  1771  3197  27E1  3197   	fcall	_setup
  1132                           
  1133                           ;principal.c: 100: loop();
  1134  1774  318C  24CC         	fcall	_loop
  1135                           
  1136                           ;principal.c: 101: return;
  1137  1776  3180  2802         	ljmp	start
  1138  1778                     __end_of_main:	
  1139                           
  1140                           	psect	text1
  1141  17E1                     __ptext1:	
  1142 ;; *************** function _setup *****************
  1143 ;; Defined at:
  1144 ;;		line 35 in file "principal.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;		None
  1149 ;; Return value:  Size  Location     Type
  1150 ;;		None               void
  1151 ;; Registers used:
  1152 ;;		wreg, status,2, status,0, pclath, cstack
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1158 ;;      Params:         0       0       0       0       0       0       0       0
  1159 ;;      Locals:         0       0       0       0       0       0       0       0
  1160 ;;      Temps:          0       0       0       0       0       0       0       0
  1161 ;;      Totals:         0       0       0       0       0       0       0       0
  1162 ;;Total ram usage:        0 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    1
  1165 ;; This function calls:
  1166 ;;		_openEUSART
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           
  1173                           ;psect for function _setup
  1174  17E1                     _setup:	
  1175                           
  1176                           ;principal.c: 37: OSCCONbits.IRCF=11;
  1177                           
  1178                           ;incstack = 0
  1179                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1180  17E1  0021               	movlb	1	; select bank1
  1181  17E2  0819               	movf	25,w	;volatile
  1182  17E3  3987               	andlw	-121
  1183  17E4  3858               	iorlw	88
  1184  17E5  0099               	movwf	25	;volatile
  1185                           
  1186                           ;principal.c: 39: ANSELAbits.ANSA0=1;
  1187  17E6  0023               	movlb	3	; select bank3
  1188  17E7  140C               	bsf	12,0	;volatile
  1189                           
  1190                           ;principal.c: 40: TRISAbits.TRISA0=1;
  1191  17E8  0021               	movlb	1	; select bank1
  1192  17E9  140C               	bsf	12,0	;volatile
  1193                           
  1194                           ;principal.c: 42: ANSELAbits.ANSA1=1;
  1195  17EA  0023               	movlb	3	; select bank3
  1196  17EB  148C               	bsf	12,1	;volatile
  1197                           
  1198                           ;principal.c: 43: TRISAbits.TRISA1=1;
  1199  17EC  0021               	movlb	1	; select bank1
  1200  17ED  148C               	bsf	12,1	;volatile
  1201                           
  1202                           ;principal.c: 44: PORTA=0x00;
  1203  17EE  0020               	movlb	0	; select bank0
  1204  17EF  018C               	clrf	12	;volatile
  1205                           
  1206                           ;principal.c: 46: ADCON0bits.ADON=0;
  1207  17F0  0021               	movlb	1	; select bank1
  1208  17F1  101D               	bcf	29,0	;volatile
  1209                           
  1210                           ;principal.c: 47: ADCON0bits.GO=0;
  1211  17F2  109D               	bcf	29,1	;volatile
  1212                           
  1213                           ;principal.c: 48: ADCON1bits.ADFM=1;
  1214  17F3  179E               	bsf	30,7	;volatile
  1215                           
  1216                           ;principal.c: 49: ADCON1bits.ADCS=6;
  1217  17F4  081E               	movf	30,w	;volatile
  1218  17F5  398F               	andlw	-113
  1219  17F6  3860               	iorlw	96
  1220  17F7  009E               	movwf	30	;volatile
  1221                           
  1222                           ;principal.c: 50: ADCON1bits.ADNREF=0;
  1223  17F8  111E               	bcf	30,2	;volatile
  1224                           
  1225                           ;principal.c: 51: ADCON1bits.ADPREF=0;
  1226  17F9  30FC               	movlw	-4
  1227  17FA  059E               	andwf	30,f	;volatile
  1228                           
  1229                           ;principal.c: 53: ADRESL=0x00;
  1230  17FB  019B               	clrf	27	;volatile
  1231                           
  1232                           ;principal.c: 54: ADRESH=0x00;
  1233  17FC  019C               	clrf	28	;volatile
  1234                           
  1235                           ;principal.c: 55: openEUSART();
  1236  17FD  3197  2780         	fcall	_openEUSART
  1237  17FF  0008               	return
  1238  1800                     __end_of_setup:	
  1239                           
  1240                           	psect	text2
  1241  1780                     __ptext2:	
  1242 ;; *************** function _openEUSART *****************
  1243 ;; Defined at:
  1244 ;;		line 11 in file "usart.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;		None
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;		None               void
  1251 ;; Registers used:
  1252 ;;		wreg, status,2
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1258 ;;      Params:         0       0       0       0       0       0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0       0       0
  1261 ;;      Totals:         0       0       0       0       0       0       0       0
  1262 ;;Total ram usage:        0 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; This function calls:
  1265 ;;		Nothing
  1266 ;; This function is called by:
  1267 ;;		_setup
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           
  1272                           ;psect for function _openEUSART
  1273  1780                     _openEUSART:	
  1274                           
  1275                           ;usart.c: 12: TXSTA=0;
  1276                           
  1277                           ;incstack = 0
  1278                           ; Regs used in _openEUSART: [wreg+status,2]
  1279  1780  0023               	movlb	3	; select bank3
  1280  1781  019E               	clrf	30	;volatile
  1281                           
  1282                           ;usart.c: 13: RCSTA=0;
  1283  1782  019D               	clrf	29	;volatile
  1284                           
  1285                           ;usart.c: 14: TXSTAbits.SYNC=0;
  1286  1783  121E               	bcf	30,4	;volatile
  1287                           
  1288                           ;usart.c: 15: TXSTAbits.BRGH=1;
  1289  1784  151E               	bsf	30,2	;volatile
  1290                           
  1291                           ;usart.c: 16: BAUDCONbits.BRG16=1;
  1292  1785  159F               	bsf	31,3	;volatile
  1293                           
  1294                           ;usart.c: 17: RCSTAbits.RX9D=0;
  1295  1786  101D               	bcf	29,0	;volatile
  1296                           
  1297                           ;usart.c: 18: SPBRG=25;
  1298  1787  3019               	movlw	25
  1299  1788  009B               	movwf	27	;volatile
  1300                           
  1301                           ;usart.c: 19: PIR1bits.RCIF=0;
  1302  1789  0020               	movlb	0	; select bank0
  1303  178A  1291               	bcf	17,5	;volatile
  1304                           
  1305                           ;usart.c: 20: PIR1bits.TXIF=0;
  1306  178B  1211               	bcf	17,4	;volatile
  1307                           
  1308                           ;usart.c: 21: RCSTAbits.SPEN=1;
  1309  178C  0023               	movlb	3	; select bank3
  1310  178D  179D               	bsf	29,7	;volatile
  1311                           
  1312                           ;usart.c: 22: TXSTAbits.TXEN=1;
  1313  178E  169E               	bsf	30,5	;volatile
  1314                           
  1315                           ;usart.c: 23: RCSTAbits.CREN=1;
  1316  178F  161D               	bsf	29,4	;volatile
  1317                           
  1318                           ;usart.c: 24: TRISCbits.TRISC6=0;
  1319  1790  0021               	movlb	1	; select bank1
  1320  1791  130E               	bcf	14,6	;volatile
  1321                           
  1322                           ;usart.c: 25: TRISCbits.TRISC7=1;
  1323  1792  178E               	bsf	14,7	;volatile
  1324  1793  0008               	return
  1325  1794                     __end_of_openEUSART:	
  1326                           
  1327                           	psect	text3
  1328  0CCC                     __ptext3:	
  1329 ;; *************** function _loop *****************
  1330 ;; Defined at:
  1331 ;;		line 77 in file "principal.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;		None
  1336 ;; Return value:  Size  Location     Type
  1337 ;;		None               void
  1338 ;; Registers used:
  1339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1345 ;;      Params:         0       0       0       0       0       0       0       0
  1346 ;;      Locals:         0       0       0       0       0       0       0       0
  1347 ;;      Temps:          0       2       0       0       0       0       0       0
  1348 ;;      Totals:         0       2       0       0       0       0       0       0
  1349 ;;Total ram usage:        2 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    4
  1352 ;; This function calls:
  1353 ;;		___awtoft
  1354 ;;		___ftdiv
  1355 ;;		___ftmul
  1356 ;;		_busyEUSART
  1357 ;;		_convertir
  1358 ;;		_putsEUSART
  1359 ;;		_sprintf
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           
  1366                           ;psect for function _loop
  1367  0CCC                     _loop:	
  1368  0CCC                     l48:	
  1369                           ;incstack = 0
  1370                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1371                           ;principal.c: 79: while(1)
  1372                           
  1373                           
  1374                           ;principal.c: 80: {
  1375                           ;principal.c: 81: ant=result;
  1376  0CCC  0021               	movlb	1	; select bank1
  1377  0CCD  0842               	movf	_result^(0+128),w
  1378  0CCE  00E3               	movwf	_ant^(0+128)
  1379  0CCF  0843               	movf	(_result+1)^(0+128),w
  1380  0CD0  00E4               	movwf	(_ant+1)^(0+128)
  1381  0CD1  0844               	movf	(_result+2)^(0+128),w
  1382  0CD2  00E5               	movwf	(_ant+2)^(0+128)
  1383                           
  1384                           ;principal.c: 82: pos=convertir(0);
  1385  0CD3  3000               	movlw	0
  1386  0CD4  00F0               	movwf	convertir@channel
  1387  0CD5  3000               	movlw	0
  1388  0CD6  00F1               	movwf	convertir@channel+1
  1389  0CD7  3188  2064  318C   	fcall	_convertir
  1390  0CDA  0871               	movf	?_convertir+1,w
  1391  0CDB  0020               	movlb	0	; select bank0
  1392  0CDC  01EF               	clrf	_pos+1
  1393  0CDD  07EF               	addwf	_pos+1,f
  1394  0CDE  0870               	movf	?_convertir,w
  1395  0CDF  01EE               	clrf	_pos
  1396  0CE0  07EE               	addwf	_pos,f
  1397                           
  1398                           ;principal.c: 83: neg=convertir(1);
  1399  0CE1  3001               	movlw	1
  1400  0CE2  00F0               	movwf	convertir@channel
  1401  0CE3  3000               	movlw	0
  1402  0CE4  00F1               	movwf	convertir@channel+1
  1403  0CE5  3188  2064  318C   	fcall	_convertir
  1404  0CE8  0871               	movf	?_convertir+1,w
  1405  0CE9  0021               	movlb	1	; select bank1
  1406  0CEA  01E7               	clrf	(_neg+1)^(0+128)
  1407  0CEB  07E7               	addwf	(_neg+1)^(0+128),f
  1408  0CEC  0870               	movf	?_convertir,w
  1409  0CED  01E6               	clrf	_neg^(0+128)
  1410  0CEE  07E6               	addwf	_neg^(0+128),f
  1411                           
  1412                           ;principal.c: 85: if(pos>neg)
  1413  0CEF  0867               	movf	(_neg+1)^(0+128),w
  1414  0CF0  3A80               	xorlw	128
  1415  0CF1  0020               	movlb	0	; select bank0
  1416  0CF2  00EC               	movwf	??_loop
  1417  0CF3  086F               	movf	_pos+1,w
  1418  0CF4  3A80               	xorlw	128
  1419  0CF5  026C               	subwf	??_loop,w
  1420  0CF6  1D03               	skipz
  1421  0CF7  2CFB               	goto	u3425
  1422  0CF8  086E               	movf	_pos,w
  1423  0CF9  0021               	movlb	1	; select bank1
  1424  0CFA  0266               	subwf	_neg^(0+128),w
  1425  0CFB                     u3425:	
  1426  0CFB  1803               	skipnc
  1427  0CFC  2D2D               	goto	l2417
  1428                           
  1429                           ;principal.c: 86: result=(pos-neg)/2.4f;
  1430  0CFD  309A               	movlw	154
  1431  0CFE  0020               	movlb	0	; select bank0
  1432  0CFF  00A0               	movwf	___ftdiv@f2
  1433  0D00  3019               	movlw	25
  1434  0D01  00A1               	movwf	___ftdiv@f2+1
  1435  0D02  3040               	movlw	64
  1436  0D03  00A2               	movwf	___ftdiv@f2+2
  1437  0D04  0021               	movlb	1	; select bank1
  1438  0D05  0966               	comf	_neg^(0+128),w
  1439  0D06  0020               	movlb	0	; select bank0
  1440  0D07  00EC               	movwf	??_loop
  1441  0D08  0021               	movlb	1	; select bank1
  1442  0D09  0967               	comf	(_neg+1)^(0+128),w
  1443  0D0A  0020               	movlb	0	; select bank0
  1444  0D0B  00ED               	movwf	??_loop+1
  1445  0D0C  0AEC               	incf	??_loop,f
  1446  0D0D  1903               	skipnz
  1447  0D0E  0AED               	incf	??_loop+1,f
  1448  0D0F  086E               	movf	_pos,w
  1449  0D10  076C               	addwf	??_loop,w
  1450  0D11  00F8               	movwf	___awtoft@c
  1451  0D12  086F               	movf	_pos+1,w
  1452  0D13  3D6D               	addwfc	??_loop+1,w
  1453  0D14  00F9               	movwf	___awtoft@c+1
  1454  0D15  3180  2004  318C   	fcall	___awtoft
  1455  0D18  0878               	movf	?___awtoft,w
  1456  0D19  0020               	movlb	0	; select bank0
  1457  0D1A  00A3               	movwf	___ftdiv@f1
  1458  0D1B  0879               	movf	?___awtoft+1,w
  1459  0D1C  00A4               	movwf	___ftdiv@f1+1
  1460  0D1D  087A               	movf	?___awtoft+2,w
  1461  0D1E  00A5               	movwf	___ftdiv@f1+2
  1462  0D1F  318A  22B9  318C   	fcall	___ftdiv
  1463  0D22  0020               	movlb	0	; select bank0
  1464  0D23  0820               	movf	?___ftdiv,w
  1465  0D24  0021               	movlb	1	; select bank1
  1466  0D25  00C2               	movwf	_result^(0+128)
  1467  0D26  0020               	movlb	0	; select bank0
  1468  0D27  0821               	movf	?___ftdiv+1,w
  1469  0D28  0021               	movlb	1	; select bank1
  1470  0D29  00C3               	movwf	(_result+1)^(0+128)
  1471  0D2A  0020               	movlb	0	; select bank0
  1472  0D2B  0822               	movf	?___ftdiv+2,w
  1473  0D2C  2D7D               	goto	L1
  1474  0D2D                     l2417:	
  1475                           
  1476                           ;principal.c: 87: else
  1477                           ;principal.c: 88: if(pos<neg)
  1478  0D2D  0020               	movlb	0	; select bank0
  1479  0D2E  086F               	movf	_pos+1,w
  1480  0D2F  3A80               	xorlw	128
  1481  0D30  00EC               	movwf	??_loop
  1482  0D31  0021               	movlb	1	; select bank1
  1483  0D32  0867               	movf	(_neg+1)^(0+128),w
  1484  0D33  3A80               	xorlw	128
  1485  0D34  0020               	movlb	0	; select bank0
  1486  0D35  026C               	subwf	??_loop,w
  1487  0D36  1D03               	skipz
  1488  0D37  2D3C               	goto	u3435
  1489  0D38  0021               	movlb	1	; select bank1
  1490  0D39  0866               	movf	_neg^(0+128),w
  1491  0D3A  0020               	movlb	0	; select bank0
  1492  0D3B  026E               	subwf	_pos,w
  1493  0D3C                     u3435:	
  1494  0D3C  1803               	skipnc
  1495  0D3D  2D7F               	goto	l2421
  1496                           
  1497                           ;principal.c: 89: result=((neg-pos)/2.4f)*-1;
  1498  0D3E  3000               	movlw	0
  1499  0D3F  0020               	movlb	0	; select bank0
  1500  0D40  00B0               	movwf	___ftmul@f1
  1501  0D41  3080               	movlw	128
  1502  0D42  00B1               	movwf	___ftmul@f1+1
  1503  0D43  30BF               	movlw	191
  1504  0D44  00B2               	movwf	___ftmul@f1+2
  1505  0D45  309A               	movlw	154
  1506  0D46  00A0               	movwf	___ftdiv@f2
  1507  0D47  3019               	movlw	25
  1508  0D48  00A1               	movwf	___ftdiv@f2+1
  1509  0D49  3040               	movlw	64
  1510  0D4A  00A2               	movwf	___ftdiv@f2+2
  1511  0D4B  096E               	comf	_pos,w
  1512  0D4C  00EC               	movwf	??_loop
  1513  0D4D  096F               	comf	_pos+1,w
  1514  0D4E  00ED               	movwf	??_loop+1
  1515  0D4F  0AEC               	incf	??_loop,f
  1516  0D50  1903               	skipnz
  1517  0D51  0AED               	incf	??_loop+1,f
  1518  0D52  0021               	movlb	1	; select bank1
  1519  0D53  0866               	movf	_neg^(0+128),w
  1520  0D54  0020               	movlb	0	; select bank0
  1521  0D55  076C               	addwf	??_loop,w
  1522  0D56  00F8               	movwf	___awtoft@c
  1523  0D57  0021               	movlb	1	; select bank1
  1524  0D58  0867               	movf	(_neg+1)^(0+128),w
  1525  0D59  0020               	movlb	0	; select bank0
  1526  0D5A  3D6D               	addwfc	??_loop+1,w
  1527  0D5B  00F9               	movwf	___awtoft@c+1
  1528  0D5C  3180  2004  318C   	fcall	___awtoft
  1529  0D5F  0878               	movf	?___awtoft,w
  1530  0D60  0020               	movlb	0	; select bank0
  1531  0D61  00A3               	movwf	___ftdiv@f1
  1532  0D62  0879               	movf	?___awtoft+1,w
  1533  0D63  00A4               	movwf	___ftdiv@f1+1
  1534  0D64  087A               	movf	?___awtoft+2,w
  1535  0D65  00A5               	movwf	___ftdiv@f1+2
  1536  0D66  318A  22B9  318C   	fcall	___ftdiv
  1537  0D69  0020               	movlb	0	; select bank0
  1538  0D6A  0820               	movf	?___ftdiv,w
  1539  0D6B  00B3               	movwf	___ftmul@f2
  1540  0D6C  0821               	movf	?___ftdiv+1,w
  1541  0D6D  00B4               	movwf	___ftmul@f2+1
  1542  0D6E  0822               	movf	?___ftdiv+2,w
  1543  0D6F  00B5               	movwf	___ftmul@f2+2
  1544  0D70  318B  2362  318C   	fcall	___ftmul
  1545  0D73  0020               	movlb	0	; select bank0
  1546  0D74  0830               	movf	?___ftmul,w
  1547  0D75  0021               	movlb	1	; select bank1
  1548  0D76  00C2               	movwf	_result^(0+128)
  1549  0D77  0020               	movlb	0	; select bank0
  1550  0D78  0831               	movf	?___ftmul+1,w
  1551  0D79  0021               	movlb	1	; select bank1
  1552  0D7A  00C3               	movwf	(_result+1)^(0+128)
  1553  0D7B  0020               	movlb	0	; select bank0
  1554  0D7C  0832               	movf	?___ftmul+2,w
  1555  0D7D                     L1:	
  1556  0D7D  0021               	movlb	1	; select bank1
  1557  0D7E  00C4               	movwf	(_result+2)^(0+128)
  1558  0D7F                     l2421:	
  1559                           
  1560                           ;principal.c: 90: sprintf(buffer,"Temperatura= %f\n",result);
  1561  0D7F  3076               	movlw	low (STR_1| (0+32768))
  1562  0D80  0020               	movlb	0	; select bank0
  1563  0D81  00E1               	movwf	sprintf@f
  1564  0D82  3090               	movlw	high (STR_1| (0+32768))
  1565  0D83  00E2               	movwf	sprintf@f+1
  1566  0D84  0021               	movlb	1	; select bank1
  1567  0D85  0842               	movf	_result^(0+128),w
  1568  0D86  0020               	movlb	0	; select bank0
  1569  0D87  00E3               	movwf	?_sprintf+2
  1570  0D88  0021               	movlb	1	; select bank1
  1571  0D89  0843               	movf	(_result+1)^(0+128),w
  1572  0D8A  0020               	movlb	0	; select bank0
  1573  0D8B  00E4               	movwf	?_sprintf+3
  1574  0D8C  0021               	movlb	1	; select bank1
  1575  0D8D  0844               	movf	(_result+2)^(0+128),w
  1576  0D8E  0020               	movlb	0	; select bank0
  1577  0D8F  00E5               	movwf	?_sprintf+4
  1578  0D90  30C5               	movlw	_buffer& (0+255)
  1579  0D91  3183  2391  318C   	fcall	_sprintf
  1580  0D94                     l2423:	
  1581                           ;principal.c: 91: while(busyEUSART());
  1582                           
  1583  0D94  3197  276A  318C   	fcall	_busyEUSART
  1584  0D97  3800               	iorlw	0
  1585  0D98  1D03               	skipz
  1586  0D99  2D94               	goto	l2423
  1587                           
  1588                           ;principal.c: 92: putsEUSART(buffer);
  1589  0D9A  30C5               	movlw	_buffer& (0+255)
  1590  0D9B  3197  2794  318C   	fcall	_putsEUSART
  1591  0D9E  2CCC               	goto	l48
  1592  0D9F                     __end_of_loop:	
  1593                           
  1594                           	psect	text4
  1595  0391                     __ptext4:	
  1596 ;; *************** function _sprintf *****************
  1597 ;; Defined at:
  1598 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  sp              1    wreg     PTR unsigned char 
  1601 ;;		 -> buffer(30), 
  1602 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  1603 ;;		 -> STR_1(17), 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  sp              1   29[BANK1 ] PTR unsigned char 
  1606 ;;		 -> buffer(30), 
  1607 ;;  vd              4    8[BANK1 ] unsigned long 
  1608 ;;  vd              4   12[BANK1 ] unsigned long 
  1609 ;;  _val            4   20[BANK1 ] struct .
  1610 ;;  fval            3   30[BANK1 ] struct .
  1611 ;;  integ           3   24[BANK1 ] struct .
  1612 ;;  ival            3    0        struct .
  1613 ;;  exp             2   27[BANK1 ] int 
  1614 ;;  prec            2   18[BANK1 ] int 
  1615 ;;  flag            2   16[BANK1 ] unsigned short 
  1616 ;;  width           2    0        int 
  1617 ;;  c               1   33[BANK1 ] char 
  1618 ;;  ap              1    7[BANK1 ] PTR void [1]
  1619 ;;		 -> ?_sprintf(2), 
  1620 ;;  d               1    0        unsigned char 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  2   65[BANK0 ] int 
  1623 ;; Registers used:
  1624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1630 ;;      Params:         0       5       0       0       0       0       0       0
  1631 ;;      Locals:         0       0      34       0       0       0       0       0
  1632 ;;      Temps:          0       6       0       0       0       0       0       0
  1633 ;;      Totals:         0      11      34       0       0       0       0       0
  1634 ;;Total ram usage:       45 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    3
  1637 ;; This function calls:
  1638 ;;		___awdiv
  1639 ;;		___ftadd
  1640 ;;		___ftge
  1641 ;;		___ftmul
  1642 ;;		___ftneg
  1643 ;;		___ftsub
  1644 ;;		___fttol
  1645 ;;		___lldiv
  1646 ;;		___llmod
  1647 ;;		___lltoft
  1648 ;;		___wmul
  1649 ;;		__div_to_l_
  1650 ;;		__tdiv_to_l_
  1651 ;;		_fround
  1652 ;;		_scale
  1653 ;; This function is called by:
  1654 ;;		_loop
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           
  1659                           ;psect for function _sprintf
  1660  0391                     _sprintf:	
  1661                           
  1662                           ;incstack = 0
  1663                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1664                           ;sprintf@sp stored from wreg
  1665  0391  0021               	movlb	1	; select bank1
  1666  0392  00BD               	movwf	sprintf@sp^(0+128)
  1667                           
  1668                           ;doprnt.c: 494: va_list ap;
  1669                           ;doprnt.c: 499: signed char c;
  1670                           ;doprnt.c: 501: int width;
  1671                           ;doprnt.c: 504: int prec;
  1672                           ;doprnt.c: 508: unsigned short flag;
  1673                           ;doprnt.c: 515: char d;
  1674                           ;doprnt.c: 516: double fval, integ;
  1675                           ;doprnt.c: 517: int exp;
  1676                           ;doprnt.c: 518: double ival;
  1677                           ;doprnt.c: 519: union {
  1678                           ;doprnt.c: 520: unsigned long _val;
  1679                           ;doprnt.c: 521: struct {
  1680                           ;doprnt.c: 522: const char * _cp;
  1681                           ;doprnt.c: 523: unsigned _len;
  1682                           ;doprnt.c: 524: } _str;
  1683                           ;doprnt.c: 525: } _val;
  1684                           ;doprnt.c: 542: *ap = __va_start();
  1685  0393  3063               	movlw	(?_sprintf+2)& (0+255)
  1686  0394  0020               	movlb	0	; select bank0
  1687  0395  00E6               	movwf	??_sprintf
  1688  0396  0866               	movf	??_sprintf,w
  1689  0397  0021               	movlb	1	; select bank1
  1690  0398  00A7               	movwf	sprintf@ap^(0+128)
  1691  0399                     l2343:	
  1692                           ;doprnt.c: 545: while(c = *f++) {
  1693                           
  1694  0399  0020               	movlb	0	; select bank0
  1695  039A  0862               	movf	sprintf@f+1,w
  1696  039B  00E7               	movwf	??_sprintf+1
  1697  039C  0861               	movf	sprintf@f,w
  1698  039D  00E6               	movwf	??_sprintf
  1699  039E  0AE1               	incf	sprintf@f,f
  1700  039F  1903               	skipnz
  1701  03A0  0AE2               	incf	sprintf@f+1,f
  1702  03A1  0866               	movf	??_sprintf,w
  1703  03A2  0084               	movwf	4
  1704  03A3  0867               	movf	??_sprintf+1,w
  1705  03A4  0085               	movwf	5
  1706  03A5  0800               	movf	0,w	;code access
  1707  03A6  00E8               	movwf	??_sprintf+2
  1708  03A7  0868               	movf	??_sprintf+2,w
  1709  03A8  0021               	movlb	1	; select bank1
  1710  03A9  00C1               	movwf	sprintf@c^(0+128)
  1711  03AA  08C1               	movf	sprintf@c^(0+128),f
  1712  03AB  1903               	btfsc	3,2
  1713  03AC  2FF0               	goto	l2345
  1714                           
  1715                           ;doprnt.c: 547: if(c != '%')
  1716  03AD  0841               	movf	sprintf@c^(0+128),w
  1717  03AE  3A25               	xorlw	37
  1718  03AF  1903               	skipnz
  1719  03B0  2BB4               	goto	l2187
  1720                           
  1721                           ;doprnt.c: 549: {
  1722                           ;doprnt.c: 550: ((*sp++ = (c)));
  1723  03B1  0841               	movf	sprintf@c^(0+128),w
  1724  03B2  0020               	movlb	0	; select bank0
  1725  03B3  2FE2               	goto	L6
  1726  03B4                     l2187:	
  1727                           ;doprnt.c: 551: continue;
  1728                           
  1729                           
  1730                           ;doprnt.c: 552: }
  1731                           ;doprnt.c: 557: flag = 0;
  1732  03B4  01B0               	clrf	sprintf@flag^(0+128)
  1733  03B5  01B1               	clrf	(sprintf@flag+1)^(0+128)
  1734                           
  1735                           ;doprnt.c: 644: switch(c = *f++) {
  1736  03B6  2BB9               	goto	l2191
  1737  03B7                     l146:	
  1738                           ;doprnt.c: 671: case 'f':
  1739                           
  1740                           ;doprnt.c: 647: goto alldone;
  1741                           
  1742                           ;doprnt.c: 646: case 0:
  1743                           
  1744                           
  1745                           ;doprnt.c: 672: flag |= 0x400;
  1746  03B7  1531               	bsf	(sprintf@flag^(0+128)+1),2
  1747                           
  1748                           ;doprnt.c: 673: break;
  1749  03B8  2BCF               	goto	l2193
  1750  03B9                     l2191:	
  1751                           ;doprnt.c: 831: }
  1752                           
  1753                           ;doprnt.c: 822: continue;
  1754                           
  1755                           ;doprnt.c: 811: default:
  1756                           
  1757  03B9  0020               	movlb	0	; select bank0
  1758  03BA  0862               	movf	sprintf@f+1,w
  1759  03BB  00E7               	movwf	??_sprintf+1
  1760  03BC  0861               	movf	sprintf@f,w
  1761  03BD  00E6               	movwf	??_sprintf
  1762  03BE  0AE1               	incf	sprintf@f,f
  1763  03BF  1903               	skipnz
  1764  03C0  0AE2               	incf	sprintf@f+1,f
  1765  03C1  0866               	movf	??_sprintf,w
  1766  03C2  0084               	movwf	4
  1767  03C3  0867               	movf	??_sprintf+1,w
  1768  03C4  0085               	movwf	5
  1769  03C5  0800               	movf	0,w	;code access
  1770  03C6  0021               	movlb	1	; select bank1
  1771  03C7  00C1               	movwf	sprintf@c^(0+128)
  1772                           
  1773                           ; Switch size 1, requested type "space"
  1774                           ; Number of cases is 2, Range of values is 0 to 102
  1775                           ; switch strategies available:
  1776                           ; Name         Instructions Cycles
  1777                           ; simple_byte            7     4 (average)
  1778                           ; direct_byte          212     6 (fixed)
  1779                           ; jumptable            260     6 (fixed)
  1780                           ;	Chosen strategy is simple_byte
  1781  03C8  3A00               	xorlw	0	; case 0
  1782  03C9  1903               	skipnz
  1783  03CA  2FF0               	goto	l2345
  1784  03CB  3A66               	xorlw	102	; case 102
  1785  03CC  1903               	skipnz
  1786  03CD  2BB7               	goto	l146
  1787  03CE  2B99               	goto	l2343
  1788  03CF                     l2193:	
  1789                           
  1790                           ;doprnt.c: 834: if(flag & (0x700)) {
  1791  03CF  3000               	movlw	0
  1792  03D0  0530               	andwf	sprintf@flag^(0+128),w
  1793  03D1  0020               	movlb	0	; select bank0
  1794  03D2  00E6               	movwf	??_sprintf
  1795  03D3  3007               	movlw	7
  1796  03D4  0021               	movlb	1	; select bank1
  1797  03D5  0531               	andwf	(sprintf@flag+1)^(0+128),w
  1798  03D6  0020               	movlb	0	; select bank0
  1799  03D7  00E7               	movwf	??_sprintf+1
  1800  03D8  0867               	movf	??_sprintf+1,w
  1801  03D9  0466               	iorwf	??_sprintf,w
  1802  03DA  1903               	skipnz
  1803  03DB  2FD3               	goto	l2337
  1804                           
  1805                           ;doprnt.c: 838: prec = 6;
  1806  03DC  3006               	movlw	6
  1807  03DD  0021               	movlb	1	; select bank1
  1808  03DE  00B2               	movwf	sprintf@prec^(0+128)
  1809  03DF  3000               	movlw	0
  1810  03E0  00B3               	movwf	(sprintf@prec^(0+128)+1)
  1811                           
  1812                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1813  03E1  0827               	movf	sprintf@ap^(0+128),w
  1814  03E2  0086               	movwf	6
  1815  03E3  0187               	clrf	7
  1816  03E4  3F40               	moviw [0]fsr1
  1817  03E5  00BE               	movwf	sprintf@fval^(0+128)
  1818  03E6  3F41               	moviw [1]fsr1
  1819  03E7  00BF               	movwf	(sprintf@fval+1)^(0+128)
  1820  03E8  3F42               	moviw [2]fsr1
  1821  03E9  00C0               	movwf	(sprintf@fval+2)^(0+128)
  1822  03EA  3003               	movlw	3
  1823  03EB  0020               	movlb	0	; select bank0
  1824  03EC  00E6               	movwf	??_sprintf
  1825  03ED  0866               	movf	??_sprintf,w
  1826  03EE  0021               	movlb	1	; select bank1
  1827  03EF  07A7               	addwf	sprintf@ap^(0+128),f
  1828                           
  1829                           ;doprnt.c: 840: if(fval < 0.0) {
  1830  03F0  083E               	movf	sprintf@fval^(0+128),w
  1831  03F1  00F0               	movwf	___ftge@ff1
  1832  03F2  083F               	movf	(sprintf@fval+1)^(0+128),w
  1833  03F3  00F1               	movwf	___ftge@ff1+1
  1834  03F4  0840               	movf	(sprintf@fval+2)^(0+128),w
  1835  03F5  00F2               	movwf	___ftge@ff1+2
  1836  03F6  3000               	movlw	0
  1837  03F7  00F3               	movwf	___ftge@ff2
  1838  03F8  3000               	movlw	0
  1839  03F9  00F4               	movwf	___ftge@ff2+1
  1840  03FA  3000               	movlw	0
  1841  03FB  00F5               	movwf	___ftge@ff2+2
  1842  03FC  3188  2029  3183   	fcall	___ftge
  1843  03FF  1803               	btfsc	3,0
  1844  0400  2C16               	goto	l2207
  1845                           
  1846                           ;doprnt.c: 841: fval = -fval;
  1847  0401  0021               	movlb	1	; select bank1
  1848  0402  083E               	movf	sprintf@fval^(0+128),w
  1849  0403  00F0               	movwf	___ftneg@f1
  1850  0404  083F               	movf	(sprintf@fval+1)^(0+128),w
  1851  0405  00F1               	movwf	___ftneg@f1+1
  1852  0406  0840               	movf	(sprintf@fval+2)^(0+128),w
  1853  0407  00F2               	movwf	___ftneg@f1+2
  1854  0408  3197  2778  3183   	fcall	___ftneg
  1855  040B  0870               	movf	?___ftneg,w
  1856  040C  0021               	movlb	1	; select bank1
  1857  040D  00BE               	movwf	sprintf@fval^(0+128)
  1858  040E  0871               	movf	?___ftneg+1,w
  1859  040F  00BF               	movwf	(sprintf@fval+1)^(0+128)
  1860  0410  0872               	movf	?___ftneg+2,w
  1861  0411  00C0               	movwf	(sprintf@fval+2)^(0+128)
  1862                           
  1863                           ;doprnt.c: 842: flag |= 0x03;
  1864  0412  3003               	movlw	3
  1865  0413  04B0               	iorwf	sprintf@flag^(0+128),f
  1866  0414  3000               	movlw	0
  1867  0415  04B1               	iorwf	(sprintf@flag+1)^(0+128),f
  1868  0416                     l2207:	
  1869                           
  1870                           ;doprnt.c: 843: }
  1871                           ;doprnt.c: 844: exp = 0;
  1872  0416  0021               	movlb	1	; select bank1
  1873  0417  01BB               	clrf	sprintf@exp^(0+128)
  1874  0418  01BC               	clrf	(sprintf@exp+1)^(0+128)
  1875                           
  1876                           ;doprnt.c: 845: if( fval!=0) {
  1877  0419  0840               	movf	(sprintf@fval+2)^(0+128),w
  1878  041A  043F               	iorwf	(sprintf@fval+1)^(0+128),w
  1879  041B  043E               	iorwf	sprintf@fval^(0+128),w
  1880  041C  1903               	skipnz
  1881  041D  2CDE               	goto	l151
  1882                           
  1883                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1884  041E  30BE               	movlw	low sprintf@fval
  1885  041F  0086               	movwf	6
  1886  0420  0187               	clrf	7
  1887  0421  3F40               	moviw [0]fsr1
  1888  0422  0020               	movlb	0	; select bank0
  1889  0423  00E6               	movwf	??_sprintf
  1890  0424  3F41               	moviw [1]fsr1
  1891  0425  00E7               	movwf	??_sprintf+1
  1892  0426  3F42               	moviw [2]fsr1
  1893  0427  00E8               	movwf	??_sprintf+2
  1894  0428  3F43               	moviw [3]fsr1
  1895  0429  00E9               	movwf	??_sprintf+3
  1896  042A  300F               	movlw	15
  1897  042B                     u3095:	
  1898  042B  36E9               	lsrf	??_sprintf+3,f
  1899  042C  0CE8               	rrf	??_sprintf+2,f
  1900  042D  0CE7               	rrf	??_sprintf+1,f
  1901  042E  0CE6               	rrf	??_sprintf,f
  1902  042F  0B89               	decfsz	9,f
  1903  0430  2C2B               	goto	u3095
  1904  0431  30FF               	movlw	255
  1905  0432  0566               	andwf	??_sprintf,w
  1906  0433  00EA               	movwf	??_sprintf+4
  1907  0434  3000               	movlw	0
  1908  0435  0567               	andwf	??_sprintf+1,w
  1909  0436  00EB               	movwf	??_sprintf+5
  1910  0437  086A               	movf	??_sprintf+4,w
  1911  0438  3E82               	addlw	130
  1912  0439  0021               	movlb	1	; select bank1
  1913  043A  00BB               	movwf	sprintf@exp^(0+128)
  1914  043B  30FF               	movlw	255
  1915  043C  0020               	movlb	0	; select bank0
  1916  043D  3D6B               	addwfc	??_sprintf+5,w
  1917  043E  0021               	movlb	1	; select bank1
  1918  043F  00BC               	movwf	(sprintf@exp+1)^(0+128)
  1919                           
  1920                           ;doprnt.c: 847: exp--;
  1921  0440  30FF               	movlw	255
  1922  0441  07BB               	addwf	sprintf@exp^(0+128),f
  1923  0442  30FF               	movlw	255
  1924  0443  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  1925                           
  1926                           ;doprnt.c: 848: exp *= 3;
  1927  0444  3003               	movlw	3
  1928  0445  0020               	movlb	0	; select bank0
  1929  0446  00A4               	movwf	___wmul@multiplier
  1930  0447  3000               	movlw	0
  1931  0448  00A5               	movwf	___wmul@multiplier+1
  1932  0449  0021               	movlb	1	; select bank1
  1933  044A  083C               	movf	(sprintf@exp+1)^(0+128),w
  1934  044B  0020               	movlb	0	; select bank0
  1935  044C  01A7               	clrf	___wmul@multiplicand+1
  1936  044D  07A7               	addwf	___wmul@multiplicand+1,f
  1937  044E  0021               	movlb	1	; select bank1
  1938  044F  083B               	movf	sprintf@exp^(0+128),w
  1939  0450  0020               	movlb	0	; select bank0
  1940  0451  01A6               	clrf	___wmul@multiplicand
  1941  0452  07A6               	addwf	___wmul@multiplicand,f
  1942  0453  3197  27C3  3183   	fcall	___wmul
  1943  0456  0020               	movlb	0	; select bank0
  1944  0457  0825               	movf	?___wmul+1,w
  1945  0458  0021               	movlb	1	; select bank1
  1946  0459  01BC               	clrf	(sprintf@exp+1)^(0+128)
  1947  045A  07BC               	addwf	(sprintf@exp+1)^(0+128),f
  1948  045B  0020               	movlb	0	; select bank0
  1949  045C  0824               	movf	?___wmul,w
  1950  045D  0021               	movlb	1	; select bank1
  1951  045E  01BB               	clrf	sprintf@exp^(0+128)
  1952  045F  07BB               	addwf	sprintf@exp^(0+128),f
  1953                           
  1954                           ;doprnt.c: 849: exp /= 10;
  1955  0460  300A               	movlw	10
  1956  0461  00F7               	movwf	___awdiv@divisor
  1957  0462  3000               	movlw	0
  1958  0463  00F8               	movwf	___awdiv@divisor+1
  1959  0464  083C               	movf	(sprintf@exp+1)^(0+128),w
  1960  0465  01FA               	clrf	___awdiv@dividend+1
  1961  0466  07FA               	addwf	___awdiv@dividend+1,f
  1962  0467  083B               	movf	sprintf@exp^(0+128),w
  1963  0468  01F9               	clrf	___awdiv@dividend
  1964  0469  07F9               	addwf	___awdiv@dividend,f
  1965  046A  3189  217E  3183   	fcall	___awdiv
  1966  046D  0878               	movf	?___awdiv+1,w
  1967  046E  0021               	movlb	1	; select bank1
  1968  046F  01BC               	clrf	(sprintf@exp+1)^(0+128)
  1969  0470  07BC               	addwf	(sprintf@exp+1)^(0+128),f
  1970  0471  0877               	movf	?___awdiv,w
  1971  0472  01BB               	clrf	sprintf@exp^(0+128)
  1972  0473  07BB               	addwf	sprintf@exp^(0+128),f
  1973                           
  1974                           ;doprnt.c: 850: if(exp < 0)
  1975  0474  1FBC               	btfss	(sprintf@exp+1)^(0+128),7
  1976  0475  2C7A               	goto	l2223
  1977                           
  1978                           ;doprnt.c: 851: exp--;
  1979  0476  30FF               	movlw	255
  1980  0477  07BB               	addwf	sprintf@exp^(0+128),f
  1981  0478  30FF               	movlw	255
  1982  0479  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  1983  047A                     l2223:	
  1984                           
  1985                           ;doprnt.c: 855: integ = scale(-exp);
  1986  047A  033B               	decf	sprintf@exp^(0+128),w
  1987  047B  3AFF               	xorlw	255
  1988  047C  3181  2141  3183   	fcall	_scale
  1989  047F  0020               	movlb	0	; select bank0
  1990  0480  0840               	movf	?_scale,w
  1991  0481  0021               	movlb	1	; select bank1
  1992  0482  00B8               	movwf	sprintf@integ^(0+128)
  1993  0483  0020               	movlb	0	; select bank0
  1994  0484  0841               	movf	?_scale+1,w
  1995  0485  0021               	movlb	1	; select bank1
  1996  0486  00B9               	movwf	(sprintf@integ+1)^(0+128)
  1997  0487  0020               	movlb	0	; select bank0
  1998  0488  0842               	movf	?_scale+2,w
  1999  0489  0021               	movlb	1	; select bank1
  2000  048A  00BA               	movwf	(sprintf@integ+2)^(0+128)
  2001                           
  2002                           ;doprnt.c: 856: integ *= fval;
  2003  048B  083E               	movf	sprintf@fval^(0+128),w
  2004  048C  0020               	movlb	0	; select bank0
  2005  048D  00B0               	movwf	___ftmul@f1
  2006  048E  0021               	movlb	1	; select bank1
  2007  048F  083F               	movf	(sprintf@fval+1)^(0+128),w
  2008  0490  0020               	movlb	0	; select bank0
  2009  0491  00B1               	movwf	___ftmul@f1+1
  2010  0492  0021               	movlb	1	; select bank1
  2011  0493  0840               	movf	(sprintf@fval+2)^(0+128),w
  2012  0494  0020               	movlb	0	; select bank0
  2013  0495  00B2               	movwf	___ftmul@f1+2
  2014  0496  0021               	movlb	1	; select bank1
  2015  0497  0838               	movf	sprintf@integ^(0+128),w
  2016  0498  0020               	movlb	0	; select bank0
  2017  0499  00B3               	movwf	___ftmul@f2
  2018  049A  0021               	movlb	1	; select bank1
  2019  049B  0839               	movf	(sprintf@integ+1)^(0+128),w
  2020  049C  0020               	movlb	0	; select bank0
  2021  049D  00B4               	movwf	___ftmul@f2+1
  2022  049E  0021               	movlb	1	; select bank1
  2023  049F  083A               	movf	(sprintf@integ+2)^(0+128),w
  2024  04A0  0020               	movlb	0	; select bank0
  2025  04A1  00B5               	movwf	___ftmul@f2+2
  2026  04A2  318B  2362  3183   	fcall	___ftmul
  2027  04A5  0020               	movlb	0	; select bank0
  2028  04A6  0830               	movf	?___ftmul,w
  2029  04A7  0021               	movlb	1	; select bank1
  2030  04A8  00B8               	movwf	sprintf@integ^(0+128)
  2031  04A9  0020               	movlb	0	; select bank0
  2032  04AA  0831               	movf	?___ftmul+1,w
  2033  04AB  0021               	movlb	1	; select bank1
  2034  04AC  00B9               	movwf	(sprintf@integ+1)^(0+128)
  2035  04AD  0020               	movlb	0	; select bank0
  2036  04AE  0832               	movf	?___ftmul+2,w
  2037  04AF  0021               	movlb	1	; select bank1
  2038  04B0  00BA               	movwf	(sprintf@integ+2)^(0+128)
  2039                           
  2040                           ;doprnt.c: 857: if(integ < 1.0)
  2041  04B1  0838               	movf	sprintf@integ^(0+128),w
  2042  04B2  00F0               	movwf	___ftge@ff1
  2043  04B3  0839               	movf	(sprintf@integ+1)^(0+128),w
  2044  04B4  00F1               	movwf	___ftge@ff1+1
  2045  04B5  083A               	movf	(sprintf@integ+2)^(0+128),w
  2046  04B6  00F2               	movwf	___ftge@ff1+2
  2047  04B7  3000               	movlw	0
  2048  04B8  00F3               	movwf	___ftge@ff2
  2049  04B9  3080               	movlw	128
  2050  04BA  00F4               	movwf	___ftge@ff2+1
  2051  04BB  303F               	movlw	63
  2052  04BC  00F5               	movwf	___ftge@ff2+2
  2053  04BD  3188  2029  3183   	fcall	___ftge
  2054  04C0  1803               	btfsc	3,0
  2055  04C1  2CC7               	goto	l2231
  2056                           
  2057                           ;doprnt.c: 858: exp--;
  2058  04C2  30FF               	movlw	255
  2059  04C3  0021               	movlb	1	; select bank1
  2060  04C4  07BB               	addwf	sprintf@exp^(0+128),f
  2061  04C5  30FF               	movlw	255
  2062  04C6  2CDD               	goto	L2
  2063  04C7                     l2231:	
  2064                           
  2065                           ;doprnt.c: 859: else if(integ >= 10.0)
  2066  04C7  0021               	movlb	1	; select bank1
  2067  04C8  0838               	movf	sprintf@integ^(0+128),w
  2068  04C9  00F0               	movwf	___ftge@ff1
  2069  04CA  0839               	movf	(sprintf@integ+1)^(0+128),w
  2070  04CB  00F1               	movwf	___ftge@ff1+1
  2071  04CC  083A               	movf	(sprintf@integ+2)^(0+128),w
  2072  04CD  00F2               	movwf	___ftge@ff1+2
  2073  04CE  3000               	movlw	0
  2074  04CF  00F3               	movwf	___ftge@ff2
  2075  04D0  3020               	movlw	32
  2076  04D1  00F4               	movwf	___ftge@ff2+1
  2077  04D2  3041               	movlw	65
  2078  04D3  00F5               	movwf	___ftge@ff2+2
  2079  04D4  3188  2029  3183   	fcall	___ftge
  2080  04D7  1C03               	btfss	3,0
  2081  04D8  2CDE               	goto	l151
  2082                           
  2083                           ;doprnt.c: 860: exp++;
  2084  04D9  3001               	movlw	1
  2085  04DA  0021               	movlb	1	; select bank1
  2086  04DB  07BB               	addwf	sprintf@exp^(0+128),f
  2087  04DC  3000               	movlw	0
  2088  04DD                     L2:	
  2089  04DD  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2090  04DE                     l151:	
  2091                           
  2092                           ;doprnt.c: 861: }
  2093                           ;doprnt.c: 1121: if(prec <= 12)
  2094  04DE  0021               	movlb	1	; select bank1
  2095  04DF  0833               	movf	(sprintf@prec+1)^(0+128),w
  2096  04E0  3A80               	xorlw	128
  2097  04E1  0020               	movlb	0	; select bank0
  2098  04E2  00E6               	movwf	??_sprintf
  2099  04E3  3080               	movlw	128
  2100  04E4  0266               	subwf	??_sprintf,w
  2101  04E5  1D03               	skipz
  2102  04E6  2CEA               	goto	u3135
  2103  04E7  300D               	movlw	13
  2104  04E8  0021               	movlb	1	; select bank1
  2105  04E9  0232               	subwf	sprintf@prec^(0+128),w
  2106  04EA                     u3135:	
  2107  04EA  1803               	skipnc
  2108  04EB  2D13               	goto	l2237
  2109                           
  2110                           ;doprnt.c: 1122: fval += fround(prec);
  2111  04EC  0021               	movlb	1	; select bank1
  2112  04ED  0832               	movf	sprintf@prec^(0+128),w
  2113  04EE  318E  2695  3183   	fcall	_fround
  2114  04F1  0020               	movlb	0	; select bank0
  2115  04F2  0840               	movf	?_fround,w
  2116  04F3  00CE               	movwf	___ftadd@f1
  2117  04F4  0841               	movf	?_fround+1,w
  2118  04F5  00CF               	movwf	___ftadd@f1+1
  2119  04F6  0842               	movf	?_fround+2,w
  2120  04F7  00D0               	movwf	___ftadd@f1+2
  2121  04F8  0021               	movlb	1	; select bank1
  2122  04F9  083E               	movf	sprintf@fval^(0+128),w
  2123  04FA  0020               	movlb	0	; select bank0
  2124  04FB  00D1               	movwf	___ftadd@f2
  2125  04FC  0021               	movlb	1	; select bank1
  2126  04FD  083F               	movf	(sprintf@fval+1)^(0+128),w
  2127  04FE  0020               	movlb	0	; select bank0
  2128  04FF  00D2               	movwf	___ftadd@f2+1
  2129  0500  0021               	movlb	1	; select bank1
  2130  0501  0840               	movf	(sprintf@fval+2)^(0+128),w
  2131  0502  0020               	movlb	0	; select bank0
  2132  0503  00D3               	movwf	___ftadd@f2+2
  2133  0504  318D  259F  3183   	fcall	___ftadd
  2134  0507  0020               	movlb	0	; select bank0
  2135  0508  084E               	movf	?___ftadd,w
  2136  0509  0021               	movlb	1	; select bank1
  2137  050A  00BE               	movwf	sprintf@fval^(0+128)
  2138  050B  0020               	movlb	0	; select bank0
  2139  050C  084F               	movf	?___ftadd+1,w
  2140  050D  0021               	movlb	1	; select bank1
  2141  050E  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2142  050F  0020               	movlb	0	; select bank0
  2143  0510  0850               	movf	?___ftadd+2,w
  2144  0511  0021               	movlb	1	; select bank1
  2145  0512  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2146  0513                     l2237:	
  2147                           
  2148                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2149  0513  0021               	movlb	1	; select bank1
  2150  0514  083C               	movf	(sprintf@exp+1)^(0+128),w
  2151  0515  3A80               	xorlw	128
  2152  0516  0020               	movlb	0	; select bank0
  2153  0517  00E6               	movwf	??_sprintf
  2154  0518  3080               	movlw	128
  2155  0519  0266               	subwf	??_sprintf,w
  2156  051A  1D03               	skipz
  2157  051B  2D1F               	goto	u3145
  2158  051C  300A               	movlw	10
  2159  051D  0021               	movlb	1	; select bank1
  2160  051E  023B               	subwf	sprintf@exp^(0+128),w
  2161  051F                     u3145:	
  2162  051F  1803               	skipnc
  2163  0520  2D4A               	goto	l2245
  2164  0521  0021               	movlb	1	; select bank1
  2165  0522  0840               	movf	(sprintf@fval+2)^(0+128),w
  2166  0523  043F               	iorwf	(sprintf@fval+1)^(0+128),w
  2167  0524  043E               	iorwf	sprintf@fval^(0+128),w
  2168  0525  1903               	skipnz
  2169  0526  2D9A               	goto	l2261
  2170  0527  083E               	movf	sprintf@fval^(0+128),w
  2171  0528  0020               	movlb	0	; select bank0
  2172  0529  00C9               	movwf	___fttol@f1
  2173  052A  0021               	movlb	1	; select bank1
  2174  052B  083F               	movf	(sprintf@fval+1)^(0+128),w
  2175  052C  0020               	movlb	0	; select bank0
  2176  052D  00CA               	movwf	___fttol@f1+1
  2177  052E  0021               	movlb	1	; select bank1
  2178  052F  0840               	movf	(sprintf@fval+2)^(0+128),w
  2179  0530  0020               	movlb	0	; select bank0
  2180  0531  00CB               	movwf	___fttol@f1+2
  2181  0532  318A  2232  3183   	fcall	___fttol
  2182  0535  0020               	movlb	0	; select bank0
  2183  0536  084C               	movf	?___fttol+3,w
  2184  0537  044B               	iorwf	?___fttol+2,w
  2185  0538  044A               	iorwf	?___fttol+1,w
  2186  0539  0449               	iorwf	?___fttol,w
  2187  053A  1D03               	skipz
  2188  053B  2D9A               	goto	l2261
  2189  053C  0021               	movlb	1	; select bank1
  2190  053D  083C               	movf	(sprintf@exp+1)^(0+128),w
  2191  053E  3A80               	xorlw	128
  2192  053F  0020               	movlb	0	; select bank0
  2193  0540  00E6               	movwf	??_sprintf
  2194  0541  3080               	movlw	128
  2195  0542  0266               	subwf	??_sprintf,w
  2196  0543  1D03               	skipz
  2197  0544  2D48               	goto	u3175
  2198  0545  3002               	movlw	2
  2199  0546  0021               	movlb	1	; select bank1
  2200  0547  023B               	subwf	sprintf@exp^(0+128),w
  2201  0548                     u3175:	
  2202  0548  1C03               	skipc
  2203  0549  2D9A               	goto	l2261
  2204  054A                     l2245:	
  2205                           
  2206                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2207  054A  0021               	movlb	1	; select bank1
  2208  054B  0838               	movf	sprintf@integ^(0+128),w
  2209  054C  00F0               	movwf	___ftge@ff1
  2210  054D  0839               	movf	(sprintf@integ+1)^(0+128),w
  2211  054E  00F1               	movwf	___ftge@ff1+1
  2212  054F  083A               	movf	(sprintf@integ+2)^(0+128),w
  2213  0550  00F2               	movwf	___ftge@ff1+2
  2214  0551  3070               	movlw	112
  2215  0552  00F3               	movwf	___ftge@ff2
  2216  0553  3089               	movlw	137
  2217  0554  00F4               	movwf	___ftge@ff2+1
  2218  0555  3040               	movlw	64
  2219  0556  00F5               	movwf	___ftge@ff2+2
  2220  0557  3188  2029  3183   	fcall	___ftge
  2221  055A  1803               	btfsc	3,0
  2222  055B  2D5E               	goto	l2249
  2223                           
  2224                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2225  055C  30F7               	movlw	247
  2226  055D  2D5F               	goto	L3
  2227  055E                     l2249:	
  2228                           ;doprnt.c: 1131: }else{
  2229                           
  2230                           
  2231                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2232  055E  30F8               	movlw	248
  2233  055F                     L3:	
  2234  055F  0021               	movlb	1	; select bank1
  2235  0560  07BB               	addwf	sprintf@exp^(0+128),f
  2236  0561  30FF               	movlw	255
  2237  0562  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2238                           
  2239                           ;doprnt.c: 1133: }
  2240                           ;doprnt.c: 1134: integ = scale(exp);
  2241  0563  083B               	movf	sprintf@exp^(0+128),w
  2242  0564  3181  2141  3183   	fcall	_scale
  2243  0567  0020               	movlb	0	; select bank0
  2244  0568  0840               	movf	?_scale,w
  2245  0569  0021               	movlb	1	; select bank1
  2246  056A  00B8               	movwf	sprintf@integ^(0+128)
  2247  056B  0020               	movlb	0	; select bank0
  2248  056C  0841               	movf	?_scale+1,w
  2249  056D  0021               	movlb	1	; select bank1
  2250  056E  00B9               	movwf	(sprintf@integ+1)^(0+128)
  2251  056F  0020               	movlb	0	; select bank0
  2252  0570  0842               	movf	?_scale+2,w
  2253  0571  0021               	movlb	1	; select bank1
  2254  0572  00BA               	movwf	(sprintf@integ+2)^(0+128)
  2255                           
  2256                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2257  0573  083E               	movf	sprintf@fval^(0+128),w
  2258  0574  00F0               	movwf	__tdiv_to_l_@f1
  2259  0575  083F               	movf	(sprintf@fval+1)^(0+128),w
  2260  0576  00F1               	movwf	__tdiv_to_l_@f1+1
  2261  0577  0840               	movf	(sprintf@fval+2)^(0+128),w
  2262  0578  00F2               	movwf	__tdiv_to_l_@f1+2
  2263  0579  0838               	movf	sprintf@integ^(0+128),w
  2264  057A  00F3               	movwf	__tdiv_to_l_@f2
  2265  057B  0839               	movf	(sprintf@integ+1)^(0+128),w
  2266  057C  00F4               	movwf	__tdiv_to_l_@f2+1
  2267  057D  083A               	movf	(sprintf@integ+2)^(0+128),w
  2268  057E  00F5               	movwf	__tdiv_to_l_@f2+2
  2269  057F  318C  2416  3183   	fcall	__tdiv_to_l_
  2270  0582  0873               	movf	?__tdiv_to_l_+3,w
  2271  0583  0021               	movlb	1	; select bank1
  2272  0584  00A6               	movwf	(_sprintf$462+3)^(0+128)
  2273  0585  0872               	movf	?__tdiv_to_l_+2,w
  2274  0586  00A5               	movwf	(_sprintf$462+2)^(0+128)
  2275  0587  0871               	movf	?__tdiv_to_l_+1,w
  2276  0588  00A4               	movwf	(_sprintf$462+1)^(0+128)
  2277  0589  0870               	movf	?__tdiv_to_l_,w
  2278  058A  00A3               	movwf	_sprintf$462^(0+128)
  2279  058B  0826               	movf	(_sprintf$462+3)^(0+128),w
  2280  058C  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2281  058D  0825               	movf	(_sprintf$462+2)^(0+128),w
  2282  058E  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2283  058F  0824               	movf	(_sprintf$462+1)^(0+128),w
  2284  0590  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2285  0591  0823               	movf	_sprintf$462^(0+128),w
  2286  0592  00B4               	movwf	sprintf@_val^(0+128)
  2287                           
  2288                           ;doprnt.c: 1138: fval = 0.0;
  2289  0593  3000               	movlw	0
  2290  0594  00BE               	movwf	sprintf@fval^(0+128)
  2291  0595  3000               	movlw	0
  2292  0596  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2293  0597  3000               	movlw	0
  2294  0598  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2295                           
  2296                           ;doprnt.c: 1139: } else {
  2297  0599  2DE8               	goto	l2265
  2298  059A                     l2261:	
  2299                           
  2300                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2301  059A  0021               	movlb	1	; select bank1
  2302  059B  083E               	movf	sprintf@fval^(0+128),w
  2303  059C  0020               	movlb	0	; select bank0
  2304  059D  00C9               	movwf	___fttol@f1
  2305  059E  0021               	movlb	1	; select bank1
  2306  059F  083F               	movf	(sprintf@fval+1)^(0+128),w
  2307  05A0  0020               	movlb	0	; select bank0
  2308  05A1  00CA               	movwf	___fttol@f1+1
  2309  05A2  0021               	movlb	1	; select bank1
  2310  05A3  0840               	movf	(sprintf@fval+2)^(0+128),w
  2311  05A4  0020               	movlb	0	; select bank0
  2312  05A5  00CB               	movwf	___fttol@f1+2
  2313  05A6  318A  2232  3183   	fcall	___fttol
  2314  05A9  0020               	movlb	0	; select bank0
  2315  05AA  084C               	movf	?___fttol+3,w
  2316  05AB  0021               	movlb	1	; select bank1
  2317  05AC  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2318  05AD  0020               	movlb	0	; select bank0
  2319  05AE  084B               	movf	?___fttol+2,w
  2320  05AF  0021               	movlb	1	; select bank1
  2321  05B0  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2322  05B1  0020               	movlb	0	; select bank0
  2323  05B2  084A               	movf	?___fttol+1,w
  2324  05B3  0021               	movlb	1	; select bank1
  2325  05B4  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2326  05B5  0020               	movlb	0	; select bank0
  2327  05B6  0849               	movf	?___fttol,w
  2328  05B7  0021               	movlb	1	; select bank1
  2329  05B8  00B4               	movwf	sprintf@_val^(0+128)
  2330                           
  2331                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2332  05B9  0837               	movf	(sprintf@_val+3)^(0+128),w
  2333  05BA  00FB               	movwf	___lltoft@c+3
  2334  05BB  0836               	movf	(sprintf@_val+2)^(0+128),w
  2335  05BC  00FA               	movwf	___lltoft@c+2
  2336  05BD  0835               	movf	(sprintf@_val+1)^(0+128),w
  2337  05BE  00F9               	movwf	___lltoft@c+1
  2338  05BF  0834               	movf	sprintf@_val^(0+128),w
  2339  05C0  00F8               	movwf	___lltoft@c
  2340  05C1  3188  2001  3183   	fcall	___lltoft
  2341  05C4  0878               	movf	?___lltoft,w
  2342  05C5  0020               	movlb	0	; select bank0
  2343  05C6  00DB               	movwf	___ftsub@f2
  2344  05C7  0879               	movf	?___lltoft+1,w
  2345  05C8  00DC               	movwf	___ftsub@f2+1
  2346  05C9  087A               	movf	?___lltoft+2,w
  2347  05CA  00DD               	movwf	___ftsub@f2+2
  2348  05CB  0021               	movlb	1	; select bank1
  2349  05CC  083E               	movf	sprintf@fval^(0+128),w
  2350  05CD  0020               	movlb	0	; select bank0
  2351  05CE  00DE               	movwf	___ftsub@f1
  2352  05CF  0021               	movlb	1	; select bank1
  2353  05D0  083F               	movf	(sprintf@fval+1)^(0+128),w
  2354  05D1  0020               	movlb	0	; select bank0
  2355  05D2  00DF               	movwf	___ftsub@f1+1
  2356  05D3  0021               	movlb	1	; select bank1
  2357  05D4  0840               	movf	(sprintf@fval+2)^(0+128),w
  2358  05D5  0020               	movlb	0	; select bank0
  2359  05D6  00E0               	movwf	___ftsub@f1+2
  2360  05D7  3197  27AA  3183   	fcall	___ftsub
  2361  05DA  0020               	movlb	0	; select bank0
  2362  05DB  085B               	movf	?___ftsub,w
  2363  05DC  0021               	movlb	1	; select bank1
  2364  05DD  00BE               	movwf	sprintf@fval^(0+128)
  2365  05DE  0020               	movlb	0	; select bank0
  2366  05DF  085C               	movf	?___ftsub+1,w
  2367  05E0  0021               	movlb	1	; select bank1
  2368  05E1  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2369  05E2  0020               	movlb	0	; select bank0
  2370  05E3  085D               	movf	?___ftsub+2,w
  2371  05E4  0021               	movlb	1	; select bank1
  2372  05E5  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2373                           
  2374                           ;doprnt.c: 1142: exp = 0;
  2375  05E6  01BB               	clrf	sprintf@exp^(0+128)
  2376  05E7  01BC               	clrf	(sprintf@exp+1)^(0+128)
  2377  05E8                     l2265:	
  2378                           
  2379                           ;doprnt.c: 1143: }
  2380                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2381  05E8  01C1               	clrf	sprintf@c^(0+128)
  2382  05E9  0AC1               	incf	sprintf@c^(0+128),f
  2383  05EA  0841               	movf	sprintf@c^(0+128),w
  2384  05EB  3A0A               	xorlw	10
  2385  05EC  1903               	btfsc	3,2
  2386  05ED  2E25               	goto	l2279
  2387  05EE                     l2271:	
  2388                           
  2389                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2390  05EE  0841               	movf	sprintf@c^(0+128),w
  2391  05EF  0020               	movlb	0	; select bank0
  2392  05F0  00E6               	movwf	??_sprintf
  2393  05F1  01E7               	clrf	??_sprintf+1
  2394  05F2  35E6               	lslf	??_sprintf,f
  2395  05F3  0DE7               	rlf	??_sprintf+1,f
  2396  05F4  35E6               	lslf	??_sprintf,f
  2397  05F5  0DE7               	rlf	??_sprintf+1,f
  2398  05F6  3000               	movlw	low (_dpowers| (0+32768))
  2399  05F7  0766               	addwf	??_sprintf,w
  2400  05F8  0084               	movwf	4
  2401  05F9  3090               	movlw	high (_dpowers| (0+32768))
  2402  05FA  3D67               	addwfc	??_sprintf+1,w
  2403  05FB  0085               	movwf	5
  2404  05FC  3F00               	moviw [0]fsr0
  2405  05FD  00E8               	movwf	??_sprintf+2
  2406  05FE  3F01               	moviw [1]fsr0
  2407  05FF  00E9               	movwf	??_sprintf+3
  2408  0600  3F02               	moviw [2]fsr0
  2409  0601  00EA               	movwf	??_sprintf+4
  2410  0602  3F03               	moviw [3]fsr0
  2411  0603  00EB               	movwf	??_sprintf+5
  2412  0604  086B               	movf	??_sprintf+5,w
  2413  0605  0021               	movlb	1	; select bank1
  2414  0606  0237               	subwf	(sprintf@_val+3)^(0+128),w
  2415  0607  1D03               	skipz
  2416  0608  2E19               	goto	u3205
  2417  0609  0020               	movlb	0	; select bank0
  2418  060A  086A               	movf	??_sprintf+4,w
  2419  060B  0021               	movlb	1	; select bank1
  2420  060C  0236               	subwf	(sprintf@_val+2)^(0+128),w
  2421  060D  1D03               	skipz
  2422  060E  2E19               	goto	u3205
  2423  060F  0020               	movlb	0	; select bank0
  2424  0610  0869               	movf	??_sprintf+3,w
  2425  0611  0021               	movlb	1	; select bank1
  2426  0612  0235               	subwf	(sprintf@_val+1)^(0+128),w
  2427  0613  1D03               	skipz
  2428  0614  2E19               	goto	u3205
  2429  0615  0020               	movlb	0	; select bank0
  2430  0616  0868               	movf	??_sprintf+2,w
  2431  0617  0021               	movlb	1	; select bank1
  2432  0618  0234               	subwf	sprintf@_val^(0+128),w
  2433  0619                     u3205:	
  2434  0619  1C03               	btfss	3,0
  2435  061A  2E25               	goto	l2279
  2436                           
  2437                           ;doprnt.c: 1147: break;
  2438  061B  3001               	movlw	1
  2439  061C  0020               	movlb	0	; select bank0
  2440  061D  00E6               	movwf	??_sprintf
  2441  061E  0866               	movf	??_sprintf,w
  2442  061F  0021               	movlb	1	; select bank1
  2443  0620  07C1               	addwf	sprintf@c^(0+128),f
  2444  0621  0841               	movf	sprintf@c^(0+128),w
  2445  0622  3A0A               	xorlw	10
  2446  0623  1D03               	skipz
  2447  0624  2DEE               	goto	l2271
  2448  0625                     l2279:	
  2449                           
  2450                           ;doprnt.c: 1184: {
  2451                           ;doprnt.c: 1197: if(flag & 0x03)
  2452  0625  3003               	movlw	3
  2453  0626  0530               	andwf	sprintf@flag^(0+128),w
  2454  0627  0020               	movlb	0	; select bank0
  2455  0628  00E6               	movwf	??_sprintf
  2456  0629  3000               	movlw	0
  2457  062A  0021               	movlb	1	; select bank1
  2458  062B  0531               	andwf	(sprintf@flag+1)^(0+128),w
  2459  062C  0020               	movlb	0	; select bank0
  2460  062D  00E7               	movwf	??_sprintf+1
  2461  062E  0867               	movf	??_sprintf+1,w
  2462  062F  0466               	iorwf	??_sprintf,w
  2463  0630  1903               	skipnz
  2464  0631  2E40               	goto	l2293
  2465                           
  2466                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  2467  0632  302D               	movlw	45
  2468  0633                     L7:	
  2469  0633  00E6               	movwf	??_sprintf
  2470  0634  0021               	movlb	1	; select bank1
  2471  0635  083D               	movf	sprintf@sp^(0+128),w
  2472  0636  0086               	movwf	6
  2473  0637  0187               	clrf	7
  2474  0638  0020               	movlb	0	; select bank0
  2475  0639  0866               	movf	??_sprintf,w
  2476  063A  0081               	movwf	1
  2477  063B  3001               	movlw	1
  2478  063C  00E6               	movwf	??_sprintf
  2479  063D  0866               	movf	??_sprintf,w
  2480  063E  0021               	movlb	1	; select bank1
  2481  063F  07BD               	addwf	sprintf@sp^(0+128),f
  2482  0640                     l2293:	
  2483  0640  30FF               	movlw	-1
  2484  0641  0020               	movlb	0	; select bank0
  2485  0642  00E6               	movwf	??_sprintf
  2486  0643  0866               	movf	??_sprintf,w
  2487  0644  0021               	movlb	1	; select bank1
  2488  0645  07C1               	addwf	sprintf@c^(0+128),f
  2489  0646  0841               	movf	sprintf@c^(0+128),w
  2490  0647  3AFF               	xorlw	255
  2491  0648  1903               	btfsc	3,2
  2492  0649  2EA8               	goto	l2301
  2493                           
  2494                           ;doprnt.c: 1209: {
  2495                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  2496                           
  2497                           ;doprnt.c: 1204: }
  2498                           ;doprnt.c: 1205: while(c--) {
  2499  064A  0841               	movf	sprintf@c^(0+128),w
  2500  064B  0020               	movlb	0	; select bank0
  2501  064C  00E6               	movwf	??_sprintf
  2502  064D  01E7               	clrf	??_sprintf+1
  2503  064E  35E6               	lslf	??_sprintf,f
  2504  064F  0DE7               	rlf	??_sprintf+1,f
  2505  0650  35E6               	lslf	??_sprintf,f
  2506  0651  0DE7               	rlf	??_sprintf+1,f
  2507  0652  3000               	movlw	low (_dpowers| (0+32768))
  2508  0653  0766               	addwf	??_sprintf,w
  2509  0654  0084               	movwf	4
  2510  0655  3090               	movlw	high (_dpowers| (0+32768))
  2511  0656  3D67               	addwfc	??_sprintf+1,w
  2512  0657  0085               	movwf	5
  2513  0658  3F00               	moviw [0]fsr0
  2514  0659  00F0               	movwf	___lldiv@divisor
  2515  065A  3F01               	moviw [1]fsr0
  2516  065B  00F1               	movwf	___lldiv@divisor+1
  2517  065C  3F02               	moviw [2]fsr0
  2518  065D  00F2               	movwf	___lldiv@divisor+2
  2519  065E  3F03               	moviw [3]fsr0
  2520  065F  00F3               	movwf	___lldiv@divisor+3
  2521  0660  0021               	movlb	1	; select bank1
  2522  0661  0837               	movf	(sprintf@_val+3)^(0+128),w
  2523  0662  00F7               	movwf	___lldiv@dividend+3
  2524  0663  0836               	movf	(sprintf@_val+2)^(0+128),w
  2525  0664  00F6               	movwf	___lldiv@dividend+2
  2526  0665  0835               	movf	(sprintf@_val+1)^(0+128),w
  2527  0666  00F5               	movwf	___lldiv@dividend+1
  2528  0667  0834               	movf	sprintf@_val^(0+128),w
  2529  0668  00F4               	movwf	___lldiv@dividend
  2530  0669  3189  212C  3183   	fcall	___lldiv
  2531  066C  0873               	movf	?___lldiv+3,w
  2532  066D  0021               	movlb	1	; select bank1
  2533  066E  00AB               	movwf	(sprintf@vd+3)^(0+128)
  2534  066F  0872               	movf	?___lldiv+2,w
  2535  0670  00AA               	movwf	(sprintf@vd+2)^(0+128)
  2536  0671  0871               	movf	?___lldiv+1,w
  2537  0672  00A9               	movwf	(sprintf@vd+1)^(0+128)
  2538  0673  0870               	movf	?___lldiv,w
  2539  0674  00A8               	movwf	sprintf@vd^(0+128)
  2540                           
  2541                           ;doprnt.c: 1211: vd %= 10;
  2542  0675  3000               	movlw	0
  2543  0676  00F3               	movwf	___llmod@divisor+3
  2544  0677  3000               	movlw	0
  2545  0678  00F2               	movwf	___llmod@divisor+2
  2546  0679  3000               	movlw	0
  2547  067A  00F1               	movwf	___llmod@divisor+1
  2548  067B  300A               	movlw	10
  2549  067C  00F0               	movwf	___llmod@divisor
  2550  067D  082B               	movf	(sprintf@vd+3)^(0+128),w
  2551  067E  00F7               	movwf	___llmod@dividend+3
  2552  067F  082A               	movf	(sprintf@vd+2)^(0+128),w
  2553  0680  00F6               	movwf	___llmod@dividend+2
  2554  0681  0829               	movf	(sprintf@vd+1)^(0+128),w
  2555  0682  00F5               	movwf	___llmod@dividend+1
  2556  0683  0828               	movf	sprintf@vd^(0+128),w
  2557  0684  00F4               	movwf	___llmod@dividend
  2558  0685  3188  20A3  3183   	fcall	___llmod
  2559  0688  0873               	movf	?___llmod+3,w
  2560  0689  0021               	movlb	1	; select bank1
  2561  068A  00AB               	movwf	(sprintf@vd+3)^(0+128)
  2562  068B  0872               	movf	?___llmod+2,w
  2563  068C  00AA               	movwf	(sprintf@vd+2)^(0+128)
  2564  068D  0871               	movf	?___llmod+1,w
  2565  068E  00A9               	movwf	(sprintf@vd+1)^(0+128)
  2566  068F  0870               	movf	?___llmod,w
  2567  0690  00A8               	movwf	sprintf@vd^(0+128)
  2568                           
  2569                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  2570  0691  0828               	movf	sprintf@vd^(0+128),w
  2571  0692  3E30               	addlw	48
  2572  0693  0020               	movlb	0	; select bank0
  2573  0694  2E33               	goto	L7
  2574  0695                     l2295:	
  2575                           ;doprnt.c: 1213: }
  2576                           ;doprnt.c: 1215: }
  2577                           ;doprnt.c: 1216: while(exp > 0) {
  2578                           
  2579                           
  2580                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  2581  0695  3030               	movlw	48
  2582  0696  0020               	movlb	0	; select bank0
  2583  0697  00E6               	movwf	??_sprintf
  2584  0698  0021               	movlb	1	; select bank1
  2585  0699  083D               	movf	sprintf@sp^(0+128),w
  2586  069A  0086               	movwf	6
  2587  069B  0187               	clrf	7
  2588  069C  0020               	movlb	0	; select bank0
  2589  069D  0866               	movf	??_sprintf,w
  2590  069E  0081               	movwf	1
  2591  069F  3001               	movlw	1
  2592  06A0  00E6               	movwf	??_sprintf
  2593  06A1  0866               	movf	??_sprintf,w
  2594  06A2  0021               	movlb	1	; select bank1
  2595  06A3  07BD               	addwf	sprintf@sp^(0+128),f
  2596                           
  2597                           ;doprnt.c: 1218: exp--;
  2598  06A4  30FF               	movlw	255
  2599  06A5  07BB               	addwf	sprintf@exp^(0+128),f
  2600  06A6  30FF               	movlw	255
  2601  06A7  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2602  06A8                     l2301:	
  2603  06A8  083C               	movf	(sprintf@exp+1)^(0+128),w
  2604  06A9  3A80               	xorlw	128
  2605  06AA  0020               	movlb	0	; select bank0
  2606  06AB  00E6               	movwf	??_sprintf
  2607  06AC  3080               	movlw	128
  2608  06AD  0266               	subwf	??_sprintf,w
  2609  06AE  1D03               	skipz
  2610  06AF  2EB3               	goto	u3245
  2611  06B0  3001               	movlw	1
  2612  06B1  0021               	movlb	1	; select bank1
  2613  06B2  023B               	subwf	sprintf@exp^(0+128),w
  2614  06B3                     u3245:	
  2615  06B3  1803               	skipnc
  2616  06B4  2E95               	goto	l2295
  2617                           
  2618                           ;doprnt.c: 1219: }
  2619                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2620  06B5  0021               	movlb	1	; select bank1
  2621  06B6  0833               	movf	(sprintf@prec+1)^(0+128),w
  2622  06B7  3A80               	xorlw	128
  2623  06B8  0020               	movlb	0	; select bank0
  2624  06B9  00E6               	movwf	??_sprintf
  2625  06BA  3080               	movlw	128
  2626  06BB  0266               	subwf	??_sprintf,w
  2627  06BC  1D03               	skipz
  2628  06BD  2EC1               	goto	u3255
  2629  06BE  3009               	movlw	9
  2630  06BF  0021               	movlb	1	; select bank1
  2631  06C0  0232               	subwf	sprintf@prec^(0+128),w
  2632  06C1                     u3255:	
  2633  06C1  1C03               	skipc
  2634  06C2  2EC5               	goto	l2307
  2635                           
  2636                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2637  06C3  3008               	movlw	8
  2638  06C4  2EC7               	goto	L4
  2639  06C5                     l2307:	
  2640                           
  2641                           ;doprnt.c: 1222: else
  2642                           ;doprnt.c: 1223: c = prec;
  2643  06C5  0021               	movlb	1	; select bank1
  2644  06C6  0832               	movf	sprintf@prec^(0+128),w
  2645  06C7                     L4:	
  2646  06C7  0020               	movlb	0	; select bank0
  2647  06C8  00E6               	movwf	??_sprintf
  2648  06C9  0866               	movf	??_sprintf,w
  2649  06CA  0021               	movlb	1	; select bank1
  2650  06CB  00C1               	movwf	sprintf@c^(0+128)
  2651                           
  2652                           ;doprnt.c: 1224: prec -= c;
  2653  06CC  0841               	movf	sprintf@c^(0+128),w
  2654  06CD  0020               	movlb	0	; select bank0
  2655  06CE  00E6               	movwf	??_sprintf
  2656  06CF  01E7               	clrf	??_sprintf+1
  2657  06D0  1BE6               	btfsc	??_sprintf,7
  2658  06D1  03E7               	decf	??_sprintf+1,f
  2659  06D2  0866               	movf	??_sprintf,w
  2660  06D3  0021               	movlb	1	; select bank1
  2661  06D4  02B2               	subwf	sprintf@prec^(0+128),f
  2662  06D5  0020               	movlb	0	; select bank0
  2663  06D6  0867               	movf	??_sprintf+1,w
  2664  06D7  0021               	movlb	1	; select bank1
  2665  06D8  3BB3               	subwfb	(sprintf@prec+1)^(0+128),f
  2666                           
  2667                           ;doprnt.c: 1228: if(c)
  2668  06D9  0841               	movf	sprintf@c^(0+128),w
  2669  06DA  1903               	btfsc	3,2
  2670  06DB  2EEB               	goto	l2313
  2671                           
  2672                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  2673  06DC  302E               	movlw	46
  2674  06DD  0020               	movlb	0	; select bank0
  2675  06DE  00E6               	movwf	??_sprintf
  2676  06DF  0021               	movlb	1	; select bank1
  2677  06E0  083D               	movf	sprintf@sp^(0+128),w
  2678  06E1  0086               	movwf	6
  2679  06E2  0187               	clrf	7
  2680  06E3  0020               	movlb	0	; select bank0
  2681  06E4  0866               	movf	??_sprintf,w
  2682  06E5  0081               	movwf	1
  2683  06E6  3001               	movlw	1
  2684  06E7  00E6               	movwf	??_sprintf
  2685  06E8  0866               	movf	??_sprintf,w
  2686  06E9  0021               	movlb	1	; select bank1
  2687  06EA  07BD               	addwf	sprintf@sp^(0+128),f
  2688  06EB                     l2313:	
  2689                           
  2690                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2691  06EB  0841               	movf	sprintf@c^(0+128),w
  2692  06EC  3181  2141  3183   	fcall	_scale
  2693  06EF  0020               	movlb	0	; select bank0
  2694  06F0  0840               	movf	?_scale,w
  2695  06F1  0021               	movlb	1	; select bank1
  2696  06F2  00A0               	movwf	_sprintf$883^(0+128)
  2697  06F3  0020               	movlb	0	; select bank0
  2698  06F4  0841               	movf	?_scale+1,w
  2699  06F5  0021               	movlb	1	; select bank1
  2700  06F6  00A1               	movwf	(_sprintf$883+1)^(0+128)
  2701  06F7  0020               	movlb	0	; select bank0
  2702  06F8  0842               	movf	?_scale+2,w
  2703  06F9  0021               	movlb	1	; select bank1
  2704  06FA  00A2               	movwf	(_sprintf$883+2)^(0+128)
  2705                           
  2706                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2707  06FB  0820               	movf	_sprintf$883^(0+128),w
  2708  06FC  0020               	movlb	0	; select bank0
  2709  06FD  00B3               	movwf	___ftmul@f2
  2710  06FE  0021               	movlb	1	; select bank1
  2711  06FF  0821               	movf	(_sprintf$883+1)^(0+128),w
  2712  0700  0020               	movlb	0	; select bank0
  2713  0701  00B4               	movwf	___ftmul@f2+1
  2714  0702  0021               	movlb	1	; select bank1
  2715  0703  0822               	movf	(_sprintf$883+2)^(0+128),w
  2716  0704  0020               	movlb	0	; select bank0
  2717  0705  00B5               	movwf	___ftmul@f2+2
  2718  0706  0021               	movlb	1	; select bank1
  2719  0707  083E               	movf	sprintf@fval^(0+128),w
  2720  0708  0020               	movlb	0	; select bank0
  2721  0709  00B0               	movwf	___ftmul@f1
  2722  070A  0021               	movlb	1	; select bank1
  2723  070B  083F               	movf	(sprintf@fval+1)^(0+128),w
  2724  070C  0020               	movlb	0	; select bank0
  2725  070D  00B1               	movwf	___ftmul@f1+1
  2726  070E  0021               	movlb	1	; select bank1
  2727  070F  0840               	movf	(sprintf@fval+2)^(0+128),w
  2728  0710  0020               	movlb	0	; select bank0
  2729  0711  00B2               	movwf	___ftmul@f1+2
  2730  0712  318B  2362  3183   	fcall	___ftmul
  2731  0715  0020               	movlb	0	; select bank0
  2732  0716  0830               	movf	?___ftmul,w
  2733  0717  00C9               	movwf	___fttol@f1
  2734  0718  0831               	movf	?___ftmul+1,w
  2735  0719  00CA               	movwf	___fttol@f1+1
  2736  071A  0832               	movf	?___ftmul+2,w
  2737  071B  00CB               	movwf	___fttol@f1+2
  2738  071C  318A  2232  3183   	fcall	___fttol
  2739  071F  0020               	movlb	0	; select bank0
  2740  0720  084C               	movf	?___fttol+3,w
  2741  0721  0021               	movlb	1	; select bank1
  2742  0722  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2743  0723  0020               	movlb	0	; select bank0
  2744  0724  084B               	movf	?___fttol+2,w
  2745  0725  0021               	movlb	1	; select bank1
  2746  0726  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2747  0727  0020               	movlb	0	; select bank0
  2748  0728  084A               	movf	?___fttol+1,w
  2749  0729  0021               	movlb	1	; select bank1
  2750  072A  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2751  072B  0020               	movlb	0	; select bank0
  2752  072C  0849               	movf	?___fttol,w
  2753  072D  0021               	movlb	1	; select bank1
  2754  072E                     L5:	
  2755  072E  00B4               	movwf	sprintf@_val^(0+128)
  2756  072F  30FF               	movlw	-1
  2757  0730  0020               	movlb	0	; select bank0
  2758  0731  00E6               	movwf	??_sprintf
  2759  0732  0866               	movf	??_sprintf,w
  2760  0733  0021               	movlb	1	; select bank1
  2761  0734  07C1               	addwf	sprintf@c^(0+128),f
  2762  0735  0841               	movf	sprintf@c^(0+128),w
  2763  0736  3AFF               	xorlw	255
  2764  0737  1903               	btfsc	3,2
  2765  0738  2FCE               	goto	l2335
  2766                           
  2767                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2768                           
  2769                           ;doprnt.c: 1237: while(c--) {
  2770  0739  0841               	movf	sprintf@c^(0+128),w
  2771  073A  0020               	movlb	0	; select bank0
  2772  073B  00E6               	movwf	??_sprintf
  2773  073C  01E7               	clrf	??_sprintf+1
  2774  073D  35E6               	lslf	??_sprintf,f
  2775  073E  0DE7               	rlf	??_sprintf+1,f
  2776  073F  35E6               	lslf	??_sprintf,f
  2777  0740  0DE7               	rlf	??_sprintf+1,f
  2778  0741  3000               	movlw	low (_dpowers| (0+32768))
  2779  0742  0766               	addwf	??_sprintf,w
  2780  0743  0084               	movwf	4
  2781  0744  3090               	movlw	high (_dpowers| (0+32768))
  2782  0745  3D67               	addwfc	??_sprintf+1,w
  2783  0746  0085               	movwf	5
  2784  0747  3F00               	moviw [0]fsr0
  2785  0748  00F0               	movwf	___lldiv@divisor
  2786  0749  3F01               	moviw [1]fsr0
  2787  074A  00F1               	movwf	___lldiv@divisor+1
  2788  074B  3F02               	moviw [2]fsr0
  2789  074C  00F2               	movwf	___lldiv@divisor+2
  2790  074D  3F03               	moviw [3]fsr0
  2791  074E  00F3               	movwf	___lldiv@divisor+3
  2792  074F  0021               	movlb	1	; select bank1
  2793  0750  0837               	movf	(sprintf@_val+3)^(0+128),w
  2794  0751  00F7               	movwf	___lldiv@dividend+3
  2795  0752  0836               	movf	(sprintf@_val+2)^(0+128),w
  2796  0753  00F6               	movwf	___lldiv@dividend+2
  2797  0754  0835               	movf	(sprintf@_val+1)^(0+128),w
  2798  0755  00F5               	movwf	___lldiv@dividend+1
  2799  0756  0834               	movf	sprintf@_val^(0+128),w
  2800  0757  00F4               	movwf	___lldiv@dividend
  2801  0758  3189  212C  3183   	fcall	___lldiv
  2802  075B  0873               	movf	?___lldiv+3,w
  2803  075C  0021               	movlb	1	; select bank1
  2804  075D  00AF               	movwf	(sprintf@vd_464+3)^(0+128)
  2805  075E  0872               	movf	?___lldiv+2,w
  2806  075F  00AE               	movwf	(sprintf@vd_464+2)^(0+128)
  2807  0760  0871               	movf	?___lldiv+1,w
  2808  0761  00AD               	movwf	(sprintf@vd_464+1)^(0+128)
  2809  0762  0870               	movf	?___lldiv,w
  2810  0763  00AC               	movwf	sprintf@vd_464^(0+128)
  2811                           
  2812                           ;doprnt.c: 1239: vd %= 10;
  2813  0764  3000               	movlw	0
  2814  0765  00F3               	movwf	___llmod@divisor+3
  2815  0766  3000               	movlw	0
  2816  0767  00F2               	movwf	___llmod@divisor+2
  2817  0768  3000               	movlw	0
  2818  0769  00F1               	movwf	___llmod@divisor+1
  2819  076A  300A               	movlw	10
  2820  076B  00F0               	movwf	___llmod@divisor
  2821  076C  082F               	movf	(sprintf@vd_464+3)^(0+128),w
  2822  076D  00F7               	movwf	___llmod@dividend+3
  2823  076E  082E               	movf	(sprintf@vd_464+2)^(0+128),w
  2824  076F  00F6               	movwf	___llmod@dividend+2
  2825  0770  082D               	movf	(sprintf@vd_464+1)^(0+128),w
  2826  0771  00F5               	movwf	___llmod@dividend+1
  2827  0772  082C               	movf	sprintf@vd_464^(0+128),w
  2828  0773  00F4               	movwf	___llmod@dividend
  2829  0774  3188  20A3  3183   	fcall	___llmod
  2830  0777  0873               	movf	?___llmod+3,w
  2831  0778  0021               	movlb	1	; select bank1
  2832  0779  00AF               	movwf	(sprintf@vd_464+3)^(0+128)
  2833  077A  0872               	movf	?___llmod+2,w
  2834  077B  00AE               	movwf	(sprintf@vd_464+2)^(0+128)
  2835  077C  0871               	movf	?___llmod+1,w
  2836  077D  00AD               	movwf	(sprintf@vd_464+1)^(0+128)
  2837  077E  0870               	movf	?___llmod,w
  2838  077F  00AC               	movwf	sprintf@vd_464^(0+128)
  2839                           
  2840                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  2841  0780  082C               	movf	sprintf@vd_464^(0+128),w
  2842  0781  3E30               	addlw	48
  2843  0782  0020               	movlb	0	; select bank0
  2844  0783  00E6               	movwf	??_sprintf
  2845  0784  0021               	movlb	1	; select bank1
  2846  0785  083D               	movf	sprintf@sp^(0+128),w
  2847  0786  0086               	movwf	6
  2848  0787  0187               	clrf	7
  2849  0788  0020               	movlb	0	; select bank0
  2850  0789  0866               	movf	??_sprintf,w
  2851  078A  0081               	movwf	1
  2852  078B  3001               	movlw	1
  2853  078C  00E6               	movwf	??_sprintf
  2854  078D  0866               	movf	??_sprintf,w
  2855  078E  0021               	movlb	1	; select bank1
  2856  078F  07BD               	addwf	sprintf@sp^(0+128),f
  2857                           
  2858                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2859  0790  0841               	movf	sprintf@c^(0+128),w
  2860  0791  0020               	movlb	0	; select bank0
  2861  0792  00E6               	movwf	??_sprintf
  2862  0793  01E7               	clrf	??_sprintf+1
  2863  0794  35E6               	lslf	??_sprintf,f
  2864  0795  0DE7               	rlf	??_sprintf+1,f
  2865  0796  35E6               	lslf	??_sprintf,f
  2866  0797  0DE7               	rlf	??_sprintf+1,f
  2867  0798  3000               	movlw	low (_dpowers| (0+32768))
  2868  0799  0766               	addwf	??_sprintf,w
  2869  079A  0084               	movwf	4
  2870  079B  3090               	movlw	high (_dpowers| (0+32768))
  2871  079C  3D67               	addwfc	??_sprintf+1,w
  2872  079D  0085               	movwf	5
  2873  079E  3F00               	moviw [0]fsr0
  2874  079F  00F0               	movwf	___llmod@divisor
  2875  07A0  3F01               	moviw [1]fsr0
  2876  07A1  00F1               	movwf	___llmod@divisor+1
  2877  07A2  3F02               	moviw [2]fsr0
  2878  07A3  00F2               	movwf	___llmod@divisor+2
  2879  07A4  3F03               	moviw [3]fsr0
  2880  07A5  00F3               	movwf	___llmod@divisor+3
  2881  07A6  0021               	movlb	1	; select bank1
  2882  07A7  0837               	movf	(sprintf@_val+3)^(0+128),w
  2883  07A8  00F7               	movwf	___llmod@dividend+3
  2884  07A9  0836               	movf	(sprintf@_val+2)^(0+128),w
  2885  07AA  00F6               	movwf	___llmod@dividend+2
  2886  07AB  0835               	movf	(sprintf@_val+1)^(0+128),w
  2887  07AC  00F5               	movwf	___llmod@dividend+1
  2888  07AD  0834               	movf	sprintf@_val^(0+128),w
  2889  07AE  00F4               	movwf	___llmod@dividend
  2890  07AF  3188  20A3  3183   	fcall	___llmod
  2891  07B2  0873               	movf	?___llmod+3,w
  2892  07B3  0021               	movlb	1	; select bank1
  2893  07B4  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2894  07B5  0872               	movf	?___llmod+2,w
  2895  07B6  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2896  07B7  0871               	movf	?___llmod+1,w
  2897  07B8  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2898  07B9  0870               	movf	?___llmod,w
  2899  07BA  2F2E               	goto	L5
  2900  07BB                     l2329:	
  2901                           ;doprnt.c: 1242: }
  2902                           ;doprnt.c: 1244: while(prec) {
  2903                           
  2904                           
  2905                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  2906  07BB  3030               	movlw	48
  2907  07BC  0020               	movlb	0	; select bank0
  2908  07BD  00E6               	movwf	??_sprintf
  2909  07BE  0021               	movlb	1	; select bank1
  2910  07BF  083D               	movf	sprintf@sp^(0+128),w
  2911  07C0  0086               	movwf	6
  2912  07C1  0187               	clrf	7
  2913  07C2  0020               	movlb	0	; select bank0
  2914  07C3  0866               	movf	??_sprintf,w
  2915  07C4  0081               	movwf	1
  2916  07C5  3001               	movlw	1
  2917  07C6  00E6               	movwf	??_sprintf
  2918  07C7  0866               	movf	??_sprintf,w
  2919  07C8  0021               	movlb	1	; select bank1
  2920  07C9  07BD               	addwf	sprintf@sp^(0+128),f
  2921                           
  2922                           ;doprnt.c: 1246: prec--;
  2923  07CA  30FF               	movlw	255
  2924  07CB  07B2               	addwf	sprintf@prec^(0+128),f
  2925  07CC  30FF               	movlw	255
  2926  07CD  3DB3               	addwfc	(sprintf@prec+1)^(0+128),f
  2927  07CE                     l2335:	
  2928  07CE  0833               	movf	(sprintf@prec+1)^(0+128),w
  2929  07CF  0432               	iorwf	sprintf@prec^(0+128),w
  2930  07D0  1903               	btfsc	3,2
  2931  07D1  2B99               	goto	l2343
  2932  07D2  2FBB               	goto	l2329
  2933  07D3                     l2337:	
  2934                           ;doprnt.c: 1247: }
  2935                           ;doprnt.c: 1254: continue;
  2936                           
  2937                           
  2938                           ;doprnt.c: 1255: }
  2939                           ;doprnt.c: 1431: {
  2940                           ;doprnt.c: 1447: if(flag & 0x03)
  2941  07D3  3003               	movlw	3
  2942  07D4  0021               	movlb	1	; select bank1
  2943  07D5  0530               	andwf	sprintf@flag^(0+128),w
  2944  07D6  0020               	movlb	0	; select bank0
  2945  07D7  00E6               	movwf	??_sprintf
  2946  07D8  3000               	movlw	0
  2947  07D9  0021               	movlb	1	; select bank1
  2948  07DA  0531               	andwf	(sprintf@flag+1)^(0+128),w
  2949  07DB  0020               	movlb	0	; select bank0
  2950  07DC  00E7               	movwf	??_sprintf+1
  2951  07DD  0867               	movf	??_sprintf+1,w
  2952  07DE  0466               	iorwf	??_sprintf,w
  2953  07DF  1903               	skipnz
  2954  07E0  2B99               	goto	l2343
  2955                           
  2956                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2957  07E1  302D               	movlw	45
  2958  07E2                     L6:	
  2959  07E2  00E6               	movwf	??_sprintf
  2960  07E3  0021               	movlb	1	; select bank1
  2961  07E4  083D               	movf	sprintf@sp^(0+128),w
  2962  07E5  0086               	movwf	6
  2963  07E6  0187               	clrf	7
  2964  07E7  0020               	movlb	0	; select bank0
  2965  07E8  0866               	movf	??_sprintf,w
  2966  07E9  0081               	movwf	1
  2967  07EA  3001               	movlw	1
  2968  07EB  00E6               	movwf	??_sprintf
  2969  07EC  0866               	movf	??_sprintf,w
  2970  07ED  0021               	movlb	1	; select bank1
  2971  07EE  07BD               	addwf	sprintf@sp^(0+128),f
  2972  07EF  2B99               	goto	l2343
  2973  07F0                     l2345:	
  2974                           ;doprnt.c: 1478: }
  2975                           ;doprnt.c: 1542: }
  2976                           ;doprnt.c: 1544: alldone:
  2977                           
  2978                           
  2979                           ;doprnt.c: 1547: *sp = 0;
  2980  07F0  083D               	movf	sprintf@sp^(0+128),w
  2981  07F1  0086               	movwf	6
  2982  07F2  0187               	clrf	7
  2983  07F3  0181               	clrf	1
  2984  07F4  0008               	return
  2985  07F5                     __end_of_sprintf:	
  2986                           ;doprnt.c: 1549: return 0;
  2987                           ;	Return value of _sprintf is never used
  2988                           
  2989                           
  2990                           	psect	text5
  2991  0141                     __ptext5:	
  2992 ;; *************** function _scale *****************
  2993 ;; Defined at:
  2994 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  scl             1    wreg     char 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  scl             1   40[BANK0 ] char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  3   32[BANK0 ] char 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3008 ;;      Params:         0       3       0       0       0       0       0       0
  3009 ;;      Locals:         0       4       0       0       0       0       0       0
  3010 ;;      Temps:          0       2       0       0       0       0       0       0
  3011 ;;      Totals:         0       9       0       0       0       0       0       0
  3012 ;;Total ram usage:        9 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    2
  3015 ;; This function calls:
  3016 ;;		___awdiv
  3017 ;;		___awmod
  3018 ;;		___ftmul
  3019 ;;		___wmul
  3020 ;; This function is called by:
  3021 ;;		_sprintf
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           
  3026                           ;psect for function _scale
  3027  0141                     _scale:	
  3028                           
  3029                           ;incstack = 0
  3030                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3031                           ;scale@scl stored from wreg
  3032  0141  0020               	movlb	0	; select bank0
  3033  0142  00C8               	movwf	scale@scl
  3034                           
  3035                           ;doprnt.c: 428: if(scl < 0) {
  3036  0143  1FC8               	btfss	scale@scl,7
  3037  0144  2A6C               	goto	l1903
  3038                           
  3039                           ;doprnt.c: 429: scl = -scl;
  3040  0145  09C8               	comf	scale@scl,f
  3041  0146  0AC8               	incf	scale@scl,f
  3042                           
  3043                           ;doprnt.c: 430: if(scl>=110)
  3044  0147  0848               	movf	scale@scl,w
  3045  0148  3A80               	xorlw	128
  3046  0149  3E12               	addlw	-238
  3047  014A  1C03               	skipc
  3048  014B  29EE               	goto	l1893
  3049                           
  3050                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3051  014C  300A               	movlw	10
  3052  014D  00F7               	movwf	___awdiv@divisor
  3053  014E  3000               	movlw	0
  3054  014F  00F8               	movwf	___awdiv@divisor+1
  3055  0150  0848               	movf	scale@scl,w
  3056  0151  00F2               	movwf	___awmod@dividend
  3057  0152  01F3               	clrf	___awmod@dividend+1
  3058  0153  1BF2               	btfsc	___awmod@dividend,7
  3059  0154  03F3               	decf	___awmod@dividend+1,f
  3060  0155  3064               	movlw	100
  3061  0156  00F0               	movwf	___awmod@divisor
  3062  0157  3000               	movlw	0
  3063  0158  00F1               	movwf	___awmod@divisor+1
  3064  0159  3188  20E5  3181   	fcall	___awmod
  3065  015C  0871               	movf	?___awmod+1,w
  3066  015D  01FA               	clrf	___awdiv@dividend+1
  3067  015E  07FA               	addwf	___awdiv@dividend+1,f
  3068  015F  0870               	movf	?___awmod,w
  3069  0160  01F9               	clrf	___awdiv@dividend
  3070  0161  07F9               	addwf	___awdiv@dividend,f
  3071  0162  3189  217E  3181   	fcall	___awdiv
  3072  0165  0877               	movf	?___awdiv,w
  3073  0166  3E09               	addlw	9
  3074  0167  0020               	movlb	0	; select bank0
  3075  0168  00A4               	movwf	___wmul@multiplier
  3076  0169  3000               	movlw	0
  3077  016A  3D78               	addwfc	?___awdiv+1,w
  3078  016B  00A5               	movwf	___wmul@multiplier+1
  3079  016C  3003               	movlw	3
  3080  016D  00A6               	movwf	___wmul@multiplicand
  3081  016E  3000               	movlw	0
  3082  016F  00A7               	movwf	___wmul@multiplicand+1
  3083  0170  3197  27C3  3181   	fcall	___wmul
  3084  0173  0020               	movlb	0	; select bank0
  3085  0174  0825               	movf	?___wmul+1,w
  3086  0175  0085               	movwf	5
  3087  0176  0824               	movf	?___wmul,w
  3088  0177  0084               	movwf	4
  3089  0178  3028               	movlw	low (__npowers_| (0+32768))
  3090  0179  0784               	addwf	4,f
  3091  017A  3090               	movlw	high (__npowers_| (0+32768))
  3092  017B  3D85               	addwfc	5,f
  3093  017C  3F00               	moviw [0]fsr0
  3094  017D  00B0               	movwf	___ftmul@f1
  3095  017E  3F01               	moviw [1]fsr0
  3096  017F  00B1               	movwf	___ftmul@f1+1
  3097  0180  3F02               	moviw [2]fsr0
  3098  0181  00B2               	movwf	___ftmul@f1+2
  3099  0182  3064               	movlw	100
  3100  0183  00F7               	movwf	___awdiv@divisor
  3101  0184  3000               	movlw	0
  3102  0185  00F8               	movwf	___awdiv@divisor+1
  3103  0186  0848               	movf	scale@scl,w
  3104  0187  00F9               	movwf	___awdiv@dividend
  3105  0188  01FA               	clrf	___awdiv@dividend+1
  3106  0189  1BF9               	btfsc	___awdiv@dividend,7
  3107  018A  03FA               	decf	___awdiv@dividend+1,f
  3108  018B  3189  217E  3181   	fcall	___awdiv
  3109  018E  0877               	movf	?___awdiv,w
  3110  018F  3E12               	addlw	18
  3111  0190  0020               	movlb	0	; select bank0
  3112  0191  00A4               	movwf	___wmul@multiplier
  3113  0192  3000               	movlw	0
  3114  0193  3D78               	addwfc	?___awdiv+1,w
  3115  0194  00A5               	movwf	___wmul@multiplier+1
  3116  0195  3003               	movlw	3
  3117  0196  00A6               	movwf	___wmul@multiplicand
  3118  0197  3000               	movlw	0
  3119  0198  00A7               	movwf	___wmul@multiplicand+1
  3120  0199  3197  27C3  3181   	fcall	___wmul
  3121  019C  0020               	movlb	0	; select bank0
  3122  019D  0825               	movf	?___wmul+1,w
  3123  019E  0085               	movwf	5
  3124  019F  0824               	movf	?___wmul,w
  3125  01A0  0084               	movwf	4
  3126  01A1  3028               	movlw	low (__npowers_| (0+32768))
  3127  01A2  0784               	addwf	4,f
  3128  01A3  3090               	movlw	high (__npowers_| (0+32768))
  3129  01A4  3D85               	addwfc	5,f
  3130  01A5  3F00               	moviw [0]fsr0
  3131  01A6  00B3               	movwf	___ftmul@f2
  3132  01A7  3F01               	moviw [1]fsr0
  3133  01A8  00B4               	movwf	___ftmul@f2+1
  3134  01A9  3F02               	moviw [2]fsr0
  3135  01AA  00B5               	movwf	___ftmul@f2+2
  3136  01AB  318B  2362  3181   	fcall	___ftmul
  3137  01AE  0020               	movlb	0	; select bank0
  3138  01AF  0830               	movf	?___ftmul,w
  3139  01B0  00C5               	movwf	_scale$882
  3140  01B1  0831               	movf	?___ftmul+1,w
  3141  01B2  00C6               	movwf	_scale$882+1
  3142  01B3  0832               	movf	?___ftmul+2,w
  3143  01B4  00C7               	movwf	_scale$882+2
  3144                           
  3145                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3146  01B5  0848               	movf	scale@scl,w
  3147  01B6  00F2               	movwf	___awmod@dividend
  3148  01B7  01F3               	clrf	___awmod@dividend+1
  3149  01B8  1BF2               	btfsc	___awmod@dividend,7
  3150  01B9  03F3               	decf	___awmod@dividend+1,f
  3151  01BA  300A               	movlw	10
  3152  01BB  00F0               	movwf	___awmod@divisor
  3153  01BC  3000               	movlw	0
  3154  01BD  00F1               	movwf	___awmod@divisor+1
  3155  01BE  3188  20E5  3181   	fcall	___awmod
  3156  01C1  0871               	movf	?___awmod+1,w
  3157  01C2  0020               	movlb	0	; select bank0
  3158  01C3  01A5               	clrf	___wmul@multiplier+1
  3159  01C4  07A5               	addwf	___wmul@multiplier+1,f
  3160  01C5  0870               	movf	?___awmod,w
  3161  01C6  01A4               	clrf	___wmul@multiplier
  3162  01C7  07A4               	addwf	___wmul@multiplier,f
  3163  01C8  3003               	movlw	3
  3164  01C9  00A6               	movwf	___wmul@multiplicand
  3165  01CA  3000               	movlw	0
  3166  01CB  00A7               	movwf	___wmul@multiplicand+1
  3167  01CC  3197  27C3  3181   	fcall	___wmul
  3168  01CF  0020               	movlb	0	; select bank0
  3169  01D0  0825               	movf	?___wmul+1,w
  3170  01D1  0085               	movwf	5
  3171  01D2  0824               	movf	?___wmul,w
  3172  01D3  0084               	movwf	4
  3173  01D4  3028               	movlw	low (__npowers_| (0+32768))
  3174  01D5  0784               	addwf	4,f
  3175  01D6  3090               	movlw	high (__npowers_| (0+32768))
  3176  01D7  3D85               	addwfc	5,f
  3177  01D8  3F00               	moviw [0]fsr0
  3178  01D9  00B0               	movwf	___ftmul@f1
  3179  01DA  3F01               	moviw [1]fsr0
  3180  01DB  00B1               	movwf	___ftmul@f1+1
  3181  01DC  3F02               	moviw [2]fsr0
  3182  01DD  00B2               	movwf	___ftmul@f1+2
  3183  01DE  0845               	movf	_scale$882,w
  3184  01DF  00B3               	movwf	___ftmul@f2
  3185  01E0  0846               	movf	_scale$882+1,w
  3186  01E1  00B4               	movwf	___ftmul@f2+1
  3187  01E2  0847               	movf	_scale$882+2,w
  3188  01E3  00B5               	movwf	___ftmul@f2+2
  3189  01E4  318B  2362         	fcall	___ftmul
  3190  01E6  0020               	movlb	0	; select bank0
  3191  01E7  0830               	movf	?___ftmul,w
  3192  01E8  00C0               	movwf	?_scale
  3193  01E9  0831               	movf	?___ftmul+1,w
  3194  01EA  00C1               	movwf	?_scale+1
  3195  01EB  0832               	movf	?___ftmul+2,w
  3196  01EC  00C2               	movwf	?_scale+2
  3197  01ED  0008               	return
  3198  01EE                     l1893:	
  3199                           
  3200                           ;doprnt.c: 432: else if(scl > 10)
  3201  01EE  0848               	movf	scale@scl,w
  3202  01EF  3A80               	xorlw	128
  3203  01F0  3E75               	addlw	-139
  3204  01F1  1C03               	skipc
  3205  01F2  2A4F               	goto	l1899
  3206                           
  3207                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3208  01F3  0848               	movf	scale@scl,w
  3209  01F4  00F2               	movwf	___awmod@dividend
  3210  01F5  01F3               	clrf	___awmod@dividend+1
  3211  01F6  1BF2               	btfsc	___awmod@dividend,7
  3212  01F7  03F3               	decf	___awmod@dividend+1,f
  3213  01F8  300A               	movlw	10
  3214  01F9  00F0               	movwf	___awmod@divisor
  3215  01FA  3000               	movlw	0
  3216  01FB  00F1               	movwf	___awmod@divisor+1
  3217  01FC  3188  20E5  3181   	fcall	___awmod
  3218  01FF  0871               	movf	?___awmod+1,w
  3219  0200  0020               	movlb	0	; select bank0
  3220  0201  01A5               	clrf	___wmul@multiplier+1
  3221  0202  07A5               	addwf	___wmul@multiplier+1,f
  3222  0203  0870               	movf	?___awmod,w
  3223  0204  01A4               	clrf	___wmul@multiplier
  3224  0205  07A4               	addwf	___wmul@multiplier,f
  3225  0206  3003               	movlw	3
  3226  0207  00A6               	movwf	___wmul@multiplicand
  3227  0208  3000               	movlw	0
  3228  0209  00A7               	movwf	___wmul@multiplicand+1
  3229  020A  3197  27C3  3181   	fcall	___wmul
  3230  020D  0020               	movlb	0	; select bank0
  3231  020E  0825               	movf	?___wmul+1,w
  3232  020F  0085               	movwf	5
  3233  0210  0824               	movf	?___wmul,w
  3234  0211  0084               	movwf	4
  3235  0212  3028               	movlw	low (__npowers_| (0+32768))
  3236  0213  0784               	addwf	4,f
  3237  0214  3090               	movlw	high (__npowers_| (0+32768))
  3238  0215  3D85               	addwfc	5,f
  3239  0216  3F00               	moviw [0]fsr0
  3240  0217  00B0               	movwf	___ftmul@f1
  3241  0218  3F01               	moviw [1]fsr0
  3242  0219  00B1               	movwf	___ftmul@f1+1
  3243  021A  3F02               	moviw [2]fsr0
  3244  021B  00B2               	movwf	___ftmul@f1+2
  3245  021C  300A               	movlw	10
  3246  021D  00F7               	movwf	___awdiv@divisor
  3247  021E  3000               	movlw	0
  3248  021F  00F8               	movwf	___awdiv@divisor+1
  3249  0220  0848               	movf	scale@scl,w
  3250  0221  00F9               	movwf	___awdiv@dividend
  3251  0222  01FA               	clrf	___awdiv@dividend+1
  3252  0223  1BF9               	btfsc	___awdiv@dividend,7
  3253  0224  03FA               	decf	___awdiv@dividend+1,f
  3254  0225  3189  217E  3181   	fcall	___awdiv
  3255  0228  0877               	movf	?___awdiv,w
  3256  0229  3E09               	addlw	9
  3257  022A  0020               	movlb	0	; select bank0
  3258  022B  00A4               	movwf	___wmul@multiplier
  3259  022C  3000               	movlw	0
  3260  022D  3D78               	addwfc	?___awdiv+1,w
  3261  022E  00A5               	movwf	___wmul@multiplier+1
  3262  022F  3003               	movlw	3
  3263  0230  00A6               	movwf	___wmul@multiplicand
  3264  0231  3000               	movlw	0
  3265  0232  00A7               	movwf	___wmul@multiplicand+1
  3266  0233  3197  27C3  3181   	fcall	___wmul
  3267  0236  0020               	movlb	0	; select bank0
  3268  0237  0825               	movf	?___wmul+1,w
  3269  0238  0085               	movwf	5
  3270  0239  0824               	movf	?___wmul,w
  3271  023A  0084               	movwf	4
  3272  023B  3028               	movlw	low (__npowers_| (0+32768))
  3273  023C  0784               	addwf	4,f
  3274  023D  3090               	movlw	high (__npowers_| (0+32768))
  3275  023E  3D85               	addwfc	5,f
  3276  023F  3F00               	moviw [0]fsr0
  3277  0240  00B3               	movwf	___ftmul@f2
  3278  0241  3F01               	moviw [1]fsr0
  3279  0242  00B4               	movwf	___ftmul@f2+1
  3280  0243  3F02               	moviw [2]fsr0
  3281  0244  00B5               	movwf	___ftmul@f2+2
  3282  0245  318B  2362         	fcall	___ftmul
  3283  0247  0020               	movlb	0	; select bank0
  3284  0248  0830               	movf	?___ftmul,w
  3285  0249  00C0               	movwf	?_scale
  3286  024A  0831               	movf	?___ftmul+1,w
  3287  024B  00C1               	movwf	?_scale+1
  3288  024C  0832               	movf	?___ftmul+2,w
  3289  024D  00C2               	movwf	?_scale+2
  3290  024E  0008               	return
  3291  024F                     l1899:	
  3292                           
  3293                           ;doprnt.c: 434: return _npowers_[scl];
  3294  024F  0848               	movf	scale@scl,w
  3295  0250  00C3               	movwf	??_scale
  3296  0251  01C4               	clrf	??_scale+1
  3297  0252  0843               	movf	??_scale,w
  3298  0253  00A4               	movwf	___wmul@multiplier
  3299  0254  0844               	movf	??_scale+1,w
  3300  0255  00A5               	movwf	___wmul@multiplier+1
  3301  0256  3003               	movlw	3
  3302  0257  00A6               	movwf	___wmul@multiplicand
  3303  0258  3000               	movlw	0
  3304  0259  00A7               	movwf	___wmul@multiplicand+1
  3305  025A  3197  27C3         	fcall	___wmul
  3306  025C  0020               	movlb	0	; select bank0
  3307  025D  0825               	movf	?___wmul+1,w
  3308  025E  0085               	movwf	5
  3309  025F  0824               	movf	?___wmul,w
  3310  0260  0084               	movwf	4
  3311  0261  3028               	movlw	low (__npowers_| (0+32768))
  3312  0262  0784               	addwf	4,f
  3313  0263  3090               	movlw	high (__npowers_| (0+32768))
  3314  0264  3D85               	addwfc	5,f
  3315  0265  3F00               	moviw [0]fsr0
  3316  0266  00C0               	movwf	?_scale
  3317  0267  3F01               	moviw [1]fsr0
  3318  0268  00C1               	movwf	?_scale+1
  3319  0269  3F02               	moviw [2]fsr0
  3320  026A  00C2               	movwf	?_scale+2
  3321  026B  0008               	return
  3322  026C                     l1903:	
  3323                           
  3324                           ;doprnt.c: 435: }
  3325                           ;doprnt.c: 436: if(scl>=110)
  3326  026C  0848               	movf	scale@scl,w
  3327  026D  3A80               	xorlw	128
  3328  026E  3E12               	addlw	-238
  3329  026F  1C03               	skipc
  3330  0270  2B13               	goto	l1911
  3331                           
  3332                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3333  0271  300A               	movlw	10
  3334  0272  00F7               	movwf	___awdiv@divisor
  3335  0273  3000               	movlw	0
  3336  0274  00F8               	movwf	___awdiv@divisor+1
  3337  0275  0848               	movf	scale@scl,w
  3338  0276  00F2               	movwf	___awmod@dividend
  3339  0277  01F3               	clrf	___awmod@dividend+1
  3340  0278  1BF2               	btfsc	___awmod@dividend,7
  3341  0279  03F3               	decf	___awmod@dividend+1,f
  3342  027A  3064               	movlw	100
  3343  027B  00F0               	movwf	___awmod@divisor
  3344  027C  3000               	movlw	0
  3345  027D  00F1               	movwf	___awmod@divisor+1
  3346  027E  3188  20E5  3181   	fcall	___awmod
  3347  0281  0871               	movf	?___awmod+1,w
  3348  0282  01FA               	clrf	___awdiv@dividend+1
  3349  0283  07FA               	addwf	___awdiv@dividend+1,f
  3350  0284  0870               	movf	?___awmod,w
  3351  0285  01F9               	clrf	___awdiv@dividend
  3352  0286  07F9               	addwf	___awdiv@dividend,f
  3353  0287  3189  217E  3181   	fcall	___awdiv
  3354  028A  0877               	movf	?___awdiv,w
  3355  028B  3E09               	addlw	9
  3356  028C  0020               	movlb	0	; select bank0
  3357  028D  00A4               	movwf	___wmul@multiplier
  3358  028E  3000               	movlw	0
  3359  028F  3D78               	addwfc	?___awdiv+1,w
  3360  0290  00A5               	movwf	___wmul@multiplier+1
  3361  0291  3003               	movlw	3
  3362  0292  00A6               	movwf	___wmul@multiplicand
  3363  0293  3000               	movlw	0
  3364  0294  00A7               	movwf	___wmul@multiplicand+1
  3365  0295  3197  27C3  3181   	fcall	___wmul
  3366  0298  0020               	movlb	0	; select bank0
  3367  0299  0825               	movf	?___wmul+1,w
  3368  029A  0085               	movwf	5
  3369  029B  0824               	movf	?___wmul,w
  3370  029C  0084               	movwf	4
  3371  029D  304F               	movlw	low (__powers_| (0+32768))
  3372  029E  0784               	addwf	4,f
  3373  029F  3090               	movlw	high (__powers_| (0+32768))
  3374  02A0  3D85               	addwfc	5,f
  3375  02A1  3F00               	moviw [0]fsr0
  3376  02A2  00B0               	movwf	___ftmul@f1
  3377  02A3  3F01               	moviw [1]fsr0
  3378  02A4  00B1               	movwf	___ftmul@f1+1
  3379  02A5  3F02               	moviw [2]fsr0
  3380  02A6  00B2               	movwf	___ftmul@f1+2
  3381  02A7  3064               	movlw	100
  3382  02A8  00F7               	movwf	___awdiv@divisor
  3383  02A9  3000               	movlw	0
  3384  02AA  00F8               	movwf	___awdiv@divisor+1
  3385  02AB  0848               	movf	scale@scl,w
  3386  02AC  00F9               	movwf	___awdiv@dividend
  3387  02AD  01FA               	clrf	___awdiv@dividend+1
  3388  02AE  1BF9               	btfsc	___awdiv@dividend,7
  3389  02AF  03FA               	decf	___awdiv@dividend+1,f
  3390  02B0  3189  217E  3181   	fcall	___awdiv
  3391  02B3  0877               	movf	?___awdiv,w
  3392  02B4  3E12               	addlw	18
  3393  02B5  0020               	movlb	0	; select bank0
  3394  02B6  00A4               	movwf	___wmul@multiplier
  3395  02B7  3000               	movlw	0
  3396  02B8  3D78               	addwfc	?___awdiv+1,w
  3397  02B9  00A5               	movwf	___wmul@multiplier+1
  3398  02BA  3003               	movlw	3
  3399  02BB  00A6               	movwf	___wmul@multiplicand
  3400  02BC  3000               	movlw	0
  3401  02BD  00A7               	movwf	___wmul@multiplicand+1
  3402  02BE  3197  27C3  3181   	fcall	___wmul
  3403  02C1  0020               	movlb	0	; select bank0
  3404  02C2  0825               	movf	?___wmul+1,w
  3405  02C3  0085               	movwf	5
  3406  02C4  0824               	movf	?___wmul,w
  3407  02C5  0084               	movwf	4
  3408  02C6  304F               	movlw	low (__powers_| (0+32768))
  3409  02C7  0784               	addwf	4,f
  3410  02C8  3090               	movlw	high (__powers_| (0+32768))
  3411  02C9  3D85               	addwfc	5,f
  3412  02CA  3F00               	moviw [0]fsr0
  3413  02CB  00B3               	movwf	___ftmul@f2
  3414  02CC  3F01               	moviw [1]fsr0
  3415  02CD  00B4               	movwf	___ftmul@f2+1
  3416  02CE  3F02               	moviw [2]fsr0
  3417  02CF  00B5               	movwf	___ftmul@f2+2
  3418  02D0  318B  2362  3181   	fcall	___ftmul
  3419  02D3  0020               	movlb	0	; select bank0
  3420  02D4  0830               	movf	?___ftmul,w
  3421  02D5  00C5               	movwf	_scale$882
  3422  02D6  0831               	movf	?___ftmul+1,w
  3423  02D7  00C6               	movwf	_scale$882+1
  3424  02D8  0832               	movf	?___ftmul+2,w
  3425  02D9  00C7               	movwf	_scale$882+2
  3426                           
  3427                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3428  02DA  0848               	movf	scale@scl,w
  3429  02DB  00F2               	movwf	___awmod@dividend
  3430  02DC  01F3               	clrf	___awmod@dividend+1
  3431  02DD  1BF2               	btfsc	___awmod@dividend,7
  3432  02DE  03F3               	decf	___awmod@dividend+1,f
  3433  02DF  300A               	movlw	10
  3434  02E0  00F0               	movwf	___awmod@divisor
  3435  02E1  3000               	movlw	0
  3436  02E2  00F1               	movwf	___awmod@divisor+1
  3437  02E3  3188  20E5  3181   	fcall	___awmod
  3438  02E6  0871               	movf	?___awmod+1,w
  3439  02E7  0020               	movlb	0	; select bank0
  3440  02E8  01A5               	clrf	___wmul@multiplier+1
  3441  02E9  07A5               	addwf	___wmul@multiplier+1,f
  3442  02EA  0870               	movf	?___awmod,w
  3443  02EB  01A4               	clrf	___wmul@multiplier
  3444  02EC  07A4               	addwf	___wmul@multiplier,f
  3445  02ED  3003               	movlw	3
  3446  02EE  00A6               	movwf	___wmul@multiplicand
  3447  02EF  3000               	movlw	0
  3448  02F0  00A7               	movwf	___wmul@multiplicand+1
  3449  02F1  3197  27C3  3181   	fcall	___wmul
  3450  02F4  0020               	movlb	0	; select bank0
  3451  02F5  0825               	movf	?___wmul+1,w
  3452  02F6  0085               	movwf	5
  3453  02F7  0824               	movf	?___wmul,w
  3454  02F8  0084               	movwf	4
  3455  02F9  304F               	movlw	low (__powers_| (0+32768))
  3456  02FA  0784               	addwf	4,f
  3457  02FB  3090               	movlw	high (__powers_| (0+32768))
  3458  02FC  3D85               	addwfc	5,f
  3459  02FD  3F00               	moviw [0]fsr0
  3460  02FE  00B0               	movwf	___ftmul@f1
  3461  02FF  3F01               	moviw [1]fsr0
  3462  0300  00B1               	movwf	___ftmul@f1+1
  3463  0301  3F02               	moviw [2]fsr0
  3464  0302  00B2               	movwf	___ftmul@f1+2
  3465  0303  0845               	movf	_scale$882,w
  3466  0304  00B3               	movwf	___ftmul@f2
  3467  0305  0846               	movf	_scale$882+1,w
  3468  0306  00B4               	movwf	___ftmul@f2+1
  3469  0307  0847               	movf	_scale$882+2,w
  3470  0308  00B5               	movwf	___ftmul@f2+2
  3471  0309  318B  2362         	fcall	___ftmul
  3472  030B  0020               	movlb	0	; select bank0
  3473  030C  0830               	movf	?___ftmul,w
  3474  030D  00C0               	movwf	?_scale
  3475  030E  0831               	movf	?___ftmul+1,w
  3476  030F  00C1               	movwf	?_scale+1
  3477  0310  0832               	movf	?___ftmul+2,w
  3478  0311  00C2               	movwf	?_scale+2
  3479  0312  0008               	return
  3480  0313                     l1911:	
  3481                           
  3482                           ;doprnt.c: 438: else if(scl > 10)
  3483  0313  0848               	movf	scale@scl,w
  3484  0314  3A80               	xorlw	128
  3485  0315  3E75               	addlw	-139
  3486  0316  1C03               	skipc
  3487  0317  2B74               	goto	l1917
  3488                           
  3489                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3490  0318  0848               	movf	scale@scl,w
  3491  0319  00F2               	movwf	___awmod@dividend
  3492  031A  01F3               	clrf	___awmod@dividend+1
  3493  031B  1BF2               	btfsc	___awmod@dividend,7
  3494  031C  03F3               	decf	___awmod@dividend+1,f
  3495  031D  300A               	movlw	10
  3496  031E  00F0               	movwf	___awmod@divisor
  3497  031F  3000               	movlw	0
  3498  0320  00F1               	movwf	___awmod@divisor+1
  3499  0321  3188  20E5  3181   	fcall	___awmod
  3500  0324  0871               	movf	?___awmod+1,w
  3501  0325  0020               	movlb	0	; select bank0
  3502  0326  01A5               	clrf	___wmul@multiplier+1
  3503  0327  07A5               	addwf	___wmul@multiplier+1,f
  3504  0328  0870               	movf	?___awmod,w
  3505  0329  01A4               	clrf	___wmul@multiplier
  3506  032A  07A4               	addwf	___wmul@multiplier,f
  3507  032B  3003               	movlw	3
  3508  032C  00A6               	movwf	___wmul@multiplicand
  3509  032D  3000               	movlw	0
  3510  032E  00A7               	movwf	___wmul@multiplicand+1
  3511  032F  3197  27C3  3181   	fcall	___wmul
  3512  0332  0020               	movlb	0	; select bank0
  3513  0333  0825               	movf	?___wmul+1,w
  3514  0334  0085               	movwf	5
  3515  0335  0824               	movf	?___wmul,w
  3516  0336  0084               	movwf	4
  3517  0337  304F               	movlw	low (__powers_| (0+32768))
  3518  0338  0784               	addwf	4,f
  3519  0339  3090               	movlw	high (__powers_| (0+32768))
  3520  033A  3D85               	addwfc	5,f
  3521  033B  3F00               	moviw [0]fsr0
  3522  033C  00B0               	movwf	___ftmul@f1
  3523  033D  3F01               	moviw [1]fsr0
  3524  033E  00B1               	movwf	___ftmul@f1+1
  3525  033F  3F02               	moviw [2]fsr0
  3526  0340  00B2               	movwf	___ftmul@f1+2
  3527  0341  300A               	movlw	10
  3528  0342  00F7               	movwf	___awdiv@divisor
  3529  0343  3000               	movlw	0
  3530  0344  00F8               	movwf	___awdiv@divisor+1
  3531  0345  0848               	movf	scale@scl,w
  3532  0346  00F9               	movwf	___awdiv@dividend
  3533  0347  01FA               	clrf	___awdiv@dividend+1
  3534  0348  1BF9               	btfsc	___awdiv@dividend,7
  3535  0349  03FA               	decf	___awdiv@dividend+1,f
  3536  034A  3189  217E  3181   	fcall	___awdiv
  3537  034D  0877               	movf	?___awdiv,w
  3538  034E  3E09               	addlw	9
  3539  034F  0020               	movlb	0	; select bank0
  3540  0350  00A4               	movwf	___wmul@multiplier
  3541  0351  3000               	movlw	0
  3542  0352  3D78               	addwfc	?___awdiv+1,w
  3543  0353  00A5               	movwf	___wmul@multiplier+1
  3544  0354  3003               	movlw	3
  3545  0355  00A6               	movwf	___wmul@multiplicand
  3546  0356  3000               	movlw	0
  3547  0357  00A7               	movwf	___wmul@multiplicand+1
  3548  0358  3197  27C3  3181   	fcall	___wmul
  3549  035B  0020               	movlb	0	; select bank0
  3550  035C  0825               	movf	?___wmul+1,w
  3551  035D  0085               	movwf	5
  3552  035E  0824               	movf	?___wmul,w
  3553  035F  0084               	movwf	4
  3554  0360  304F               	movlw	low (__powers_| (0+32768))
  3555  0361  0784               	addwf	4,f
  3556  0362  3090               	movlw	high (__powers_| (0+32768))
  3557  0363  3D85               	addwfc	5,f
  3558  0364  3F00               	moviw [0]fsr0
  3559  0365  00B3               	movwf	___ftmul@f2
  3560  0366  3F01               	moviw [1]fsr0
  3561  0367  00B4               	movwf	___ftmul@f2+1
  3562  0368  3F02               	moviw [2]fsr0
  3563  0369  00B5               	movwf	___ftmul@f2+2
  3564  036A  318B  2362         	fcall	___ftmul
  3565  036C  0020               	movlb	0	; select bank0
  3566  036D  0830               	movf	?___ftmul,w
  3567  036E  00C0               	movwf	?_scale
  3568  036F  0831               	movf	?___ftmul+1,w
  3569  0370  00C1               	movwf	?_scale+1
  3570  0371  0832               	movf	?___ftmul+2,w
  3571  0372  00C2               	movwf	?_scale+2
  3572  0373  0008               	return
  3573  0374                     l1917:	
  3574                           
  3575                           ;doprnt.c: 440: return _powers_[scl];
  3576  0374  0848               	movf	scale@scl,w
  3577  0375  00C3               	movwf	??_scale
  3578  0376  01C4               	clrf	??_scale+1
  3579  0377  0843               	movf	??_scale,w
  3580  0378  00A4               	movwf	___wmul@multiplier
  3581  0379  0844               	movf	??_scale+1,w
  3582  037A  00A5               	movwf	___wmul@multiplier+1
  3583  037B  3003               	movlw	3
  3584  037C  00A6               	movwf	___wmul@multiplicand
  3585  037D  3000               	movlw	0
  3586  037E  00A7               	movwf	___wmul@multiplicand+1
  3587  037F  3197  27C3         	fcall	___wmul
  3588  0381  0020               	movlb	0	; select bank0
  3589  0382  0825               	movf	?___wmul+1,w
  3590  0383  0085               	movwf	5
  3591  0384  0824               	movf	?___wmul,w
  3592  0385  0084               	movwf	4
  3593  0386  304F               	movlw	low (__powers_| (0+32768))
  3594  0387  0784               	addwf	4,f
  3595  0388  3090               	movlw	high (__powers_| (0+32768))
  3596  0389  3D85               	addwfc	5,f
  3597  038A  3F00               	moviw [0]fsr0
  3598  038B  00C0               	movwf	?_scale
  3599  038C  3F01               	moviw [1]fsr0
  3600  038D  00C1               	movwf	?_scale+1
  3601  038E  3F02               	moviw [2]fsr0
  3602  038F  00C2               	movwf	?_scale+2
  3603  0390  0008               	return
  3604  0391                     __end_of_scale:	
  3605                           
  3606                           	psect	text6
  3607  0E95                     __ptext6:	
  3608 ;; *************** function _fround *****************
  3609 ;; Defined at:
  3610 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  prec            1    wreg     unsigned char 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  prec            1   45[BANK0 ] unsigned char 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  3   32[BANK0 ] unsigned char 
  3617 ;; Registers used:
  3618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3624 ;;      Params:         0       3       0       0       0       0       0       0
  3625 ;;      Locals:         0       7       0       0       0       0       0       0
  3626 ;;      Temps:          0       4       0       0       0       0       0       0
  3627 ;;      Totals:         0      14       0       0       0       0       0       0
  3628 ;;Total ram usage:       14 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    2
  3631 ;; This function calls:
  3632 ;;		___awdiv
  3633 ;;		___awmod
  3634 ;;		___ftmul
  3635 ;;		___wmul
  3636 ;; This function is called by:
  3637 ;;		_sprintf
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function _fround
  3643  0E95                     _fround:	
  3644                           
  3645                           ;incstack = 0
  3646                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3647                           ;fround@prec stored from wreg
  3648  0E95  0020               	movlb	0	; select bank0
  3649  0E96  00CD               	movwf	fround@prec
  3650                           
  3651                           ;doprnt.c: 413: if(prec>=110)
  3652  0E97  306E               	movlw	110
  3653  0E98  024D               	subwf	fround@prec,w
  3654  0E99  1C03               	skipc
  3655  0E9A  2F59               	goto	l1869
  3656                           
  3657                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3658  0E9B  300A               	movlw	10
  3659  0E9C  00F7               	movwf	___awdiv@divisor
  3660  0E9D  3000               	movlw	0
  3661  0E9E  00F8               	movwf	___awdiv@divisor+1
  3662  0E9F  084D               	movf	fround@prec,w
  3663  0EA0  00C3               	movwf	??_fround
  3664  0EA1  01C4               	clrf	??_fround+1
  3665  0EA2  0843               	movf	??_fround,w
  3666  0EA3  00F2               	movwf	___awmod@dividend
  3667  0EA4  0844               	movf	??_fround+1,w
  3668  0EA5  00F3               	movwf	___awmod@dividend+1
  3669  0EA6  3064               	movlw	100
  3670  0EA7  00F0               	movwf	___awmod@divisor
  3671  0EA8  3000               	movlw	0
  3672  0EA9  00F1               	movwf	___awmod@divisor+1
  3673  0EAA  3188  20E5  318E   	fcall	___awmod
  3674  0EAD  0871               	movf	?___awmod+1,w
  3675  0EAE  01FA               	clrf	___awdiv@dividend+1
  3676  0EAF  07FA               	addwf	___awdiv@dividend+1,f
  3677  0EB0  0870               	movf	?___awmod,w
  3678  0EB1  01F9               	clrf	___awdiv@dividend
  3679  0EB2  07F9               	addwf	___awdiv@dividend,f
  3680  0EB3  3189  217E  318E   	fcall	___awdiv
  3681  0EB6  0877               	movf	?___awdiv,w
  3682  0EB7  3E09               	addlw	9
  3683  0EB8  0020               	movlb	0	; select bank0
  3684  0EB9  00A4               	movwf	___wmul@multiplier
  3685  0EBA  3000               	movlw	0
  3686  0EBB  3D78               	addwfc	?___awdiv+1,w
  3687  0EBC  00A5               	movwf	___wmul@multiplier+1
  3688  0EBD  3003               	movlw	3
  3689  0EBE  00A6               	movwf	___wmul@multiplicand
  3690  0EBF  3000               	movlw	0
  3691  0EC0  00A7               	movwf	___wmul@multiplicand+1
  3692  0EC1  3197  27C3  318E   	fcall	___wmul
  3693  0EC4  0020               	movlb	0	; select bank0
  3694  0EC5  0825               	movf	?___wmul+1,w
  3695  0EC6  0085               	movwf	5
  3696  0EC7  0824               	movf	?___wmul,w
  3697  0EC8  0084               	movwf	4
  3698  0EC9  3028               	movlw	low (__npowers_| (0+32768))
  3699  0ECA  0784               	addwf	4,f
  3700  0ECB  3090               	movlw	high (__npowers_| (0+32768))
  3701  0ECC  3D85               	addwfc	5,f
  3702  0ECD  3F00               	moviw [0]fsr0
  3703  0ECE  00B0               	movwf	___ftmul@f1
  3704  0ECF  3F01               	moviw [1]fsr0
  3705  0ED0  00B1               	movwf	___ftmul@f1+1
  3706  0ED1  3F02               	moviw [2]fsr0
  3707  0ED2  00B2               	movwf	___ftmul@f1+2
  3708  0ED3  3064               	movlw	100
  3709  0ED4  00F7               	movwf	___awdiv@divisor
  3710  0ED5  3000               	movlw	0
  3711  0ED6  00F8               	movwf	___awdiv@divisor+1
  3712  0ED7  084D               	movf	fround@prec,w
  3713  0ED8  00C5               	movwf	??_fround+2
  3714  0ED9  01C6               	clrf	??_fround+3
  3715  0EDA  0845               	movf	??_fround+2,w
  3716  0EDB  00F9               	movwf	___awdiv@dividend
  3717  0EDC  0846               	movf	??_fround+3,w
  3718  0EDD  00FA               	movwf	___awdiv@dividend+1
  3719  0EDE  3189  217E  318E   	fcall	___awdiv
  3720  0EE1  0877               	movf	?___awdiv,w
  3721  0EE2  3E12               	addlw	18
  3722  0EE3  0020               	movlb	0	; select bank0
  3723  0EE4  00A4               	movwf	___wmul@multiplier
  3724  0EE5  3000               	movlw	0
  3725  0EE6  3D78               	addwfc	?___awdiv+1,w
  3726  0EE7  00A5               	movwf	___wmul@multiplier+1
  3727  0EE8  3003               	movlw	3
  3728  0EE9  00A6               	movwf	___wmul@multiplicand
  3729  0EEA  3000               	movlw	0
  3730  0EEB  00A7               	movwf	___wmul@multiplicand+1
  3731  0EEC  3197  27C3  318E   	fcall	___wmul
  3732  0EEF  0020               	movlb	0	; select bank0
  3733  0EF0  0825               	movf	?___wmul+1,w
  3734  0EF1  0085               	movwf	5
  3735  0EF2  0824               	movf	?___wmul,w
  3736  0EF3  0084               	movwf	4
  3737  0EF4  3028               	movlw	low (__npowers_| (0+32768))
  3738  0EF5  0784               	addwf	4,f
  3739  0EF6  3090               	movlw	high (__npowers_| (0+32768))
  3740  0EF7  3D85               	addwfc	5,f
  3741  0EF8  3F00               	moviw [0]fsr0
  3742  0EF9  00B3               	movwf	___ftmul@f2
  3743  0EFA  3F01               	moviw [1]fsr0
  3744  0EFB  00B4               	movwf	___ftmul@f2+1
  3745  0EFC  3F02               	moviw [2]fsr0
  3746  0EFD  00B5               	movwf	___ftmul@f2+2
  3747  0EFE  318B  2362  318E   	fcall	___ftmul
  3748  0F01  0020               	movlb	0	; select bank0
  3749  0F02  0830               	movf	?___ftmul,w
  3750  0F03  00CA               	movwf	_fround$880
  3751  0F04  0831               	movf	?___ftmul+1,w
  3752  0F05  00CB               	movwf	_fround$880+1
  3753  0F06  0832               	movf	?___ftmul+2,w
  3754  0F07  00CC               	movwf	_fround$880+2
  3755                           
  3756                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3757  0F08  084D               	movf	fround@prec,w
  3758  0F09  00C3               	movwf	??_fround
  3759  0F0A  01C4               	clrf	??_fround+1
  3760  0F0B  0843               	movf	??_fround,w
  3761  0F0C  00F2               	movwf	___awmod@dividend
  3762  0F0D  0844               	movf	??_fround+1,w
  3763  0F0E  00F3               	movwf	___awmod@dividend+1
  3764  0F0F  300A               	movlw	10
  3765  0F10  00F0               	movwf	___awmod@divisor
  3766  0F11  3000               	movlw	0
  3767  0F12  00F1               	movwf	___awmod@divisor+1
  3768  0F13  3188  20E5  318E   	fcall	___awmod
  3769  0F16  0871               	movf	?___awmod+1,w
  3770  0F17  0020               	movlb	0	; select bank0
  3771  0F18  01A5               	clrf	___wmul@multiplier+1
  3772  0F19  07A5               	addwf	___wmul@multiplier+1,f
  3773  0F1A  0870               	movf	?___awmod,w
  3774  0F1B  01A4               	clrf	___wmul@multiplier
  3775  0F1C  07A4               	addwf	___wmul@multiplier,f
  3776  0F1D  3003               	movlw	3
  3777  0F1E  00A6               	movwf	___wmul@multiplicand
  3778  0F1F  3000               	movlw	0
  3779  0F20  00A7               	movwf	___wmul@multiplicand+1
  3780  0F21  3197  27C3  318E   	fcall	___wmul
  3781  0F24  0020               	movlb	0	; select bank0
  3782  0F25  0825               	movf	?___wmul+1,w
  3783  0F26  0085               	movwf	5
  3784  0F27  0824               	movf	?___wmul,w
  3785  0F28  0084               	movwf	4
  3786  0F29  3028               	movlw	low (__npowers_| (0+32768))
  3787  0F2A  0784               	addwf	4,f
  3788  0F2B  3090               	movlw	high (__npowers_| (0+32768))
  3789  0F2C  3D85               	addwfc	5,f
  3790  0F2D  3F00               	moviw [0]fsr0
  3791  0F2E  00B0               	movwf	___ftmul@f1
  3792  0F2F  3F01               	moviw [1]fsr0
  3793  0F30  00B1               	movwf	___ftmul@f1+1
  3794  0F31  3F02               	moviw [2]fsr0
  3795  0F32  00B2               	movwf	___ftmul@f1+2
  3796  0F33  084A               	movf	_fround$880,w
  3797  0F34  00B3               	movwf	___ftmul@f2
  3798  0F35  084B               	movf	_fround$880+1,w
  3799  0F36  00B4               	movwf	___ftmul@f2+1
  3800  0F37  084C               	movf	_fround$880+2,w
  3801  0F38  00B5               	movwf	___ftmul@f2+2
  3802  0F39  318B  2362  318E   	fcall	___ftmul
  3803  0F3C  0020               	movlb	0	; select bank0
  3804  0F3D  0830               	movf	?___ftmul,w
  3805  0F3E  00C7               	movwf	_fround$881
  3806  0F3F  0831               	movf	?___ftmul+1,w
  3807  0F40  00C8               	movwf	_fround$881+1
  3808  0F41  0832               	movf	?___ftmul+2,w
  3809  0F42  00C9               	movwf	_fround$881+2
  3810                           
  3811                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3812  0F43  3000               	movlw	0
  3813  0F44  00B0               	movwf	___ftmul@f1
  3814  0F45  3000               	movlw	0
  3815  0F46  00B1               	movwf	___ftmul@f1+1
  3816  0F47  303F               	movlw	63
  3817  0F48  00B2               	movwf	___ftmul@f1+2
  3818  0F49  0847               	movf	_fround$881,w
  3819  0F4A  00B3               	movwf	___ftmul@f2
  3820  0F4B  0848               	movf	_fround$881+1,w
  3821  0F4C  00B4               	movwf	___ftmul@f2+1
  3822  0F4D  0849               	movf	_fround$881+2,w
  3823  0F4E  00B5               	movwf	___ftmul@f2+2
  3824  0F4F  318B  2362         	fcall	___ftmul
  3825  0F51  0020               	movlb	0	; select bank0
  3826  0F52  0830               	movf	?___ftmul,w
  3827  0F53  00C0               	movwf	?_fround
  3828  0F54  0831               	movf	?___ftmul+1,w
  3829  0F55  00C1               	movwf	?_fround+1
  3830  0F56  0832               	movf	?___ftmul+2,w
  3831  0F57  00C2               	movwf	?_fround+2
  3832  0F58  0008               	return
  3833  0F59                     l1869:	
  3834                           
  3835                           ;doprnt.c: 415: else if(prec > 10)
  3836  0F59  300B               	movlw	11
  3837  0F5A  024D               	subwf	fround@prec,w
  3838  0F5B  1C03               	skipc
  3839  0F5C  2FD3               	goto	l1877
  3840                           
  3841                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3842  0F5D  084D               	movf	fround@prec,w
  3843  0F5E  00C3               	movwf	??_fround
  3844  0F5F  01C4               	clrf	??_fround+1
  3845  0F60  0843               	movf	??_fround,w
  3846  0F61  00F2               	movwf	___awmod@dividend
  3847  0F62  0844               	movf	??_fround+1,w
  3848  0F63  00F3               	movwf	___awmod@dividend+1
  3849  0F64  300A               	movlw	10
  3850  0F65  00F0               	movwf	___awmod@divisor
  3851  0F66  3000               	movlw	0
  3852  0F67  00F1               	movwf	___awmod@divisor+1
  3853  0F68  3188  20E5  318E   	fcall	___awmod
  3854  0F6B  0871               	movf	?___awmod+1,w
  3855  0F6C  0020               	movlb	0	; select bank0
  3856  0F6D  01A5               	clrf	___wmul@multiplier+1
  3857  0F6E  07A5               	addwf	___wmul@multiplier+1,f
  3858  0F6F  0870               	movf	?___awmod,w
  3859  0F70  01A4               	clrf	___wmul@multiplier
  3860  0F71  07A4               	addwf	___wmul@multiplier,f
  3861  0F72  3003               	movlw	3
  3862  0F73  00A6               	movwf	___wmul@multiplicand
  3863  0F74  3000               	movlw	0
  3864  0F75  00A7               	movwf	___wmul@multiplicand+1
  3865  0F76  3197  27C3  318E   	fcall	___wmul
  3866  0F79  0020               	movlb	0	; select bank0
  3867  0F7A  0825               	movf	?___wmul+1,w
  3868  0F7B  0085               	movwf	5
  3869  0F7C  0824               	movf	?___wmul,w
  3870  0F7D  0084               	movwf	4
  3871  0F7E  3028               	movlw	low (__npowers_| (0+32768))
  3872  0F7F  0784               	addwf	4,f
  3873  0F80  3090               	movlw	high (__npowers_| (0+32768))
  3874  0F81  3D85               	addwfc	5,f
  3875  0F82  3F00               	moviw [0]fsr0
  3876  0F83  00B0               	movwf	___ftmul@f1
  3877  0F84  3F01               	moviw [1]fsr0
  3878  0F85  00B1               	movwf	___ftmul@f1+1
  3879  0F86  3F02               	moviw [2]fsr0
  3880  0F87  00B2               	movwf	___ftmul@f1+2
  3881  0F88  300A               	movlw	10
  3882  0F89  00F7               	movwf	___awdiv@divisor
  3883  0F8A  3000               	movlw	0
  3884  0F8B  00F8               	movwf	___awdiv@divisor+1
  3885  0F8C  084D               	movf	fround@prec,w
  3886  0F8D  00C5               	movwf	??_fround+2
  3887  0F8E  01C6               	clrf	??_fround+3
  3888  0F8F  0845               	movf	??_fround+2,w
  3889  0F90  00F9               	movwf	___awdiv@dividend
  3890  0F91  0846               	movf	??_fround+3,w
  3891  0F92  00FA               	movwf	___awdiv@dividend+1
  3892  0F93  3189  217E  318E   	fcall	___awdiv
  3893  0F96  0877               	movf	?___awdiv,w
  3894  0F97  3E09               	addlw	9
  3895  0F98  0020               	movlb	0	; select bank0
  3896  0F99  00A4               	movwf	___wmul@multiplier
  3897  0F9A  3000               	movlw	0
  3898  0F9B  3D78               	addwfc	?___awdiv+1,w
  3899  0F9C  00A5               	movwf	___wmul@multiplier+1
  3900  0F9D  3003               	movlw	3
  3901  0F9E  00A6               	movwf	___wmul@multiplicand
  3902  0F9F  3000               	movlw	0
  3903  0FA0  00A7               	movwf	___wmul@multiplicand+1
  3904  0FA1  3197  27C3  318E   	fcall	___wmul
  3905  0FA4  0020               	movlb	0	; select bank0
  3906  0FA5  0825               	movf	?___wmul+1,w
  3907  0FA6  0085               	movwf	5
  3908  0FA7  0824               	movf	?___wmul,w
  3909  0FA8  0084               	movwf	4
  3910  0FA9  3028               	movlw	low (__npowers_| (0+32768))
  3911  0FAA  0784               	addwf	4,f
  3912  0FAB  3090               	movlw	high (__npowers_| (0+32768))
  3913  0FAC  3D85               	addwfc	5,f
  3914  0FAD  3F00               	moviw [0]fsr0
  3915  0FAE  00B3               	movwf	___ftmul@f2
  3916  0FAF  3F01               	moviw [1]fsr0
  3917  0FB0  00B4               	movwf	___ftmul@f2+1
  3918  0FB1  3F02               	moviw [2]fsr0
  3919  0FB2  00B5               	movwf	___ftmul@f2+2
  3920  0FB3  318B  2362  318E   	fcall	___ftmul
  3921  0FB6  0020               	movlb	0	; select bank0
  3922  0FB7  0830               	movf	?___ftmul,w
  3923  0FB8  00CA               	movwf	_fround$880
  3924  0FB9  0831               	movf	?___ftmul+1,w
  3925  0FBA  00CB               	movwf	_fround$880+1
  3926  0FBB  0832               	movf	?___ftmul+2,w
  3927  0FBC  00CC               	movwf	_fround$880+2
  3928                           
  3929                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3930  0FBD  3000               	movlw	0
  3931  0FBE  00B0               	movwf	___ftmul@f1
  3932  0FBF  3000               	movlw	0
  3933  0FC0  00B1               	movwf	___ftmul@f1+1
  3934  0FC1  303F               	movlw	63
  3935  0FC2  00B2               	movwf	___ftmul@f1+2
  3936  0FC3  084A               	movf	_fround$880,w
  3937  0FC4  00B3               	movwf	___ftmul@f2
  3938  0FC5  084B               	movf	_fround$880+1,w
  3939  0FC6  00B4               	movwf	___ftmul@f2+1
  3940  0FC7  084C               	movf	_fround$880+2,w
  3941  0FC8  00B5               	movwf	___ftmul@f2+2
  3942  0FC9  318B  2362         	fcall	___ftmul
  3943  0FCB  0020               	movlb	0	; select bank0
  3944  0FCC  0830               	movf	?___ftmul,w
  3945  0FCD  00C0               	movwf	?_fround
  3946  0FCE  0831               	movf	?___ftmul+1,w
  3947  0FCF  00C1               	movwf	?_fround+1
  3948  0FD0  0832               	movf	?___ftmul+2,w
  3949  0FD1  00C2               	movwf	?_fround+2
  3950  0FD2  0008               	return
  3951  0FD3                     l1877:	
  3952                           
  3953                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3954  0FD3  3000               	movlw	0
  3955  0FD4  00B0               	movwf	___ftmul@f1
  3956  0FD5  3000               	movlw	0
  3957  0FD6  00B1               	movwf	___ftmul@f1+1
  3958  0FD7  303F               	movlw	63
  3959  0FD8  00B2               	movwf	___ftmul@f1+2
  3960  0FD9  084D               	movf	fround@prec,w
  3961  0FDA  00C3               	movwf	??_fround
  3962  0FDB  01C4               	clrf	??_fround+1
  3963  0FDC  0843               	movf	??_fround,w
  3964  0FDD  00A4               	movwf	___wmul@multiplier
  3965  0FDE  0844               	movf	??_fround+1,w
  3966  0FDF  00A5               	movwf	___wmul@multiplier+1
  3967  0FE0  3003               	movlw	3
  3968  0FE1  00A6               	movwf	___wmul@multiplicand
  3969  0FE2  3000               	movlw	0
  3970  0FE3  00A7               	movwf	___wmul@multiplicand+1
  3971  0FE4  3197  27C3  318E   	fcall	___wmul
  3972  0FE7  0020               	movlb	0	; select bank0
  3973  0FE8  0825               	movf	?___wmul+1,w
  3974  0FE9  0085               	movwf	5
  3975  0FEA  0824               	movf	?___wmul,w
  3976  0FEB  0084               	movwf	4
  3977  0FEC  3028               	movlw	low (__npowers_| (0+32768))
  3978  0FED  0784               	addwf	4,f
  3979  0FEE  3090               	movlw	high (__npowers_| (0+32768))
  3980  0FEF  3D85               	addwfc	5,f
  3981  0FF0  3F00               	moviw [0]fsr0
  3982  0FF1  00B3               	movwf	___ftmul@f2
  3983  0FF2  3F01               	moviw [1]fsr0
  3984  0FF3  00B4               	movwf	___ftmul@f2+1
  3985  0FF4  3F02               	moviw [2]fsr0
  3986  0FF5  00B5               	movwf	___ftmul@f2+2
  3987  0FF6  318B  2362         	fcall	___ftmul
  3988  0FF8  0020               	movlb	0	; select bank0
  3989  0FF9  0830               	movf	?___ftmul,w
  3990  0FFA  00C0               	movwf	?_fround
  3991  0FFB  0831               	movf	?___ftmul+1,w
  3992  0FFC  00C1               	movwf	?_fround+1
  3993  0FFD  0832               	movf	?___ftmul+2,w
  3994  0FFE  00C2               	movwf	?_fround+2
  3995  0FFF  0008               	return
  3996  1000                     __end_of_fround:	
  3997                           
  3998                           	psect	text7
  3999  17C3                     __ptext7:	
  4000 ;; *************** function ___wmul *****************
  4001 ;; Defined at:
  4002 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  multiplier      2    4[BANK0 ] unsigned int 
  4005 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  product         2   12[COMMON] unsigned int 
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  2    4[BANK0 ] unsigned int 
  4010 ;; Registers used:
  4011 ;;		wreg, status,2, status,0
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4017 ;;      Params:         0       4       0       0       0       0       0       0
  4018 ;;      Locals:         2       0       0       0       0       0       0       0
  4019 ;;      Temps:          0       0       0       0       0       0       0       0
  4020 ;;      Totals:         2       4       0       0       0       0       0       0
  4021 ;;Total ram usage:        6 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; This function calls:
  4024 ;;		Nothing
  4025 ;; This function is called by:
  4026 ;;		_fround
  4027 ;;		_scale
  4028 ;;		_sprintf
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function ___wmul
  4034  17C3                     ___wmul:	
  4035                           
  4036                           ;incstack = 0
  4037                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4038  17C3  01FC               	clrf	___wmul@product
  4039  17C4  01FD               	clrf	___wmul@product+1
  4040  17C5                     l1633:	
  4041  17C5  0020               	movlb	0	; select bank0
  4042  17C6  1C24               	btfss	___wmul@multiplier,0
  4043  17C7  2FCC               	goto	l272
  4044  17C8  0826               	movf	___wmul@multiplicand,w
  4045  17C9  07FC               	addwf	___wmul@product,f
  4046  17CA  0827               	movf	___wmul@multiplicand+1,w
  4047  17CB  3DFD               	addwfc	___wmul@product+1,f
  4048  17CC                     l272:	
  4049  17CC  3001               	movlw	1
  4050  17CD                     u1855:	
  4051  17CD  35A6               	lslf	___wmul@multiplicand,f
  4052  17CE  0DA7               	rlf	___wmul@multiplicand+1,f
  4053  17CF  0B89               	decfsz	9,f
  4054  17D0  2FCD               	goto	u1855
  4055  17D1  3001               	movlw	1
  4056  17D2                     u1865:	
  4057  17D2  36A5               	lsrf	___wmul@multiplier+1,f
  4058  17D3  0CA4               	rrf	___wmul@multiplier,f
  4059  17D4  0B89               	decfsz	9,f
  4060  17D5  2FD2               	goto	u1865
  4061  17D6  0825               	movf	___wmul@multiplier+1,w
  4062  17D7  0424               	iorwf	___wmul@multiplier,w
  4063  17D8  1D03               	skipz
  4064  17D9  2FC5               	goto	l1633
  4065  17DA  087D               	movf	___wmul@product+1,w
  4066  17DB  01A5               	clrf	?___wmul+1
  4067  17DC  07A5               	addwf	?___wmul+1,f
  4068  17DD  087C               	movf	___wmul@product,w
  4069  17DE  01A4               	clrf	?___wmul
  4070  17DF  07A4               	addwf	?___wmul,f
  4071  17E0  0008               	return
  4072  17E1                     __end_of___wmul:	
  4073                           
  4074                           	psect	text8
  4075  0B62                     __ptext8:	
  4076 ;; *************** function ___ftmul *****************
  4077 ;; Defined at:
  4078 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  f1              3   16[BANK0 ] float 
  4081 ;;  f2              3   19[BANK0 ] float 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  4084 ;;  sign            1   31[BANK0 ] unsigned char 
  4085 ;;  cntr            1   30[BANK0 ] unsigned char 
  4086 ;;  exp             1   26[BANK0 ] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  3   16[BANK0 ] float 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0, pclath, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4096 ;;      Params:         0       6       0       0       0       0       0       0
  4097 ;;      Locals:         0       6       0       0       0       0       0       0
  4098 ;;      Temps:          0       4       0       0       0       0       0       0
  4099 ;;      Totals:         0      16       0       0       0       0       0       0
  4100 ;;Total ram usage:       16 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    1
  4103 ;; This function calls:
  4104 ;;		___ftpack
  4105 ;; This function is called by:
  4106 ;;		_loop
  4107 ;;		_fround
  4108 ;;		_scale
  4109 ;;		_sprintf
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           
  4114                           ;psect for function ___ftmul
  4115  0B62                     ___ftmul:	
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4119  0B62  0020               	movlb	0	; select bank0
  4120  0B63  0830               	movf	___ftmul@f1,w
  4121  0B64  00B6               	movwf	??___ftmul
  4122  0B65  0831               	movf	___ftmul@f1+1,w
  4123  0B66  00B7               	movwf	??___ftmul+1
  4124  0B67  0832               	movf	___ftmul@f1+2,w
  4125  0B68  00B8               	movwf	??___ftmul+2
  4126  0B69  1003               	clrc
  4127  0B6A  0D37               	rlf	??___ftmul+1,w
  4128  0B6B  0D38               	rlf	??___ftmul+2,w
  4129  0B6C  00B9               	movwf	??___ftmul+3
  4130  0B6D  0839               	movf	??___ftmul+3,w
  4131  0B6E  00BA               	movwf	___ftmul@exp
  4132  0B6F  08BA               	movf	___ftmul@exp,f
  4133  0B70  1D03               	skipz
  4134  0B71  2B79               	goto	l1803
  4135  0B72  3000               	movlw	0
  4136  0B73  00B0               	movwf	?___ftmul
  4137  0B74  3000               	movlw	0
  4138  0B75  00B1               	movwf	?___ftmul+1
  4139  0B76  3000               	movlw	0
  4140  0B77  00B2               	movwf	?___ftmul+2
  4141  0B78  0008               	return
  4142  0B79                     l1803:	
  4143  0B79  0833               	movf	___ftmul@f2,w
  4144  0B7A  00B6               	movwf	??___ftmul
  4145  0B7B  0834               	movf	___ftmul@f2+1,w
  4146  0B7C  00B7               	movwf	??___ftmul+1
  4147  0B7D  0835               	movf	___ftmul@f2+2,w
  4148  0B7E  00B8               	movwf	??___ftmul+2
  4149  0B7F  1003               	clrc
  4150  0B80  0D37               	rlf	??___ftmul+1,w
  4151  0B81  0D38               	rlf	??___ftmul+2,w
  4152  0B82  00B9               	movwf	??___ftmul+3
  4153  0B83  0839               	movf	??___ftmul+3,w
  4154  0B84  00BF               	movwf	___ftmul@sign
  4155  0B85  08BF               	movf	___ftmul@sign,f
  4156  0B86  1D03               	skipz
  4157  0B87  2B8F               	goto	l1809
  4158  0B88  3000               	movlw	0
  4159  0B89  00B0               	movwf	?___ftmul
  4160  0B8A  3000               	movlw	0
  4161  0B8B  00B1               	movwf	?___ftmul+1
  4162  0B8C  3000               	movlw	0
  4163  0B8D  00B2               	movwf	?___ftmul+2
  4164  0B8E  0008               	return
  4165  0B8F                     l1809:	
  4166  0B8F  083F               	movf	___ftmul@sign,w
  4167  0B90  3E7B               	addlw	123
  4168  0B91  00B6               	movwf	??___ftmul
  4169  0B92  0836               	movf	??___ftmul,w
  4170  0B93  07BA               	addwf	___ftmul@exp,f
  4171  0B94  0830               	movf	___ftmul@f1,w
  4172  0B95  00B6               	movwf	??___ftmul
  4173  0B96  0831               	movf	___ftmul@f1+1,w
  4174  0B97  00B7               	movwf	??___ftmul+1
  4175  0B98  0832               	movf	___ftmul@f1+2,w
  4176  0B99  00B8               	movwf	??___ftmul+2
  4177  0B9A  3010               	movlw	16
  4178  0B9B                     u2325:	
  4179  0B9B  36B8               	lsrf	??___ftmul+2,f
  4180  0B9C  0CB7               	rrf	??___ftmul+1,f
  4181  0B9D  0CB6               	rrf	??___ftmul,f
  4182  0B9E  0B89               	decfsz	9,f
  4183  0B9F  2B9B               	goto	u2325
  4184  0BA0  0836               	movf	??___ftmul,w
  4185  0BA1  00B9               	movwf	??___ftmul+3
  4186  0BA2  0839               	movf	??___ftmul+3,w
  4187  0BA3  00BF               	movwf	___ftmul@sign
  4188  0BA4  0833               	movf	___ftmul@f2,w
  4189  0BA5  00B6               	movwf	??___ftmul
  4190  0BA6  0834               	movf	___ftmul@f2+1,w
  4191  0BA7  00B7               	movwf	??___ftmul+1
  4192  0BA8  0835               	movf	___ftmul@f2+2,w
  4193  0BA9  00B8               	movwf	??___ftmul+2
  4194  0BAA  3010               	movlw	16
  4195  0BAB                     u2335:	
  4196  0BAB  36B8               	lsrf	??___ftmul+2,f
  4197  0BAC  0CB7               	rrf	??___ftmul+1,f
  4198  0BAD  0CB6               	rrf	??___ftmul,f
  4199  0BAE  0B89               	decfsz	9,f
  4200  0BAF  2BAB               	goto	u2335
  4201  0BB0  0836               	movf	??___ftmul,w
  4202  0BB1  00B9               	movwf	??___ftmul+3
  4203  0BB2  0839               	movf	??___ftmul+3,w
  4204  0BB3  06BF               	xorwf	___ftmul@sign,f
  4205  0BB4  3080               	movlw	128
  4206  0BB5  00B6               	movwf	??___ftmul
  4207  0BB6  0836               	movf	??___ftmul,w
  4208  0BB7  05BF               	andwf	___ftmul@sign,f
  4209  0BB8  17B1               	bsf	___ftmul@f1+1,7
  4210  0BB9  17B4               	bsf	___ftmul@f2+1,7
  4211  0BBA  30FF               	movlw	255
  4212  0BBB  05B3               	andwf	___ftmul@f2,f
  4213  0BBC  30FF               	movlw	255
  4214  0BBD  05B4               	andwf	___ftmul@f2+1,f
  4215  0BBE  3000               	movlw	0
  4216  0BBF  05B5               	andwf	___ftmul@f2+2,f
  4217  0BC0  3000               	movlw	0
  4218  0BC1  00BB               	movwf	___ftmul@f3_as_product
  4219  0BC2  3000               	movlw	0
  4220  0BC3  00BC               	movwf	___ftmul@f3_as_product+1
  4221  0BC4  3000               	movlw	0
  4222  0BC5  00BD               	movwf	___ftmul@f3_as_product+2
  4223  0BC6  3007               	movlw	7
  4224  0BC7  00B6               	movwf	??___ftmul
  4225  0BC8  0836               	movf	??___ftmul,w
  4226  0BC9  00BE               	movwf	___ftmul@cntr
  4227  0BCA                     l1821:	
  4228  0BCA  1C30               	btfss	___ftmul@f1,0
  4229  0BCB  2BD2               	goto	l1825
  4230  0BCC  0833               	movf	___ftmul@f2,w
  4231  0BCD  07BB               	addwf	___ftmul@f3_as_product,f
  4232  0BCE  0834               	movf	___ftmul@f2+1,w
  4233  0BCF  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  4234  0BD0  0835               	movf	___ftmul@f2+2,w
  4235  0BD1  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  4236  0BD2                     l1825:	
  4237  0BD2  3001               	movlw	1
  4238  0BD3                     u2355:	
  4239  0BD3  36B2               	lsrf	___ftmul@f1+2,f
  4240  0BD4  0CB1               	rrf	___ftmul@f1+1,f
  4241  0BD5  0CB0               	rrf	___ftmul@f1,f
  4242  0BD6  0B89               	decfsz	9,f
  4243  0BD7  2BD3               	goto	u2355
  4244  0BD8  3001               	movlw	1
  4245  0BD9                     u2365:	
  4246  0BD9  35B3               	lslf	___ftmul@f2,f
  4247  0BDA  0DB4               	rlf	___ftmul@f2+1,f
  4248  0BDB  0DB5               	rlf	___ftmul@f2+2,f
  4249  0BDC  0B89               	decfsz	9,f
  4250  0BDD  2BD9               	goto	u2365
  4251  0BDE  3001               	movlw	1
  4252  0BDF  02BE               	subwf	___ftmul@cntr,f
  4253  0BE0  1D03               	btfss	3,2
  4254  0BE1  2BCA               	goto	l1821
  4255  0BE2  3009               	movlw	9
  4256  0BE3  00B6               	movwf	??___ftmul
  4257  0BE4  0836               	movf	??___ftmul,w
  4258  0BE5  00BE               	movwf	___ftmul@cntr
  4259  0BE6                     l1833:	
  4260  0BE6  1C30               	btfss	___ftmul@f1,0
  4261  0BE7  2BEE               	goto	l1837
  4262  0BE8  0833               	movf	___ftmul@f2,w
  4263  0BE9  07BB               	addwf	___ftmul@f3_as_product,f
  4264  0BEA  0834               	movf	___ftmul@f2+1,w
  4265  0BEB  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  4266  0BEC  0835               	movf	___ftmul@f2+2,w
  4267  0BED  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  4268  0BEE                     l1837:	
  4269  0BEE  3001               	movlw	1
  4270  0BEF                     u2395:	
  4271  0BEF  36B2               	lsrf	___ftmul@f1+2,f
  4272  0BF0  0CB1               	rrf	___ftmul@f1+1,f
  4273  0BF1  0CB0               	rrf	___ftmul@f1,f
  4274  0BF2  0B89               	decfsz	9,f
  4275  0BF3  2BEF               	goto	u2395
  4276  0BF4  3001               	movlw	1
  4277  0BF5                     u2405:	
  4278  0BF5  36BD               	lsrf	___ftmul@f3_as_product+2,f
  4279  0BF6  0CBC               	rrf	___ftmul@f3_as_product+1,f
  4280  0BF7  0CBB               	rrf	___ftmul@f3_as_product,f
  4281  0BF8  0B89               	decfsz	9,f
  4282  0BF9  2BF5               	goto	u2405
  4283  0BFA  3001               	movlw	1
  4284  0BFB  02BE               	subwf	___ftmul@cntr,f
  4285  0BFC  1D03               	btfss	3,2
  4286  0BFD  2BE6               	goto	l1833
  4287  0BFE  083B               	movf	___ftmul@f3_as_product,w
  4288  0BFF  00F0               	movwf	___ftpack@arg
  4289  0C00  083C               	movf	___ftmul@f3_as_product+1,w
  4290  0C01  00F1               	movwf	___ftpack@arg+1
  4291  0C02  083D               	movf	___ftmul@f3_as_product+2,w
  4292  0C03  00F2               	movwf	___ftpack@arg+2
  4293  0C04  083A               	movf	___ftmul@exp,w
  4294  0C05  00B6               	movwf	??___ftmul
  4295  0C06  0836               	movf	??___ftmul,w
  4296  0C07  00F3               	movwf	___ftpack@exp
  4297  0C08  083F               	movf	___ftmul@sign,w
  4298  0C09  00B7               	movwf	??___ftmul+1
  4299  0C0A  0837               	movf	??___ftmul+1,w
  4300  0C0B  00F4               	movwf	___ftpack@sign
  4301  0C0C  3189  21D2         	fcall	___ftpack
  4302  0C0E  0870               	movf	?___ftpack,w
  4303  0C0F  0020               	movlb	0	; select bank0
  4304  0C10  00B0               	movwf	?___ftmul
  4305  0C11  0871               	movf	?___ftpack+1,w
  4306  0C12  00B1               	movwf	?___ftmul+1
  4307  0C13  0872               	movf	?___ftpack+2,w
  4308  0C14  00B2               	movwf	?___ftmul+2
  4309  0C15  0008               	return
  4310  0C16                     __end_of___ftmul:	
  4311                           
  4312                           	psect	text9
  4313  08E5                     __ptext9:	
  4314 ;; *************** function ___awmod *****************
  4315 ;; Defined at:
  4316 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  divisor         2    0[COMMON] int 
  4319 ;;  dividend        2    2[COMMON] int 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  sign            1    6[COMMON] unsigned char 
  4322 ;;  counter         1    5[COMMON] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  2    0[COMMON] int 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4332 ;;      Params:         4       0       0       0       0       0       0       0
  4333 ;;      Locals:         2       0       0       0       0       0       0       0
  4334 ;;      Temps:          1       0       0       0       0       0       0       0
  4335 ;;      Totals:         7       0       0       0       0       0       0       0
  4336 ;;Total ram usage:        7 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_fround
  4342 ;;		_scale
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           
  4347                           ;psect for function ___awmod
  4348  08E5                     ___awmod:	
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4352  08E5  01F6               	clrf	___awmod@sign
  4353  08E6  1FF3               	btfss	___awmod@dividend+1,7
  4354  08E7  28EF               	goto	l1695
  4355  08E8  09F2               	comf	___awmod@dividend,f
  4356  08E9  09F3               	comf	___awmod@dividend+1,f
  4357  08EA  0AF2               	incf	___awmod@dividend,f
  4358  08EB  1903               	skipnz
  4359  08EC  0AF3               	incf	___awmod@dividend+1,f
  4360  08ED  01F6               	clrf	___awmod@sign
  4361  08EE  0AF6               	incf	___awmod@sign,f
  4362  08EF                     l1695:	
  4363  08EF  1FF1               	btfss	___awmod@divisor+1,7
  4364  08F0  28F6               	goto	l1699
  4365  08F1  09F0               	comf	___awmod@divisor,f
  4366  08F2  09F1               	comf	___awmod@divisor+1,f
  4367  08F3  0AF0               	incf	___awmod@divisor,f
  4368  08F4  1903               	skipnz
  4369  08F5  0AF1               	incf	___awmod@divisor+1,f
  4370  08F6                     l1699:	
  4371  08F6  0871               	movf	___awmod@divisor+1,w
  4372  08F7  0470               	iorwf	___awmod@divisor,w
  4373  08F8  1903               	skipnz
  4374  08F9  291D               	goto	l1717
  4375  08FA  01F5               	clrf	___awmod@counter
  4376  08FB  0AF5               	incf	___awmod@counter,f
  4377  08FC                     l1707:	
  4378  08FC  1BF1               	btfsc	___awmod@divisor+1,7
  4379  08FD  2908               	goto	l1709
  4380  08FE  3001               	movlw	1
  4381  08FF                     u2015:	
  4382  08FF  35F0               	lslf	___awmod@divisor,f
  4383  0900  0DF1               	rlf	___awmod@divisor+1,f
  4384  0901  0B89               	decfsz	9,f
  4385  0902  28FF               	goto	u2015
  4386  0903  3001               	movlw	1
  4387  0904  00F4               	movwf	??___awmod
  4388  0905  0874               	movf	??___awmod,w
  4389  0906  07F5               	addwf	___awmod@counter,f
  4390  0907  28FC               	goto	l1707
  4391  0908                     l1709:	
  4392  0908  0871               	movf	___awmod@divisor+1,w
  4393  0909  0273               	subwf	___awmod@dividend+1,w
  4394  090A  1D03               	skipz
  4395  090B  290E               	goto	u2035
  4396  090C  0870               	movf	___awmod@divisor,w
  4397  090D  0272               	subwf	___awmod@dividend,w
  4398  090E                     u2035:	
  4399  090E  1C03               	skipc
  4400  090F  2914               	goto	l1713
  4401  0910  0870               	movf	___awmod@divisor,w
  4402  0911  02F2               	subwf	___awmod@dividend,f
  4403  0912  0871               	movf	___awmod@divisor+1,w
  4404  0913  3BF3               	subwfb	___awmod@dividend+1,f
  4405  0914                     l1713:	
  4406  0914  3001               	movlw	1
  4407  0915                     u2045:	
  4408  0915  36F1               	lsrf	___awmod@divisor+1,f
  4409  0916  0CF0               	rrf	___awmod@divisor,f
  4410  0917  0B89               	decfsz	9,f
  4411  0918  2915               	goto	u2045
  4412  0919  3001               	movlw	1
  4413  091A  02F5               	subwf	___awmod@counter,f
  4414  091B  1D03               	btfss	3,2
  4415  091C  2908               	goto	l1709
  4416  091D                     l1717:	
  4417  091D  0876               	movf	___awmod@sign,w
  4418  091E  1903               	btfsc	3,2
  4419  091F  2925               	goto	l1721
  4420  0920  09F2               	comf	___awmod@dividend,f
  4421  0921  09F3               	comf	___awmod@dividend+1,f
  4422  0922  0AF2               	incf	___awmod@dividend,f
  4423  0923  1903               	skipnz
  4424  0924  0AF3               	incf	___awmod@dividend+1,f
  4425  0925                     l1721:	
  4426  0925  0873               	movf	___awmod@dividend+1,w
  4427  0926  01F1               	clrf	?___awmod+1
  4428  0927  07F1               	addwf	?___awmod+1,f
  4429  0928  0872               	movf	___awmod@dividend,w
  4430  0929  01F0               	clrf	?___awmod
  4431  092A  07F0               	addwf	?___awmod,f
  4432  092B  0008               	return
  4433  092C                     __end_of___awmod:	
  4434                           
  4435                           	psect	text10
  4436  097E                     __ptext10:	
  4437 ;; *************** function ___awdiv *****************
  4438 ;; Defined at:
  4439 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  divisor         2    7[COMMON] int 
  4442 ;;  dividend        2    9[COMMON] int 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;  quotient        2    2[BANK0 ] int 
  4445 ;;  sign            1    1[BANK0 ] unsigned char 
  4446 ;;  counter         1    0[BANK0 ] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  2    7[COMMON] int 
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4456 ;;      Params:         4       0       0       0       0       0       0       0
  4457 ;;      Locals:         0       4       0       0       0       0       0       0
  4458 ;;      Temps:          1       0       0       0       0       0       0       0
  4459 ;;      Totals:         5       4       0       0       0       0       0       0
  4460 ;;Total ram usage:        9 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_fround
  4466 ;;		_scale
  4467 ;;		_sprintf
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           
  4472                           ;psect for function ___awdiv
  4473  097E                     ___awdiv:	
  4474                           
  4475                           ;incstack = 0
  4476                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4477  097E  0020               	movlb	0	; select bank0
  4478  097F  01A1               	clrf	___awdiv@sign
  4479  0980  1FF8               	btfss	___awdiv@divisor+1,7
  4480  0981  2989               	goto	l1651
  4481  0982  09F7               	comf	___awdiv@divisor,f
  4482  0983  09F8               	comf	___awdiv@divisor+1,f
  4483  0984  0AF7               	incf	___awdiv@divisor,f
  4484  0985  1903               	skipnz
  4485  0986  0AF8               	incf	___awdiv@divisor+1,f
  4486  0987  01A1               	clrf	___awdiv@sign
  4487  0988  0AA1               	incf	___awdiv@sign,f
  4488  0989                     l1651:	
  4489  0989  1FFA               	btfss	___awdiv@dividend+1,7
  4490  098A  2994               	goto	l1657
  4491  098B  09F9               	comf	___awdiv@dividend,f
  4492  098C  09FA               	comf	___awdiv@dividend+1,f
  4493  098D  0AF9               	incf	___awdiv@dividend,f
  4494  098E  1903               	skipnz
  4495  098F  0AFA               	incf	___awdiv@dividend+1,f
  4496  0990  3001               	movlw	1
  4497  0991  00FB               	movwf	??___awdiv
  4498  0992  087B               	movf	??___awdiv,w
  4499  0993  06A1               	xorwf	___awdiv@sign,f
  4500  0994                     l1657:	
  4501  0994  01A2               	clrf	___awdiv@quotient
  4502  0995  01A3               	clrf	___awdiv@quotient+1
  4503  0996  0878               	movf	___awdiv@divisor+1,w
  4504  0997  0477               	iorwf	___awdiv@divisor,w
  4505  0998  1903               	skipnz
  4506  0999  29C3               	goto	l1679
  4507  099A  01A0               	clrf	___awdiv@counter
  4508  099B  0AA0               	incf	___awdiv@counter,f
  4509  099C                     l1667:	
  4510  099C  1BF8               	btfsc	___awdiv@divisor+1,7
  4511  099D  29A8               	goto	l1669
  4512  099E  3001               	movlw	1
  4513  099F                     u1915:	
  4514  099F  35F7               	lslf	___awdiv@divisor,f
  4515  09A0  0DF8               	rlf	___awdiv@divisor+1,f
  4516  09A1  0B89               	decfsz	9,f
  4517  09A2  299F               	goto	u1915
  4518  09A3  3001               	movlw	1
  4519  09A4  00FB               	movwf	??___awdiv
  4520  09A5  087B               	movf	??___awdiv,w
  4521  09A6  07A0               	addwf	___awdiv@counter,f
  4522  09A7  299C               	goto	l1667
  4523  09A8                     l1669:	
  4524  09A8  3001               	movlw	1
  4525  09A9                     u1935:	
  4526  09A9  35A2               	lslf	___awdiv@quotient,f
  4527  09AA  0DA3               	rlf	___awdiv@quotient+1,f
  4528  09AB  0B89               	decfsz	9,f
  4529  09AC  29A9               	goto	u1935
  4530  09AD  0878               	movf	___awdiv@divisor+1,w
  4531  09AE  027A               	subwf	___awdiv@dividend+1,w
  4532  09AF  1D03               	skipz
  4533  09B0  29B3               	goto	u1945
  4534  09B1  0877               	movf	___awdiv@divisor,w
  4535  09B2  0279               	subwf	___awdiv@dividend,w
  4536  09B3                     u1945:	
  4537  09B3  1C03               	skipc
  4538  09B4  29BA               	goto	l1675
  4539  09B5  0877               	movf	___awdiv@divisor,w
  4540  09B6  02F9               	subwf	___awdiv@dividend,f
  4541  09B7  0878               	movf	___awdiv@divisor+1,w
  4542  09B8  3BFA               	subwfb	___awdiv@dividend+1,f
  4543  09B9  1422               	bsf	___awdiv@quotient,0
  4544  09BA                     l1675:	
  4545  09BA  3001               	movlw	1
  4546  09BB                     u1955:	
  4547  09BB  36F8               	lsrf	___awdiv@divisor+1,f
  4548  09BC  0CF7               	rrf	___awdiv@divisor,f
  4549  09BD  0B89               	decfsz	9,f
  4550  09BE  29BB               	goto	u1955
  4551  09BF  3001               	movlw	1
  4552  09C0  02A0               	subwf	___awdiv@counter,f
  4553  09C1  1D03               	btfss	3,2
  4554  09C2  29A8               	goto	l1669
  4555  09C3                     l1679:	
  4556  09C3  0821               	movf	___awdiv@sign,w
  4557  09C4  1903               	btfsc	3,2
  4558  09C5  29CB               	goto	l1683
  4559  09C6  09A2               	comf	___awdiv@quotient,f
  4560  09C7  09A3               	comf	___awdiv@quotient+1,f
  4561  09C8  0AA2               	incf	___awdiv@quotient,f
  4562  09C9  1903               	skipnz
  4563  09CA  0AA3               	incf	___awdiv@quotient+1,f
  4564  09CB                     l1683:	
  4565  09CB  0823               	movf	___awdiv@quotient+1,w
  4566  09CC  01F8               	clrf	?___awdiv+1
  4567  09CD  07F8               	addwf	?___awdiv+1,f
  4568  09CE  0822               	movf	___awdiv@quotient,w
  4569  09CF  01F7               	clrf	?___awdiv
  4570  09D0  07F7               	addwf	?___awdiv,f
  4571  09D1  0008               	return
  4572  09D2                     __end_of___awdiv:	
  4573                           
  4574                           	psect	text11
  4575  0C16                     __ptext11:	
  4576 ;; *************** function __tdiv_to_l_ *****************
  4577 ;; Defined at:
  4578 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  f1              3    0[COMMON] float 
  4581 ;;  f2              3    3[COMMON] float 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  quot            4    0[BANK0 ] unsigned long 
  4584 ;;  exp1            1    5[BANK0 ] unsigned char 
  4585 ;;  cntr            1    4[BANK0 ] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  4    0[COMMON] unsigned long 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4595 ;;      Params:         6       0       0       0       0       0       0       0
  4596 ;;      Locals:         0       6       0       0       0       0       0       0
  4597 ;;      Temps:          4       0       0       0       0       0       0       0
  4598 ;;      Totals:        10       6       0       0       0       0       0       0
  4599 ;;Total ram usage:       16 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_sprintf
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           
  4609                           ;psect for function __tdiv_to_l_
  4610  0C16                     __tdiv_to_l_:	
  4611                           
  4612                           ;incstack = 0
  4613                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  4614  0C16  0870               	movf	__tdiv_to_l_@f1,w
  4615  0C17  00F6               	movwf	??__tdiv_to_l_
  4616  0C18  0871               	movf	__tdiv_to_l_@f1+1,w
  4617  0C19  00F7               	movwf	??__tdiv_to_l_+1
  4618  0C1A  0872               	movf	__tdiv_to_l_@f1+2,w
  4619  0C1B  00F8               	movwf	??__tdiv_to_l_+2
  4620  0C1C  1003               	clrc
  4621  0C1D  0D77               	rlf	??__tdiv_to_l_+1,w
  4622  0C1E  0D78               	rlf	??__tdiv_to_l_+2,w
  4623  0C1F  00F9               	movwf	??__tdiv_to_l_+3
  4624  0C20  0879               	movf	??__tdiv_to_l_+3,w
  4625  0C21  0020               	movlb	0	; select bank0
  4626  0C22  00A5               	movwf	__tdiv_to_l_@exp1
  4627  0C23  08A5               	movf	__tdiv_to_l_@exp1,f
  4628  0C24  1D03               	skipz
  4629  0C25  2C2F               	goto	l1927
  4630  0C26  3000               	movlw	0
  4631  0C27  00F3               	movwf	?__tdiv_to_l_+3
  4632  0C28  3000               	movlw	0
  4633  0C29  00F2               	movwf	?__tdiv_to_l_+2
  4634  0C2A  3000               	movlw	0
  4635  0C2B  00F1               	movwf	?__tdiv_to_l_+1
  4636  0C2C  3000               	movlw	0
  4637  0C2D  00F0               	movwf	?__tdiv_to_l_
  4638  0C2E  0008               	return
  4639  0C2F                     l1927:	
  4640  0C2F  0873               	movf	__tdiv_to_l_@f2,w
  4641  0C30  00F6               	movwf	??__tdiv_to_l_
  4642  0C31  0874               	movf	__tdiv_to_l_@f2+1,w
  4643  0C32  00F7               	movwf	??__tdiv_to_l_+1
  4644  0C33  0875               	movf	__tdiv_to_l_@f2+2,w
  4645  0C34  00F8               	movwf	??__tdiv_to_l_+2
  4646  0C35  1003               	clrc
  4647  0C36  0D77               	rlf	??__tdiv_to_l_+1,w
  4648  0C37  0D78               	rlf	??__tdiv_to_l_+2,w
  4649  0C38  00F9               	movwf	??__tdiv_to_l_+3
  4650  0C39  0879               	movf	??__tdiv_to_l_+3,w
  4651  0C3A  00A4               	movwf	__tdiv_to_l_@cntr
  4652  0C3B  08A4               	movf	__tdiv_to_l_@cntr,f
  4653  0C3C  1D03               	skipz
  4654  0C3D  2C47               	goto	l505
  4655  0C3E  3000               	movlw	0
  4656  0C3F  00F3               	movwf	?__tdiv_to_l_+3
  4657  0C40  3000               	movlw	0
  4658  0C41  00F2               	movwf	?__tdiv_to_l_+2
  4659  0C42  3000               	movlw	0
  4660  0C43  00F1               	movwf	?__tdiv_to_l_+1
  4661  0C44  3000               	movlw	0
  4662  0C45  00F0               	movwf	?__tdiv_to_l_
  4663  0C46  0008               	return
  4664  0C47                     l505:	
  4665  0C47  17F1               	bsf	__tdiv_to_l_@f1+1,7
  4666  0C48  30FF               	movlw	255
  4667  0C49  05F0               	andwf	__tdiv_to_l_@f1,f
  4668  0C4A  30FF               	movlw	255
  4669  0C4B  05F1               	andwf	__tdiv_to_l_@f1+1,f
  4670  0C4C  3000               	movlw	0
  4671  0C4D  05F2               	andwf	__tdiv_to_l_@f1+2,f
  4672  0C4E  17F4               	bsf	__tdiv_to_l_@f2+1,7
  4673  0C4F  30FF               	movlw	255
  4674  0C50  05F3               	andwf	__tdiv_to_l_@f2,f
  4675  0C51  30FF               	movlw	255
  4676  0C52  05F4               	andwf	__tdiv_to_l_@f2+1,f
  4677  0C53  3000               	movlw	0
  4678  0C54  05F5               	andwf	__tdiv_to_l_@f2+2,f
  4679  0C55  3000               	movlw	0
  4680  0C56  00A3               	movwf	__tdiv_to_l_@quot+3
  4681  0C57  3000               	movlw	0
  4682  0C58  00A2               	movwf	__tdiv_to_l_@quot+2
  4683  0C59  3000               	movlw	0
  4684  0C5A  00A1               	movwf	__tdiv_to_l_@quot+1
  4685  0C5B  3000               	movlw	0
  4686  0C5C  00A0               	movwf	__tdiv_to_l_@quot
  4687  0C5D  307F               	movlw	127
  4688  0C5E  02A5               	subwf	__tdiv_to_l_@exp1,f
  4689  0C5F  3098               	movlw	152
  4690  0C60  0724               	addwf	__tdiv_to_l_@cntr,w
  4691  0C61  00F6               	movwf	??__tdiv_to_l_
  4692  0C62  0876               	movf	??__tdiv_to_l_,w
  4693  0C63  02A5               	subwf	__tdiv_to_l_@exp1,f
  4694  0C64  3018               	movlw	24
  4695  0C65  00F6               	movwf	??__tdiv_to_l_
  4696  0C66  0876               	movf	??__tdiv_to_l_,w
  4697  0C67  00A4               	movwf	__tdiv_to_l_@cntr
  4698  0C68                     l1941:	
  4699  0C68  3001               	movlw	1
  4700  0C69                     u2525:	
  4701  0C69  35A0               	lslf	__tdiv_to_l_@quot,f
  4702  0C6A  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4703  0C6B  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4704  0C6C  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4705  0C6D  0B89               	decfsz	9,f
  4706  0C6E  2C69               	goto	u2525
  4707  0C6F  0875               	movf	__tdiv_to_l_@f2+2,w
  4708  0C70  0272               	subwf	__tdiv_to_l_@f1+2,w
  4709  0C71  1D03               	skipz
  4710  0C72  2C79               	goto	u2535
  4711  0C73  0874               	movf	__tdiv_to_l_@f2+1,w
  4712  0C74  0271               	subwf	__tdiv_to_l_@f1+1,w
  4713  0C75  1D03               	skipz
  4714  0C76  2C79               	goto	u2535
  4715  0C77  0873               	movf	__tdiv_to_l_@f2,w
  4716  0C78  0270               	subwf	__tdiv_to_l_@f1,w
  4717  0C79                     u2535:	
  4718  0C79  1C03               	skipc
  4719  0C7A  2C82               	goto	l1949
  4720  0C7B  0873               	movf	__tdiv_to_l_@f2,w
  4721  0C7C  02F0               	subwf	__tdiv_to_l_@f1,f
  4722  0C7D  0874               	movf	__tdiv_to_l_@f2+1,w
  4723  0C7E  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  4724  0C7F  0875               	movf	__tdiv_to_l_@f2+2,w
  4725  0C80  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  4726  0C81  1420               	bsf	__tdiv_to_l_@quot,0
  4727  0C82                     l1949:	
  4728  0C82  3001               	movlw	1
  4729  0C83                     u2545:	
  4730  0C83  35F0               	lslf	__tdiv_to_l_@f1,f
  4731  0C84  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  4732  0C85  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  4733  0C86  0B89               	decfsz	9,f
  4734  0C87  2C83               	goto	u2545
  4735  0C88  3001               	movlw	1
  4736  0C89  02A4               	subwf	__tdiv_to_l_@cntr,f
  4737  0C8A  1D03               	btfss	3,2
  4738  0C8B  2C68               	goto	l1941
  4739  0C8C  1FA5               	btfss	__tdiv_to_l_@exp1,7
  4740  0C8D  2CAA               	goto	l1961
  4741  0C8E  0825               	movf	__tdiv_to_l_@exp1,w
  4742  0C8F  3A80               	xorlw	128
  4743  0C90  3E97               	addlw	151
  4744  0C91  1803               	skipnc
  4745  0C92  2C9C               	goto	l1959
  4746  0C93  3000               	movlw	0
  4747  0C94  00F3               	movwf	?__tdiv_to_l_+3
  4748  0C95  3000               	movlw	0
  4749  0C96  00F2               	movwf	?__tdiv_to_l_+2
  4750  0C97  3000               	movlw	0
  4751  0C98  00F1               	movwf	?__tdiv_to_l_+1
  4752  0C99  3000               	movlw	0
  4753  0C9A  00F0               	movwf	?__tdiv_to_l_
  4754  0C9B  0008               	return
  4755  0C9C                     l1959:	
  4756  0C9C  3001               	movlw	1
  4757  0C9D                     u2585:	
  4758  0C9D  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  4759  0C9E  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  4760  0C9F  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  4761  0CA0  0CA0               	rrf	__tdiv_to_l_@quot,f
  4762  0CA1  0B89               	decfsz	9,f
  4763  0CA2  2C9D               	goto	u2585
  4764  0CA3  3001               	movlw	1
  4765  0CA4  00F6               	movwf	??__tdiv_to_l_
  4766  0CA5  0876               	movf	??__tdiv_to_l_,w
  4767  0CA6  07A5               	addwf	__tdiv_to_l_@exp1,f
  4768  0CA7  1903               	btfsc	3,2
  4769  0CA8  2CC3               	goto	l1971
  4770  0CA9  2C9C               	goto	l1959
  4771  0CAA                     l1961:	
  4772  0CAA  3018               	movlw	24
  4773  0CAB  0225               	subwf	__tdiv_to_l_@exp1,w
  4774  0CAC  1C03               	skipc
  4775  0CAD  2CC0               	goto	l1969
  4776  0CAE  3000               	movlw	0
  4777  0CAF  00F3               	movwf	?__tdiv_to_l_+3
  4778  0CB0  3000               	movlw	0
  4779  0CB1  00F2               	movwf	?__tdiv_to_l_+2
  4780  0CB2  3000               	movlw	0
  4781  0CB3  00F1               	movwf	?__tdiv_to_l_+1
  4782  0CB4  3000               	movlw	0
  4783  0CB5  00F0               	movwf	?__tdiv_to_l_
  4784  0CB6  0008               	return
  4785  0CB7                     l1967:	
  4786  0CB7  3001               	movlw	1
  4787  0CB8                     u2615:	
  4788  0CB8  35A0               	lslf	__tdiv_to_l_@quot,f
  4789  0CB9  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4790  0CBA  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4791  0CBB  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4792  0CBC  0B89               	decfsz	9,f
  4793  0CBD  2CB8               	goto	u2615
  4794  0CBE  3001               	movlw	1
  4795  0CBF  02A5               	subwf	__tdiv_to_l_@exp1,f
  4796  0CC0                     l1969:	
  4797  0CC0  08A5               	movf	__tdiv_to_l_@exp1,f
  4798  0CC1  1D03               	skipz
  4799  0CC2  2CB7               	goto	l1967
  4800  0CC3                     l1971:	
  4801  0CC3  0823               	movf	__tdiv_to_l_@quot+3,w
  4802  0CC4  00F3               	movwf	?__tdiv_to_l_+3
  4803  0CC5  0822               	movf	__tdiv_to_l_@quot+2,w
  4804  0CC6  00F2               	movwf	?__tdiv_to_l_+2
  4805  0CC7  0821               	movf	__tdiv_to_l_@quot+1,w
  4806  0CC8  00F1               	movwf	?__tdiv_to_l_+1
  4807  0CC9  0820               	movf	__tdiv_to_l_@quot,w
  4808  0CCA  00F0               	movwf	?__tdiv_to_l_
  4809  0CCB  0008               	return
  4810  0CCC                     __end_of__tdiv_to_l_:	
  4811                           
  4812                           	psect	text12
  4813  0024                     __ptext12:	
  4814 ;; *************** function __div_to_l_ *****************
  4815 ;; Defined at:
  4816 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  f1              3    0[COMMON] unsigned long 
  4819 ;;  f2              3    3[COMMON] unsigned long 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  quot            4    0[BANK0 ] unsigned long 
  4822 ;;  exp1            1    5[BANK0 ] unsigned char 
  4823 ;;  cntr            1    4[BANK0 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  4    0[COMMON] unsigned long 
  4826 ;; Registers used:
  4827 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4833 ;;      Params:         6       0       0       0       0       0       0       0
  4834 ;;      Locals:         0       6       0       0       0       0       0       0
  4835 ;;      Temps:          8       0       0       0       0       0       0       0
  4836 ;;      Totals:        14       6       0       0       0       0       0       0
  4837 ;;Total ram usage:       20 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_sprintf
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           
  4847                           ;psect for function __div_to_l_
  4848  0024                     __div_to_l_:	
  4849                           
  4850                           ;incstack = 0
  4851                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  4852  0024  3070               	movlw	low __div_to_l_@f1
  4853  0025  0086               	movwf	6
  4854  0026  0187               	clrf	7
  4855  0027  3F40               	moviw [0]fsr1
  4856  0028  00F6               	movwf	??__div_to_l_
  4857  0029  3F41               	moviw [1]fsr1
  4858  002A  00F7               	movwf	??__div_to_l_+1
  4859  002B  3F42               	moviw [2]fsr1
  4860  002C  00F8               	movwf	??__div_to_l_+2
  4861  002D  3F43               	moviw [3]fsr1
  4862  002E  00F9               	movwf	??__div_to_l_+3
  4863  002F  1003               	clrc
  4864  0030  0D78               	rlf	??__div_to_l_+2,w
  4865  0031  0D79               	rlf	??__div_to_l_+3,w
  4866  0032  00FA               	movwf	??__div_to_l_+4
  4867  0033  087A               	movf	??__div_to_l_+4,w
  4868  0034  0020               	movlb	0	; select bank0
  4869  0035  00A5               	movwf	__div_to_l_@exp1
  4870  0036  08A5               	movf	__div_to_l_@exp1,f
  4871  0037  1D03               	skipz
  4872  0038  2842               	goto	l1981
  4873  0039  3000               	movlw	0
  4874  003A  00F3               	movwf	?__div_to_l_+3
  4875  003B  3000               	movlw	0
  4876  003C  00F2               	movwf	?__div_to_l_+2
  4877  003D  3000               	movlw	0
  4878  003E  00F1               	movwf	?__div_to_l_+1
  4879  003F  3000               	movlw	0
  4880  0040  00F0               	movwf	?__div_to_l_
  4881  0041  0008               	return
  4882  0042                     l1981:	
  4883  0042  3073               	movlw	low __div_to_l_@f2
  4884  0043  0086               	movwf	6
  4885  0044  0187               	clrf	7
  4886  0045  3F40               	moviw [0]fsr1
  4887  0046  00F6               	movwf	??__div_to_l_
  4888  0047  3F41               	moviw [1]fsr1
  4889  0048  00F7               	movwf	??__div_to_l_+1
  4890  0049  3F42               	moviw [2]fsr1
  4891  004A  00F8               	movwf	??__div_to_l_+2
  4892  004B  3F43               	moviw [3]fsr1
  4893  004C  00F9               	movwf	??__div_to_l_+3
  4894  004D  1003               	clrc
  4895  004E  0D78               	rlf	??__div_to_l_+2,w
  4896  004F  0D79               	rlf	??__div_to_l_+3,w
  4897  0050  00FA               	movwf	??__div_to_l_+4
  4898  0051  087A               	movf	??__div_to_l_+4,w
  4899  0052  00A4               	movwf	__div_to_l_@cntr
  4900  0053  08A4               	movf	__div_to_l_@cntr,f
  4901  0054  1D03               	skipz
  4902  0055  285F               	goto	l1987
  4903  0056  3000               	movlw	0
  4904  0057  00F3               	movwf	?__div_to_l_+3
  4905  0058  3000               	movlw	0
  4906  0059  00F2               	movwf	?__div_to_l_+2
  4907  005A  3000               	movlw	0
  4908  005B  00F1               	movwf	?__div_to_l_+1
  4909  005C  3000               	movlw	0
  4910  005D  00F0               	movwf	?__div_to_l_
  4911  005E  0008               	return
  4912  005F                     l1987:	
  4913  005F  3070               	movlw	low __div_to_l_@f1
  4914  0060  0086               	movwf	6
  4915  0061  0187               	clrf	7
  4916  0062  3000               	movlw	0
  4917  0063  0481               	iorwf	1,f
  4918  0064  3141               	addfsr 1,1
  4919  0065  3000               	movlw	0
  4920  0066  0481               	iorwf	1,f
  4921  0067  3141               	addfsr 1,1
  4922  0068  3080               	movlw	128
  4923  0069  0481               	iorwf	1,f
  4924  006A  3141               	addfsr 1,1
  4925  006B  3000               	movlw	0
  4926  006C  0481               	iorwf	1,f
  4927  006D  3070               	movlw	low __div_to_l_@f1
  4928  006E  0086               	movwf	6
  4929  006F  0187               	clrf	7
  4930  0070  30FF               	movlw	255
  4931  0071  0581               	andwf	1,f
  4932  0072  3141               	addfsr 1,1
  4933  0073  30FF               	movlw	255
  4934  0074  0581               	andwf	1,f
  4935  0075  3141               	addfsr 1,1
  4936  0076  30FF               	movlw	255
  4937  0077  0581               	andwf	1,f
  4938  0078  3141               	addfsr 1,1
  4939  0079  3000               	movlw	0
  4940  007A  0581               	andwf	1,f
  4941  007B  3073               	movlw	low __div_to_l_@f2
  4942  007C  0086               	movwf	6
  4943  007D  0187               	clrf	7
  4944  007E  3000               	movlw	0
  4945  007F  0481               	iorwf	1,f
  4946  0080  3141               	addfsr 1,1
  4947  0081  3000               	movlw	0
  4948  0082  0481               	iorwf	1,f
  4949  0083  3141               	addfsr 1,1
  4950  0084  3080               	movlw	128
  4951  0085  0481               	iorwf	1,f
  4952  0086  3141               	addfsr 1,1
  4953  0087  3000               	movlw	0
  4954  0088  0481               	iorwf	1,f
  4955  0089  3073               	movlw	low __div_to_l_@f2
  4956  008A  0086               	movwf	6
  4957  008B  0187               	clrf	7
  4958  008C  30FF               	movlw	255
  4959  008D  0581               	andwf	1,f
  4960  008E  3141               	addfsr 1,1
  4961  008F  30FF               	movlw	255
  4962  0090  0581               	andwf	1,f
  4963  0091  3141               	addfsr 1,1
  4964  0092  30FF               	movlw	255
  4965  0093  0581               	andwf	1,f
  4966  0094  3141               	addfsr 1,1
  4967  0095  3000               	movlw	0
  4968  0096  0581               	andwf	1,f
  4969  0097  3000               	movlw	0
  4970  0098  00A3               	movwf	__div_to_l_@quot+3
  4971  0099  3000               	movlw	0
  4972  009A  00A2               	movwf	__div_to_l_@quot+2
  4973  009B  3000               	movlw	0
  4974  009C  00A1               	movwf	__div_to_l_@quot+1
  4975  009D  3000               	movlw	0
  4976  009E  00A0               	movwf	__div_to_l_@quot
  4977  009F  307F               	movlw	127
  4978  00A0  02A5               	subwf	__div_to_l_@exp1,f
  4979  00A1  30A0               	movlw	160
  4980  00A2  0724               	addwf	__div_to_l_@cntr,w
  4981  00A3  00F6               	movwf	??__div_to_l_
  4982  00A4  0876               	movf	??__div_to_l_,w
  4983  00A5  02A5               	subwf	__div_to_l_@exp1,f
  4984  00A6  3020               	movlw	32
  4985  00A7  00F6               	movwf	??__div_to_l_
  4986  00A8  0876               	movf	??__div_to_l_,w
  4987  00A9  00A4               	movwf	__div_to_l_@cntr
  4988  00AA                     l1997:	
  4989  00AA  3001               	movlw	1
  4990  00AB                     u2655:	
  4991  00AB  35A0               	lslf	__div_to_l_@quot,f
  4992  00AC  0DA1               	rlf	__div_to_l_@quot+1,f
  4993  00AD  0DA2               	rlf	__div_to_l_@quot+2,f
  4994  00AE  0DA3               	rlf	__div_to_l_@quot+3,f
  4995  00AF  0B89               	decfsz	9,f
  4996  00B0  28AB               	goto	u2655
  4997  00B1  3073               	movlw	low __div_to_l_@f2
  4998  00B2  0086               	movwf	6
  4999  00B3  0187               	clrf	7
  5000  00B4  3F40               	moviw [0]fsr1
  5001  00B5  00F6               	movwf	??__div_to_l_
  5002  00B6  3F41               	moviw [1]fsr1
  5003  00B7  00F7               	movwf	??__div_to_l_+1
  5004  00B8  3F42               	moviw [2]fsr1
  5005  00B9  00F8               	movwf	??__div_to_l_+2
  5006  00BA  3F43               	moviw [3]fsr1
  5007  00BB  00F9               	movwf	??__div_to_l_+3
  5008  00BC  3070               	movlw	low __div_to_l_@f1
  5009  00BD  0086               	movwf	6
  5010  00BE  0187               	clrf	7
  5011  00BF  3F40               	moviw [0]fsr1
  5012  00C0  00FA               	movwf	??__div_to_l_+4
  5013  00C1  3F41               	moviw [1]fsr1
  5014  00C2  00FB               	movwf	??__div_to_l_+5
  5015  00C3  3F42               	moviw [2]fsr1
  5016  00C4  00FC               	movwf	??__div_to_l_+6
  5017  00C5  3F43               	moviw [3]fsr1
  5018  00C6  00FD               	movwf	??__div_to_l_+7
  5019  00C7  0879               	movf	??__div_to_l_+3,w
  5020  00C8  027D               	subwf	??__div_to_l_+7,w
  5021  00C9  1D03               	skipz
  5022  00CA  28D5               	goto	u2665
  5023  00CB  0878               	movf	??__div_to_l_+2,w
  5024  00CC  027C               	subwf	??__div_to_l_+6,w
  5025  00CD  1D03               	skipz
  5026  00CE  28D5               	goto	u2665
  5027  00CF  0877               	movf	??__div_to_l_+1,w
  5028  00D0  027B               	subwf	??__div_to_l_+5,w
  5029  00D1  1D03               	skipz
  5030  00D2  28D5               	goto	u2665
  5031  00D3  0876               	movf	??__div_to_l_,w
  5032  00D4  027A               	subwf	??__div_to_l_+4,w
  5033  00D5                     u2665:	
  5034  00D5  1C03               	skipc
  5035  00D6  28F2               	goto	l2005
  5036  00D7  3073               	movlw	low __div_to_l_@f2
  5037  00D8  0086               	movwf	6
  5038  00D9  0187               	clrf	7
  5039  00DA  3F40               	moviw [0]fsr1
  5040  00DB  00F6               	movwf	??__div_to_l_
  5041  00DC  3F41               	moviw [1]fsr1
  5042  00DD  00F7               	movwf	??__div_to_l_+1
  5043  00DE  3F42               	moviw [2]fsr1
  5044  00DF  00F8               	movwf	??__div_to_l_+2
  5045  00E0  3F43               	moviw [3]fsr1
  5046  00E1  00F9               	movwf	??__div_to_l_+3
  5047  00E2  3070               	movlw	low __div_to_l_@f1
  5048  00E3  0086               	movwf	6
  5049  00E4  0187               	clrf	7
  5050  00E5  0876               	movf	??__div_to_l_,w
  5051  00E6  0281               	subwf	1,f
  5052  00E7  3141               	addfsr 1,1
  5053  00E8  0877               	movf	??__div_to_l_+1,w
  5054  00E9  3B81               	subwfb	1,f
  5055  00EA  3141               	addfsr 1,1
  5056  00EB  0878               	movf	??__div_to_l_+2,w
  5057  00EC  3B81               	subwfb	1,f
  5058  00ED  3141               	addfsr 1,1
  5059  00EE  0879               	movf	??__div_to_l_+3,w
  5060  00EF  3B81               	subwfb	1,f
  5061  00F0  317D               	addfsr 1,-3
  5062  00F1  1420               	bsf	__div_to_l_@quot,0
  5063  00F2                     l2005:	
  5064  00F2  3070               	movlw	low __div_to_l_@f1
  5065  00F3  0086               	movwf	6
  5066  00F4  0187               	clrf	7
  5067  00F5  3581               	lslf	1,f
  5068  00F6  3141               	addfsr 1,1
  5069  00F7  0D81               	rlf	1,f
  5070  00F8  3141               	addfsr 1,1
  5071  00F9  0D81               	rlf	1,f
  5072  00FA  3141               	addfsr 1,1
  5073  00FB  0D81               	rlf	1,f
  5074  00FC  317D               	addfsr 1,-3
  5075  00FD  3001               	movlw	1
  5076  00FE  02A4               	subwf	__div_to_l_@cntr,f
  5077  00FF  1D03               	btfss	3,2
  5078  0100  28AA               	goto	l1997
  5079  0101  1FA5               	btfss	__div_to_l_@exp1,7
  5080  0102  291F               	goto	l2017
  5081  0103  0825               	movf	__div_to_l_@exp1,w
  5082  0104  3A80               	xorlw	128
  5083  0105  3E9F               	addlw	159
  5084  0106  1803               	skipnc
  5085  0107  2911               	goto	l2015
  5086  0108  3000               	movlw	0
  5087  0109  00F3               	movwf	?__div_to_l_+3
  5088  010A  3000               	movlw	0
  5089  010B  00F2               	movwf	?__div_to_l_+2
  5090  010C  3000               	movlw	0
  5091  010D  00F1               	movwf	?__div_to_l_+1
  5092  010E  3000               	movlw	0
  5093  010F  00F0               	movwf	?__div_to_l_
  5094  0110  0008               	return
  5095  0111                     l2015:	
  5096  0111  3001               	movlw	1
  5097  0112                     u2705:	
  5098  0112  36A3               	lsrf	__div_to_l_@quot+3,f
  5099  0113  0CA2               	rrf	__div_to_l_@quot+2,f
  5100  0114  0CA1               	rrf	__div_to_l_@quot+1,f
  5101  0115  0CA0               	rrf	__div_to_l_@quot,f
  5102  0116  0B89               	decfsz	9,f
  5103  0117  2912               	goto	u2705
  5104  0118  3001               	movlw	1
  5105  0119  00F6               	movwf	??__div_to_l_
  5106  011A  0876               	movf	??__div_to_l_,w
  5107  011B  07A5               	addwf	__div_to_l_@exp1,f
  5108  011C  1903               	btfsc	3,2
  5109  011D  2938               	goto	l2027
  5110  011E  2911               	goto	l2015
  5111  011F                     l2017:	
  5112  011F  3020               	movlw	32
  5113  0120  0225               	subwf	__div_to_l_@exp1,w
  5114  0121  1C03               	skipc
  5115  0122  2935               	goto	l2025
  5116  0123  3000               	movlw	0
  5117  0124  00F3               	movwf	?__div_to_l_+3
  5118  0125  3000               	movlw	0
  5119  0126  00F2               	movwf	?__div_to_l_+2
  5120  0127  3000               	movlw	0
  5121  0128  00F1               	movwf	?__div_to_l_+1
  5122  0129  3000               	movlw	0
  5123  012A  00F0               	movwf	?__div_to_l_
  5124  012B  0008               	return
  5125  012C                     l2023:	
  5126  012C  3001               	movlw	1
  5127  012D                     u2735:	
  5128  012D  35A0               	lslf	__div_to_l_@quot,f
  5129  012E  0DA1               	rlf	__div_to_l_@quot+1,f
  5130  012F  0DA2               	rlf	__div_to_l_@quot+2,f
  5131  0130  0DA3               	rlf	__div_to_l_@quot+3,f
  5132  0131  0B89               	decfsz	9,f
  5133  0132  292D               	goto	u2735
  5134  0133  3001               	movlw	1
  5135  0134  02A5               	subwf	__div_to_l_@exp1,f
  5136  0135                     l2025:	
  5137  0135  08A5               	movf	__div_to_l_@exp1,f
  5138  0136  1D03               	skipz
  5139  0137  292C               	goto	l2023
  5140  0138                     l2027:	
  5141  0138  0823               	movf	__div_to_l_@quot+3,w
  5142  0139  00F3               	movwf	?__div_to_l_+3
  5143  013A  0822               	movf	__div_to_l_@quot+2,w
  5144  013B  00F2               	movwf	?__div_to_l_+2
  5145  013C  0821               	movf	__div_to_l_@quot+1,w
  5146  013D  00F1               	movwf	?__div_to_l_+1
  5147  013E  0820               	movf	__div_to_l_@quot,w
  5148  013F  00F0               	movwf	?__div_to_l_
  5149  0140  0008               	return
  5150  0141                     __end_of__div_to_l_:	
  5151                           
  5152                           	psect	text13
  5153  0801                     __ptext13:	
  5154 ;; *************** function ___lltoft *****************
  5155 ;; Defined at:
  5156 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  c               4    8[COMMON] unsigned long 
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;  exp             1   13[COMMON] unsigned char 
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  3    8[COMMON] float 
  5163 ;; Registers used:
  5164 ;;		wreg, status,2, status,0, pclath, cstack
  5165 ;; Tracked objects:
  5166 ;;		On entry : 0/0
  5167 ;;		On exit  : 0/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5170 ;;      Params:         4       0       0       0       0       0       0       0
  5171 ;;      Locals:         1       0       0       0       0       0       0       0
  5172 ;;      Temps:          1       0       0       0       0       0       0       0
  5173 ;;      Totals:         6       0       0       0       0       0       0       0
  5174 ;;Total ram usage:        6 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    1
  5177 ;; This function calls:
  5178 ;;		___ftpack
  5179 ;; This function is called by:
  5180 ;;		_sprintf
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           
  5185                           ;psect for function ___lltoft
  5186  0801                     ___lltoft:	
  5187                           
  5188                           ;incstack = 0
  5189                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5190  0801  308E               	movlw	142
  5191  0802  00FC               	movwf	??___lltoft
  5192  0803  087C               	movf	??___lltoft,w
  5193  0804  00FD               	movwf	___lltoft@exp
  5194  0805                     l2157:	
  5195  0805  30FF               	movlw	255
  5196  0806  057B               	andwf	___lltoft@c+3,w
  5197  0807  1903               	btfsc	3,2
  5198  0808  2815               	goto	l2159
  5199  0809  3001               	movlw	1
  5200  080A                     u3025:	
  5201  080A  36FB               	lsrf	___lltoft@c+3,f
  5202  080B  0CFA               	rrf	___lltoft@c+2,f
  5203  080C  0CF9               	rrf	___lltoft@c+1,f
  5204  080D  0CF8               	rrf	___lltoft@c,f
  5205  080E  0B89               	decfsz	9,f
  5206  080F  280A               	goto	u3025
  5207  0810  3001               	movlw	1
  5208  0811  00FC               	movwf	??___lltoft
  5209  0812  087C               	movf	??___lltoft,w
  5210  0813  07FD               	addwf	___lltoft@exp,f
  5211  0814  2805               	goto	l2157
  5212  0815                     l2159:	
  5213  0815  0878               	movf	___lltoft@c,w
  5214  0816  00F0               	movwf	___ftpack@arg
  5215  0817  0879               	movf	___lltoft@c+1,w
  5216  0818  00F1               	movwf	___ftpack@arg+1
  5217  0819  087A               	movf	___lltoft@c+2,w
  5218  081A  00F2               	movwf	___ftpack@arg+2
  5219  081B  087D               	movf	___lltoft@exp,w
  5220  081C  00FC               	movwf	??___lltoft
  5221  081D  087C               	movf	??___lltoft,w
  5222  081E  00F3               	movwf	___ftpack@exp
  5223  081F  01F4               	clrf	___ftpack@sign
  5224  0820  3189  21D2         	fcall	___ftpack
  5225  0822  0870               	movf	?___ftpack,w
  5226  0823  00F8               	movwf	?___lltoft
  5227  0824  0871               	movf	?___ftpack+1,w
  5228  0825  00F9               	movwf	?___lltoft+1
  5229  0826  0872               	movf	?___ftpack+2,w
  5230  0827  00FA               	movwf	?___lltoft+2
  5231  0828  0008               	return
  5232  0829                     __end_of___lltoft:	
  5233                           
  5234                           	psect	text14
  5235  08A3                     __ptext14:	
  5236 ;; *************** function ___llmod *****************
  5237 ;; Defined at:
  5238 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  divisor         4    0[COMMON] unsigned long 
  5241 ;;  dividend        4    4[COMMON] unsigned long 
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;  counter         1    9[COMMON] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  4    0[COMMON] unsigned long 
  5246 ;; Registers used:
  5247 ;;		wreg, status,2, status,0
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5253 ;;      Params:         8       0       0       0       0       0       0       0
  5254 ;;      Locals:         1       0       0       0       0       0       0       0
  5255 ;;      Temps:          1       0       0       0       0       0       0       0
  5256 ;;      Totals:        10       0       0       0       0       0       0       0
  5257 ;;Total ram usage:       10 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; This function calls:
  5260 ;;		Nothing
  5261 ;; This function is called by:
  5262 ;;		_sprintf
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           
  5267                           ;psect for function ___llmod
  5268  08A3                     ___llmod:	
  5269                           
  5270                           ;incstack = 0
  5271                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5272  08A3  0873               	movf	___llmod@divisor+3,w
  5273  08A4  0472               	iorwf	___llmod@divisor+2,w
  5274  08A5  0471               	iorwf	___llmod@divisor+1,w
  5275  08A6  0470               	iorwf	___llmod@divisor,w
  5276  08A7  1903               	skipnz
  5277  08A8  28DC               	goto	l2149
  5278  08A9  01F9               	clrf	___llmod@counter
  5279  08AA  0AF9               	incf	___llmod@counter,f
  5280  08AB                     l2139:	
  5281  08AB  1BF3               	btfsc	___llmod@divisor+3,7
  5282  08AC  28B9               	goto	l2141
  5283  08AD  3001               	movlw	1
  5284  08AE                     u2975:	
  5285  08AE  35F0               	lslf	___llmod@divisor,f
  5286  08AF  0DF1               	rlf	___llmod@divisor+1,f
  5287  08B0  0DF2               	rlf	___llmod@divisor+2,f
  5288  08B1  0DF3               	rlf	___llmod@divisor+3,f
  5289  08B2  0B89               	decfsz	9,f
  5290  08B3  28AE               	goto	u2975
  5291  08B4  3001               	movlw	1
  5292  08B5  00F8               	movwf	??___llmod
  5293  08B6  0878               	movf	??___llmod,w
  5294  08B7  07F9               	addwf	___llmod@counter,f
  5295  08B8  28AB               	goto	l2139
  5296  08B9                     l2141:	
  5297  08B9  0873               	movf	___llmod@divisor+3,w
  5298  08BA  0277               	subwf	___llmod@dividend+3,w
  5299  08BB  1D03               	skipz
  5300  08BC  28C7               	goto	u2995
  5301  08BD  0872               	movf	___llmod@divisor+2,w
  5302  08BE  0276               	subwf	___llmod@dividend+2,w
  5303  08BF  1D03               	skipz
  5304  08C0  28C7               	goto	u2995
  5305  08C1  0871               	movf	___llmod@divisor+1,w
  5306  08C2  0275               	subwf	___llmod@dividend+1,w
  5307  08C3  1D03               	skipz
  5308  08C4  28C7               	goto	u2995
  5309  08C5  0870               	movf	___llmod@divisor,w
  5310  08C6  0274               	subwf	___llmod@dividend,w
  5311  08C7                     u2995:	
  5312  08C7  1C03               	skipc
  5313  08C8  28D1               	goto	l2145
  5314  08C9  0870               	movf	___llmod@divisor,w
  5315  08CA  02F4               	subwf	___llmod@dividend,f
  5316  08CB  0871               	movf	___llmod@divisor+1,w
  5317  08CC  3BF5               	subwfb	___llmod@dividend+1,f
  5318  08CD  0872               	movf	___llmod@divisor+2,w
  5319  08CE  3BF6               	subwfb	___llmod@dividend+2,f
  5320  08CF  0873               	movf	___llmod@divisor+3,w
  5321  08D0  3BF7               	subwfb	___llmod@dividend+3,f
  5322  08D1                     l2145:	
  5323  08D1  3001               	movlw	1
  5324  08D2                     u3005:	
  5325  08D2  36F3               	lsrf	___llmod@divisor+3,f
  5326  08D3  0CF2               	rrf	___llmod@divisor+2,f
  5327  08D4  0CF1               	rrf	___llmod@divisor+1,f
  5328  08D5  0CF0               	rrf	___llmod@divisor,f
  5329  08D6  0B89               	decfsz	9,f
  5330  08D7  28D2               	goto	u3005
  5331  08D8  3001               	movlw	1
  5332  08D9  02F9               	subwf	___llmod@counter,f
  5333  08DA  1D03               	btfss	3,2
  5334  08DB  28B9               	goto	l2141
  5335  08DC                     l2149:	
  5336  08DC  0877               	movf	___llmod@dividend+3,w
  5337  08DD  00F3               	movwf	?___llmod+3
  5338  08DE  0876               	movf	___llmod@dividend+2,w
  5339  08DF  00F2               	movwf	?___llmod+2
  5340  08E0  0875               	movf	___llmod@dividend+1,w
  5341  08E1  00F1               	movwf	?___llmod+1
  5342  08E2  0874               	movf	___llmod@dividend,w
  5343  08E3  00F0               	movwf	?___llmod
  5344  08E4  0008               	return
  5345  08E5                     __end_of___llmod:	
  5346                           
  5347                           	psect	text15
  5348  092C                     __ptext15:	
  5349 ;; *************** function ___lldiv *****************
  5350 ;; Defined at:
  5351 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;  divisor         4    0[COMMON] unsigned long 
  5354 ;;  dividend        4    4[COMMON] unsigned long 
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;  quotient        4    9[COMMON] unsigned long 
  5357 ;;  counter         1   13[COMMON] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  4    0[COMMON] unsigned long 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2, status,0
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5367 ;;      Params:         8       0       0       0       0       0       0       0
  5368 ;;      Locals:         5       0       0       0       0       0       0       0
  5369 ;;      Temps:          1       0       0       0       0       0       0       0
  5370 ;;      Totals:        14       0       0       0       0       0       0       0
  5371 ;;Total ram usage:       14 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; This function calls:
  5374 ;;		Nothing
  5375 ;; This function is called by:
  5376 ;;		_sprintf
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function ___lldiv
  5382  092C                     ___lldiv:	
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5386  092C  3000               	movlw	0
  5387  092D  00FC               	movwf	___lldiv@quotient+3
  5388  092E  3000               	movlw	0
  5389  092F  00FB               	movwf	___lldiv@quotient+2
  5390  0930  3000               	movlw	0
  5391  0931  00FA               	movwf	___lldiv@quotient+1
  5392  0932  3000               	movlw	0
  5393  0933  00F9               	movwf	___lldiv@quotient
  5394  0934  0873               	movf	___lldiv@divisor+3,w
  5395  0935  0472               	iorwf	___lldiv@divisor+2,w
  5396  0936  0471               	iorwf	___lldiv@divisor+1,w
  5397  0937  0470               	iorwf	___lldiv@divisor,w
  5398  0938  1903               	skipnz
  5399  0939  2975               	goto	l2129
  5400  093A  01FD               	clrf	___lldiv@counter
  5401  093B  0AFD               	incf	___lldiv@counter,f
  5402  093C                     l2115:	
  5403  093C  1BF3               	btfsc	___lldiv@divisor+3,7
  5404  093D  294A               	goto	l2117
  5405  093E  3001               	movlw	1
  5406  093F                     u2905:	
  5407  093F  35F0               	lslf	___lldiv@divisor,f
  5408  0940  0DF1               	rlf	___lldiv@divisor+1,f
  5409  0941  0DF2               	rlf	___lldiv@divisor+2,f
  5410  0942  0DF3               	rlf	___lldiv@divisor+3,f
  5411  0943  0B89               	decfsz	9,f
  5412  0944  293F               	goto	u2905
  5413  0945  3001               	movlw	1
  5414  0946  00F8               	movwf	??___lldiv
  5415  0947  0878               	movf	??___lldiv,w
  5416  0948  07FD               	addwf	___lldiv@counter,f
  5417  0949  293C               	goto	l2115
  5418  094A                     l2117:	
  5419  094A  3001               	movlw	1
  5420  094B                     u2925:	
  5421  094B  35F9               	lslf	___lldiv@quotient,f
  5422  094C  0DFA               	rlf	___lldiv@quotient+1,f
  5423  094D  0DFB               	rlf	___lldiv@quotient+2,f
  5424  094E  0DFC               	rlf	___lldiv@quotient+3,f
  5425  094F  0B89               	decfsz	9,f
  5426  0950  294B               	goto	u2925
  5427  0951  0873               	movf	___lldiv@divisor+3,w
  5428  0952  0277               	subwf	___lldiv@dividend+3,w
  5429  0953  1D03               	skipz
  5430  0954  295F               	goto	u2935
  5431  0955  0872               	movf	___lldiv@divisor+2,w
  5432  0956  0276               	subwf	___lldiv@dividend+2,w
  5433  0957  1D03               	skipz
  5434  0958  295F               	goto	u2935
  5435  0959  0871               	movf	___lldiv@divisor+1,w
  5436  095A  0275               	subwf	___lldiv@dividend+1,w
  5437  095B  1D03               	skipz
  5438  095C  295F               	goto	u2935
  5439  095D  0870               	movf	___lldiv@divisor,w
  5440  095E  0274               	subwf	___lldiv@dividend,w
  5441  095F                     u2935:	
  5442  095F  1C03               	skipc
  5443  0960  296A               	goto	l2125
  5444  0961  0870               	movf	___lldiv@divisor,w
  5445  0962  02F4               	subwf	___lldiv@dividend,f
  5446  0963  0871               	movf	___lldiv@divisor+1,w
  5447  0964  3BF5               	subwfb	___lldiv@dividend+1,f
  5448  0965  0872               	movf	___lldiv@divisor+2,w
  5449  0966  3BF6               	subwfb	___lldiv@dividend+2,f
  5450  0967  0873               	movf	___lldiv@divisor+3,w
  5451  0968  3BF7               	subwfb	___lldiv@dividend+3,f
  5452  0969  1479               	bsf	___lldiv@quotient,0
  5453  096A                     l2125:	
  5454  096A  3001               	movlw	1
  5455  096B                     u2945:	
  5456  096B  36F3               	lsrf	___lldiv@divisor+3,f
  5457  096C  0CF2               	rrf	___lldiv@divisor+2,f
  5458  096D  0CF1               	rrf	___lldiv@divisor+1,f
  5459  096E  0CF0               	rrf	___lldiv@divisor,f
  5460  096F  0B89               	decfsz	9,f
  5461  0970  296B               	goto	u2945
  5462  0971  3001               	movlw	1
  5463  0972  02FD               	subwf	___lldiv@counter,f
  5464  0973  1D03               	btfss	3,2
  5465  0974  294A               	goto	l2117
  5466  0975                     l2129:	
  5467  0975  087C               	movf	___lldiv@quotient+3,w
  5468  0976  00F3               	movwf	?___lldiv+3
  5469  0977  087B               	movf	___lldiv@quotient+2,w
  5470  0978  00F2               	movwf	?___lldiv+2
  5471  0979  087A               	movf	___lldiv@quotient+1,w
  5472  097A  00F1               	movwf	?___lldiv+1
  5473  097B  0879               	movf	___lldiv@quotient,w
  5474  097C  00F0               	movwf	?___lldiv
  5475  097D  0008               	return
  5476  097E                     __end_of___lldiv:	
  5477                           
  5478                           	psect	text16
  5479  0A32                     __ptext16:	
  5480 ;; *************** function ___fttol *****************
  5481 ;; Defined at:
  5482 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  f1              3   41[BANK0 ] float 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  lval            4   50[BANK0 ] unsigned long 
  5487 ;;  exp1            1   54[BANK0 ] unsigned char 
  5488 ;;  sign1           1   49[BANK0 ] unsigned char 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  4   41[BANK0 ] long 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5498 ;;      Params:         0       4       0       0       0       0       0       0
  5499 ;;      Locals:         0       6       0       0       0       0       0       0
  5500 ;;      Temps:          0       4       0       0       0       0       0       0
  5501 ;;      Totals:         0      14       0       0       0       0       0       0
  5502 ;;Total ram usage:       14 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; This function calls:
  5505 ;;		Nothing
  5506 ;; This function is called by:
  5507 ;;		_sprintf
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function ___fttol
  5513  0A32                     ___fttol:	
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5517  0A32  0020               	movlb	0	; select bank0
  5518  0A33  0849               	movf	___fttol@f1,w
  5519  0A34  00CD               	movwf	??___fttol
  5520  0A35  084A               	movf	___fttol@f1+1,w
  5521  0A36  00CE               	movwf	??___fttol+1
  5522  0A37  084B               	movf	___fttol@f1+2,w
  5523  0A38  00CF               	movwf	??___fttol+2
  5524  0A39  1003               	clrc
  5525  0A3A  0D4E               	rlf	??___fttol+1,w
  5526  0A3B  0D4F               	rlf	??___fttol+2,w
  5527  0A3C  00D0               	movwf	??___fttol+3
  5528  0A3D  0850               	movf	??___fttol+3,w
  5529  0A3E  00D6               	movwf	___fttol@exp1
  5530  0A3F  08D6               	movf	___fttol@exp1,f
  5531  0A40  1D03               	skipz
  5532  0A41  2A4B               	goto	l2071
  5533  0A42  3000               	movlw	0
  5534  0A43  00CC               	movwf	?___fttol+3
  5535  0A44  3000               	movlw	0
  5536  0A45  00CB               	movwf	?___fttol+2
  5537  0A46  3000               	movlw	0
  5538  0A47  00CA               	movwf	?___fttol+1
  5539  0A48  3000               	movlw	0
  5540  0A49  00C9               	movwf	?___fttol
  5541  0A4A  0008               	return
  5542  0A4B                     l2071:	
  5543  0A4B  0849               	movf	___fttol@f1,w
  5544  0A4C  00CD               	movwf	??___fttol
  5545  0A4D  084A               	movf	___fttol@f1+1,w
  5546  0A4E  00CE               	movwf	??___fttol+1
  5547  0A4F  084B               	movf	___fttol@f1+2,w
  5548  0A50  00CF               	movwf	??___fttol+2
  5549  0A51  3017               	movlw	23
  5550  0A52                     u2805:	
  5551  0A52  36CF               	lsrf	??___fttol+2,f
  5552  0A53  0CCE               	rrf	??___fttol+1,f
  5553  0A54  0CCD               	rrf	??___fttol,f
  5554  0A55  0B89               	decfsz	9,f
  5555  0A56  2A52               	goto	u2805
  5556  0A57  084D               	movf	??___fttol,w
  5557  0A58  00D0               	movwf	??___fttol+3
  5558  0A59  0850               	movf	??___fttol+3,w
  5559  0A5A  00D1               	movwf	___fttol@sign1
  5560  0A5B  17CA               	bsf	___fttol@f1+1,7
  5561  0A5C  30FF               	movlw	255
  5562  0A5D  05C9               	andwf	___fttol@f1,f
  5563  0A5E  30FF               	movlw	255
  5564  0A5F  05CA               	andwf	___fttol@f1+1,f
  5565  0A60  3000               	movlw	0
  5566  0A61  05CB               	andwf	___fttol@f1+2,f
  5567  0A62  0849               	movf	___fttol@f1,w
  5568  0A63  00D2               	movwf	___fttol@lval
  5569  0A64  084A               	movf	___fttol@f1+1,w
  5570  0A65  00D3               	movwf	___fttol@lval+1
  5571  0A66  084B               	movf	___fttol@f1+2,w
  5572  0A67  00D4               	movwf	___fttol@lval+2
  5573  0A68  01D5               	clrf	___fttol@lval+3
  5574  0A69  308E               	movlw	142
  5575  0A6A  02D6               	subwf	___fttol@exp1,f
  5576  0A6B  1FD6               	btfss	___fttol@exp1,7
  5577  0A6C  2A89               	goto	l2091
  5578  0A6D  0856               	movf	___fttol@exp1,w
  5579  0A6E  3A80               	xorlw	128
  5580  0A6F  3E8F               	addlw	143
  5581  0A70  1803               	skipnc
  5582  0A71  2A7B               	goto	l2089
  5583  0A72  3000               	movlw	0
  5584  0A73  00CC               	movwf	?___fttol+3
  5585  0A74  3000               	movlw	0
  5586  0A75  00CB               	movwf	?___fttol+2
  5587  0A76  3000               	movlw	0
  5588  0A77  00CA               	movwf	?___fttol+1
  5589  0A78  3000               	movlw	0
  5590  0A79  00C9               	movwf	?___fttol
  5591  0A7A  0008               	return
  5592  0A7B                     l2089:	
  5593  0A7B  3001               	movlw	1
  5594  0A7C                     u2835:	
  5595  0A7C  36D5               	lsrf	___fttol@lval+3,f
  5596  0A7D  0CD4               	rrf	___fttol@lval+2,f
  5597  0A7E  0CD3               	rrf	___fttol@lval+1,f
  5598  0A7F  0CD2               	rrf	___fttol@lval,f
  5599  0A80  0B89               	decfsz	9,f
  5600  0A81  2A7C               	goto	u2835
  5601  0A82  3001               	movlw	1
  5602  0A83  00CD               	movwf	??___fttol
  5603  0A84  084D               	movf	??___fttol,w
  5604  0A85  07D6               	addwf	___fttol@exp1,f
  5605  0A86  1903               	btfsc	3,2
  5606  0A87  2AA2               	goto	l2101
  5607  0A88  2A7B               	goto	l2089
  5608  0A89                     l2091:	
  5609  0A89  3018               	movlw	24
  5610  0A8A  0256               	subwf	___fttol@exp1,w
  5611  0A8B  1C03               	skipc
  5612  0A8C  2A9F               	goto	l2099
  5613  0A8D  3000               	movlw	0
  5614  0A8E  00CC               	movwf	?___fttol+3
  5615  0A8F  3000               	movlw	0
  5616  0A90  00CB               	movwf	?___fttol+2
  5617  0A91  3000               	movlw	0
  5618  0A92  00CA               	movwf	?___fttol+1
  5619  0A93  3000               	movlw	0
  5620  0A94  00C9               	movwf	?___fttol
  5621  0A95  0008               	return
  5622  0A96                     l2097:	
  5623  0A96  3001               	movlw	1
  5624  0A97                     u2865:	
  5625  0A97  35D2               	lslf	___fttol@lval,f
  5626  0A98  0DD3               	rlf	___fttol@lval+1,f
  5627  0A99  0DD4               	rlf	___fttol@lval+2,f
  5628  0A9A  0DD5               	rlf	___fttol@lval+3,f
  5629  0A9B  0B89               	decfsz	9,f
  5630  0A9C  2A97               	goto	u2865
  5631  0A9D  3001               	movlw	1
  5632  0A9E  02D6               	subwf	___fttol@exp1,f
  5633  0A9F                     l2099:	
  5634  0A9F  08D6               	movf	___fttol@exp1,f
  5635  0AA0  1D03               	skipz
  5636  0AA1  2A96               	goto	l2097
  5637  0AA2                     l2101:	
  5638  0AA2  0851               	movf	___fttol@sign1,w
  5639  0AA3  1903               	btfsc	3,2
  5640  0AA4  2AB0               	goto	l2105
  5641  0AA5  09D2               	comf	___fttol@lval,f
  5642  0AA6  09D3               	comf	___fttol@lval+1,f
  5643  0AA7  09D4               	comf	___fttol@lval+2,f
  5644  0AA8  09D5               	comf	___fttol@lval+3,f
  5645  0AA9  0AD2               	incf	___fttol@lval,f
  5646  0AAA  1903               	skipnz
  5647  0AAB  0AD3               	incf	___fttol@lval+1,f
  5648  0AAC  1903               	skipnz
  5649  0AAD  0AD4               	incf	___fttol@lval+2,f
  5650  0AAE  1903               	skipnz
  5651  0AAF  0AD5               	incf	___fttol@lval+3,f
  5652  0AB0                     l2105:	
  5653  0AB0  0855               	movf	___fttol@lval+3,w
  5654  0AB1  00CC               	movwf	?___fttol+3
  5655  0AB2  0854               	movf	___fttol@lval+2,w
  5656  0AB3  00CB               	movwf	?___fttol+2
  5657  0AB4  0853               	movf	___fttol@lval+1,w
  5658  0AB5  00CA               	movwf	?___fttol+1
  5659  0AB6  0852               	movf	___fttol@lval,w
  5660  0AB7  00C9               	movwf	?___fttol
  5661  0AB8  0008               	return
  5662  0AB9                     __end_of___fttol:	
  5663                           
  5664                           	psect	text17
  5665  17AA                     __ptext17:	
  5666 ;; *************** function ___ftsub *****************
  5667 ;; Defined at:
  5668 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  f2              3   59[BANK0 ] float 
  5671 ;;  f1              3   62[BANK0 ] float 
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  3   59[BANK0 ] float 
  5676 ;; Registers used:
  5677 ;;		wreg, status,2, status,0, pclath, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5683 ;;      Params:         0       6       0       0       0       0       0       0
  5684 ;;      Locals:         0       0       0       0       0       0       0       0
  5685 ;;      Temps:          0       0       0       0       0       0       0       0
  5686 ;;      Totals:         0       6       0       0       0       0       0       0
  5687 ;;Total ram usage:        6 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    2
  5690 ;; This function calls:
  5691 ;;		___ftadd
  5692 ;; This function is called by:
  5693 ;;		_sprintf
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           
  5698                           ;psect for function ___ftsub
  5699  17AA                     ___ftsub:	
  5700                           
  5701                           ;incstack = 0
  5702                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5703  17AA  3080               	movlw	128
  5704  17AB  0020               	movlb	0	; select bank0
  5705  17AC  06DD               	xorwf	___ftsub@f2+2,f
  5706  17AD  085E               	movf	___ftsub@f1,w
  5707  17AE  00CE               	movwf	___ftadd@f1
  5708  17AF  085F               	movf	___ftsub@f1+1,w
  5709  17B0  00CF               	movwf	___ftadd@f1+1
  5710  17B1  0860               	movf	___ftsub@f1+2,w
  5711  17B2  00D0               	movwf	___ftadd@f1+2
  5712  17B3  085B               	movf	___ftsub@f2,w
  5713  17B4  00D1               	movwf	___ftadd@f2
  5714  17B5  085C               	movf	___ftsub@f2+1,w
  5715  17B6  00D2               	movwf	___ftadd@f2+1
  5716  17B7  085D               	movf	___ftsub@f2+2,w
  5717  17B8  00D3               	movwf	___ftadd@f2+2
  5718  17B9  318D  259F         	fcall	___ftadd
  5719  17BB  0020               	movlb	0	; select bank0
  5720  17BC  084E               	movf	?___ftadd,w
  5721  17BD  00DB               	movwf	?___ftsub
  5722  17BE  084F               	movf	?___ftadd+1,w
  5723  17BF  00DC               	movwf	?___ftsub+1
  5724  17C0  0850               	movf	?___ftadd+2,w
  5725  17C1  00DD               	movwf	?___ftsub+2
  5726  17C2  0008               	return
  5727  17C3                     __end_of___ftsub:	
  5728                           
  5729                           	psect	text18
  5730  0D9F                     __ptext18:	
  5731 ;; *************** function ___ftadd *****************
  5732 ;; Defined at:
  5733 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;  f1              3   46[BANK0 ] float 
  5736 ;;  f2              3   49[BANK0 ] float 
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;  exp1            1   58[BANK0 ] unsigned char 
  5739 ;;  exp2            1   57[BANK0 ] unsigned char 
  5740 ;;  sign            1   56[BANK0 ] unsigned char 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  3   46[BANK0 ] float 
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, status,0, pclath, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5750 ;;      Params:         0       6       0       0       0       0       0       0
  5751 ;;      Locals:         0       3       0       0       0       0       0       0
  5752 ;;      Temps:          0       4       0       0       0       0       0       0
  5753 ;;      Totals:         0      13       0       0       0       0       0       0
  5754 ;;Total ram usage:       13 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    1
  5757 ;; This function calls:
  5758 ;;		___ftpack
  5759 ;; This function is called by:
  5760 ;;		_sprintf
  5761 ;;		___ftsub
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           
  5766                           ;psect for function ___ftadd
  5767  0D9F                     ___ftadd:	
  5768                           
  5769                           ;incstack = 0
  5770                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5771  0D9F  0020               	movlb	0	; select bank0
  5772  0DA0  084E               	movf	___ftadd@f1,w
  5773  0DA1  00D4               	movwf	??___ftadd
  5774  0DA2  084F               	movf	___ftadd@f1+1,w
  5775  0DA3  00D5               	movwf	??___ftadd+1
  5776  0DA4  0850               	movf	___ftadd@f1+2,w
  5777  0DA5  00D6               	movwf	??___ftadd+2
  5778  0DA6  1003               	clrc
  5779  0DA7  0D55               	rlf	??___ftadd+1,w
  5780  0DA8  0D56               	rlf	??___ftadd+2,w
  5781  0DA9  00D7               	movwf	??___ftadd+3
  5782  0DAA  0857               	movf	??___ftadd+3,w
  5783  0DAB  00DA               	movwf	___ftadd@exp1
  5784  0DAC  0851               	movf	___ftadd@f2,w
  5785  0DAD  00D4               	movwf	??___ftadd
  5786  0DAE  0852               	movf	___ftadd@f2+1,w
  5787  0DAF  00D5               	movwf	??___ftadd+1
  5788  0DB0  0853               	movf	___ftadd@f2+2,w
  5789  0DB1  00D6               	movwf	??___ftadd+2
  5790  0DB2  1003               	clrc
  5791  0DB3  0D55               	rlf	??___ftadd+1,w
  5792  0DB4  0D56               	rlf	??___ftadd+2,w
  5793  0DB5  00D7               	movwf	??___ftadd+3
  5794  0DB6  0857               	movf	??___ftadd+3,w
  5795  0DB7  00D9               	movwf	___ftadd@exp2
  5796  0DB8  085A               	movf	___ftadd@exp1,w
  5797  0DB9  1903               	btfsc	3,2
  5798  0DBA  2DC7               	goto	l1733
  5799  0DBB  0859               	movf	___ftadd@exp2,w
  5800  0DBC  025A               	subwf	___ftadd@exp1,w
  5801  0DBD  1803               	skipnc
  5802  0DBE  2DCE               	goto	l1737
  5803  0DBF  035A               	decf	___ftadd@exp1,w
  5804  0DC0  3AFF               	xorlw	255
  5805  0DC1  0759               	addwf	___ftadd@exp2,w
  5806  0DC2  00D4               	movwf	??___ftadd
  5807  0DC3  3019               	movlw	25
  5808  0DC4  0254               	subwf	??___ftadd,w
  5809  0DC5  1C03               	skipc
  5810  0DC6  2DCE               	goto	l1737
  5811  0DC7                     l1733:	
  5812  0DC7  0851               	movf	___ftadd@f2,w
  5813  0DC8  00CE               	movwf	?___ftadd
  5814  0DC9  0852               	movf	___ftadd@f2+1,w
  5815  0DCA  00CF               	movwf	?___ftadd+1
  5816  0DCB  0853               	movf	___ftadd@f2+2,w
  5817  0DCC  00D0               	movwf	?___ftadd+2
  5818  0DCD  0008               	return
  5819  0DCE                     l1737:	
  5820  0DCE  0859               	movf	___ftadd@exp2,w
  5821  0DCF  1903               	btfsc	3,2
  5822  0DD0  0008               	return
  5823  0DD1  085A               	movf	___ftadd@exp1,w
  5824  0DD2  0259               	subwf	___ftadd@exp2,w
  5825  0DD3  1803               	skipnc
  5826  0DD4  2DDD               	goto	l1743
  5827  0DD5  0359               	decf	___ftadd@exp2,w
  5828  0DD6  3AFF               	xorlw	255
  5829  0DD7  075A               	addwf	___ftadd@exp1,w
  5830  0DD8  00D4               	movwf	??___ftadd
  5831  0DD9  3019               	movlw	25
  5832  0DDA  0254               	subwf	??___ftadd,w
  5833  0DDB  1803               	btfsc	3,0
  5834  0DDC  0008               	return
  5835  0DDD                     l1743:	
  5836  0DDD  3006               	movlw	6
  5837  0DDE  00D4               	movwf	??___ftadd
  5838  0DDF  0854               	movf	??___ftadd,w
  5839  0DE0  00D8               	movwf	___ftadd@sign
  5840  0DE1  1BD0               	btfsc	___ftadd@f1+2,7
  5841  0DE2  17D8               	bsf	___ftadd@sign,7
  5842  0DE3  1BD3               	btfsc	___ftadd@f2+2,7
  5843  0DE4  1758               	bsf	___ftadd@sign,6
  5844  0DE5  17CF               	bsf	___ftadd@f1+1,7
  5845  0DE6  30FF               	movlw	255
  5846  0DE7  05CE               	andwf	___ftadd@f1,f
  5847  0DE8  30FF               	movlw	255
  5848  0DE9  05CF               	andwf	___ftadd@f1+1,f
  5849  0DEA  3000               	movlw	0
  5850  0DEB  05D0               	andwf	___ftadd@f1+2,f
  5851  0DEC  17D2               	bsf	___ftadd@f2+1,7
  5852  0DED  30FF               	movlw	255
  5853  0DEE  05D1               	andwf	___ftadd@f2,f
  5854  0DEF  30FF               	movlw	255
  5855  0DF0  05D2               	andwf	___ftadd@f2+1,f
  5856  0DF1  3000               	movlw	0
  5857  0DF2  05D3               	andwf	___ftadd@f2+2,f
  5858  0DF3  0859               	movf	___ftadd@exp2,w
  5859  0DF4  025A               	subwf	___ftadd@exp1,w
  5860  0DF5  1803               	skipnc
  5861  0DF6  2E19               	goto	l1765
  5862  0DF7                     l1755:	
  5863  0DF7  3001               	movlw	1
  5864  0DF8                     u2165:	
  5865  0DF8  35D1               	lslf	___ftadd@f2,f
  5866  0DF9  0DD2               	rlf	___ftadd@f2+1,f
  5867  0DFA  0DD3               	rlf	___ftadd@f2+2,f
  5868  0DFB  0B89               	decfsz	9,f
  5869  0DFC  2DF8               	goto	u2165
  5870  0DFD  3001               	movlw	1
  5871  0DFE  02D9               	subwf	___ftadd@exp2,f
  5872  0DFF  0859               	movf	___ftadd@exp2,w
  5873  0E00  065A               	xorwf	___ftadd@exp1,w
  5874  0E01  1903               	skipnz
  5875  0E02  2E14               	goto	l1763
  5876  0E03  3001               	movlw	1
  5877  0E04  02D8               	subwf	___ftadd@sign,f
  5878  0E05  0858               	movf	___ftadd@sign,w
  5879  0E06  3907               	andlw	7
  5880  0E07  1903               	btfsc	3,2
  5881  0E08  2E14               	goto	l1763
  5882  0E09  2DF7               	goto	l1755
  5883  0E0A                     l1761:	
  5884  0E0A  3001               	movlw	1
  5885  0E0B                     u2195:	
  5886  0E0B  36D0               	lsrf	___ftadd@f1+2,f
  5887  0E0C  0CCF               	rrf	___ftadd@f1+1,f
  5888  0E0D  0CCE               	rrf	___ftadd@f1,f
  5889  0E0E  0B89               	decfsz	9,f
  5890  0E0F  2E0B               	goto	u2195
  5891  0E10  3001               	movlw	1
  5892  0E11  00D4               	movwf	??___ftadd
  5893  0E12  0854               	movf	??___ftadd,w
  5894  0E13  07DA               	addwf	___ftadd@exp1,f
  5895  0E14                     l1763:	
  5896  0E14  085A               	movf	___ftadd@exp1,w
  5897  0E15  0659               	xorwf	___ftadd@exp2,w
  5898  0E16  1903               	btfsc	3,2
  5899  0E17  2E3E               	goto	l479
  5900  0E18  2E0A               	goto	l1761
  5901  0E19                     l1765:	
  5902  0E19  085A               	movf	___ftadd@exp1,w
  5903  0E1A  0259               	subwf	___ftadd@exp2,w
  5904  0E1B  1803               	skipnc
  5905  0E1C  2E3E               	goto	l479
  5906  0E1D                     l1767:	
  5907  0E1D  3001               	movlw	1
  5908  0E1E                     u2225:	
  5909  0E1E  35CE               	lslf	___ftadd@f1,f
  5910  0E1F  0DCF               	rlf	___ftadd@f1+1,f
  5911  0E20  0DD0               	rlf	___ftadd@f1+2,f
  5912  0E21  0B89               	decfsz	9,f
  5913  0E22  2E1E               	goto	u2225
  5914  0E23  3001               	movlw	1
  5915  0E24  02DA               	subwf	___ftadd@exp1,f
  5916  0E25  0859               	movf	___ftadd@exp2,w
  5917  0E26  065A               	xorwf	___ftadd@exp1,w
  5918  0E27  1903               	skipnz
  5919  0E28  2E3A               	goto	l1775
  5920  0E29  3001               	movlw	1
  5921  0E2A  02D8               	subwf	___ftadd@sign,f
  5922  0E2B  0858               	movf	___ftadd@sign,w
  5923  0E2C  3907               	andlw	7
  5924  0E2D  1903               	btfsc	3,2
  5925  0E2E  2E3A               	goto	l1775
  5926  0E2F  2E1D               	goto	l1767
  5927  0E30                     l1773:	
  5928  0E30  3001               	movlw	1
  5929  0E31                     u2255:	
  5930  0E31  36D3               	lsrf	___ftadd@f2+2,f
  5931  0E32  0CD2               	rrf	___ftadd@f2+1,f
  5932  0E33  0CD1               	rrf	___ftadd@f2,f
  5933  0E34  0B89               	decfsz	9,f
  5934  0E35  2E31               	goto	u2255
  5935  0E36  3001               	movlw	1
  5936  0E37  00D4               	movwf	??___ftadd
  5937  0E38  0854               	movf	??___ftadd,w
  5938  0E39  07D9               	addwf	___ftadd@exp2,f
  5939  0E3A                     l1775:	
  5940  0E3A  085A               	movf	___ftadd@exp1,w
  5941  0E3B  0659               	xorwf	___ftadd@exp2,w
  5942  0E3C  1D03               	skipz
  5943  0E3D  2E30               	goto	l1773
  5944  0E3E                     l479:	
  5945  0E3E  1FD8               	btfss	___ftadd@sign,7
  5946  0E3F  2E50               	goto	l1779
  5947  0E40  30FF               	movlw	255
  5948  0E41  06CE               	xorwf	___ftadd@f1,f
  5949  0E42  30FF               	movlw	255
  5950  0E43  06CF               	xorwf	___ftadd@f1+1,f
  5951  0E44  30FF               	movlw	255
  5952  0E45  06D0               	xorwf	___ftadd@f1+2,f
  5953  0E46  3001               	movlw	1
  5954  0E47  07CE               	addwf	___ftadd@f1,f
  5955  0E48  3000               	movlw	0
  5956  0E49  1803               	skipnc
  5957  0E4A  3001               	movlw	1
  5958  0E4B  07CF               	addwf	___ftadd@f1+1,f
  5959  0E4C  3000               	movlw	0
  5960  0E4D  1803               	skipnc
  5961  0E4E  3001               	movlw	1
  5962  0E4F  07D0               	addwf	___ftadd@f1+2,f
  5963  0E50                     l1779:	
  5964  0E50  1F58               	btfss	___ftadd@sign,6
  5965  0E51  2E62               	goto	l1783
  5966  0E52  30FF               	movlw	255
  5967  0E53  06D1               	xorwf	___ftadd@f2,f
  5968  0E54  30FF               	movlw	255
  5969  0E55  06D2               	xorwf	___ftadd@f2+1,f
  5970  0E56  30FF               	movlw	255
  5971  0E57  06D3               	xorwf	___ftadd@f2+2,f
  5972  0E58  3001               	movlw	1
  5973  0E59  07D1               	addwf	___ftadd@f2,f
  5974  0E5A  3000               	movlw	0
  5975  0E5B  1803               	skipnc
  5976  0E5C  3001               	movlw	1
  5977  0E5D  07D2               	addwf	___ftadd@f2+1,f
  5978  0E5E  3000               	movlw	0
  5979  0E5F  1803               	skipnc
  5980  0E60  3001               	movlw	1
  5981  0E61  07D3               	addwf	___ftadd@f2+2,f
  5982  0E62                     l1783:	
  5983  0E62  01D8               	clrf	___ftadd@sign
  5984  0E63  084E               	movf	___ftadd@f1,w
  5985  0E64  07D1               	addwf	___ftadd@f2,f
  5986  0E65  084F               	movf	___ftadd@f1+1,w
  5987  0E66  3DD2               	addwfc	___ftadd@f2+1,f
  5988  0E67  0850               	movf	___ftadd@f1+2,w
  5989  0E68  3DD3               	addwfc	___ftadd@f2+2,f
  5990  0E69  1FD3               	btfss	___ftadd@f2+2,7
  5991  0E6A  2E7D               	goto	l1793
  5992  0E6B  30FF               	movlw	255
  5993  0E6C  06D1               	xorwf	___ftadd@f2,f
  5994  0E6D  30FF               	movlw	255
  5995  0E6E  06D2               	xorwf	___ftadd@f2+1,f
  5996  0E6F  30FF               	movlw	255
  5997  0E70  06D3               	xorwf	___ftadd@f2+2,f
  5998  0E71  3001               	movlw	1
  5999  0E72  07D1               	addwf	___ftadd@f2,f
  6000  0E73  3000               	movlw	0
  6001  0E74  1803               	skipnc
  6002  0E75  3001               	movlw	1
  6003  0E76  07D2               	addwf	___ftadd@f2+1,f
  6004  0E77  3000               	movlw	0
  6005  0E78  1803               	skipnc
  6006  0E79  3001               	movlw	1
  6007  0E7A  07D3               	addwf	___ftadd@f2+2,f
  6008  0E7B  01D8               	clrf	___ftadd@sign
  6009  0E7C  0AD8               	incf	___ftadd@sign,f
  6010  0E7D                     l1793:	
  6011  0E7D  0851               	movf	___ftadd@f2,w
  6012  0E7E  00F0               	movwf	___ftpack@arg
  6013  0E7F  0852               	movf	___ftadd@f2+1,w
  6014  0E80  00F1               	movwf	___ftpack@arg+1
  6015  0E81  0853               	movf	___ftadd@f2+2,w
  6016  0E82  00F2               	movwf	___ftpack@arg+2
  6017  0E83  085A               	movf	___ftadd@exp1,w
  6018  0E84  00D4               	movwf	??___ftadd
  6019  0E85  0854               	movf	??___ftadd,w
  6020  0E86  00F3               	movwf	___ftpack@exp
  6021  0E87  0858               	movf	___ftadd@sign,w
  6022  0E88  00D5               	movwf	??___ftadd+1
  6023  0E89  0855               	movf	??___ftadd+1,w
  6024  0E8A  00F4               	movwf	___ftpack@sign
  6025  0E8B  3189  21D2         	fcall	___ftpack
  6026  0E8D  0870               	movf	?___ftpack,w
  6027  0E8E  0020               	movlb	0	; select bank0
  6028  0E8F  00CE               	movwf	?___ftadd
  6029  0E90  0871               	movf	?___ftpack+1,w
  6030  0E91  00CF               	movwf	?___ftadd+1
  6031  0E92  0872               	movf	?___ftpack+2,w
  6032  0E93  00D0               	movwf	?___ftadd+2
  6033  0E94  0008               	return
  6034  0E95                     __end_of___ftadd:	
  6035                           
  6036                           	psect	text19
  6037  1778                     __ptext19:	
  6038 ;; *************** function ___ftneg *****************
  6039 ;; Defined at:
  6040 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  f1              3    0[COMMON] float 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;		None
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  3    0[COMMON] float 
  6047 ;; Registers used:
  6048 ;;		wreg
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6054 ;;      Params:         3       0       0       0       0       0       0       0
  6055 ;;      Locals:         0       0       0       0       0       0       0       0
  6056 ;;      Temps:          0       0       0       0       0       0       0       0
  6057 ;;      Totals:         3       0       0       0       0       0       0       0
  6058 ;;Total ram usage:        3 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_sprintf
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           
  6068                           ;psect for function ___ftneg
  6069  1778                     ___ftneg:	
  6070                           
  6071                           ;incstack = 0
  6072                           ; Regs used in ___ftneg: [wreg]
  6073  1778  0872               	movf	___ftneg@f1+2,w
  6074  1779  0471               	iorwf	___ftneg@f1+1,w
  6075  177A  0470               	iorwf	___ftneg@f1,w
  6076  177B  1903               	skipnz
  6077  177C  0008               	return
  6078  177D  3080               	movlw	128
  6079  177E  06F2               	xorwf	___ftneg@f1+2,f
  6080  177F  0008               	return
  6081  1780                     __end_of___ftneg:	
  6082                           
  6083                           	psect	text20
  6084  0829                     __ptext20:	
  6085 ;; *************** function ___ftge *****************
  6086 ;; Defined at:
  6087 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  ff1             3    0[COMMON] float 
  6090 ;;  ff2             3    3[COMMON] float 
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;		None
  6093 ;; Return value:  Size  Location     Type
  6094 ;;		None               void
  6095 ;; Registers used:
  6096 ;;		wreg, status,2, status,0
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6102 ;;      Params:         6       0       0       0       0       0       0       0
  6103 ;;      Locals:         0       0       0       0       0       0       0       0
  6104 ;;      Temps:          3       0       0       0       0       0       0       0
  6105 ;;      Totals:         9       0       0       0       0       0       0       0
  6106 ;;Total ram usage:        9 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_sprintf
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           
  6116                           ;psect for function ___ftge
  6117  0829                     ___ftge:	
  6118                           
  6119                           ;incstack = 0
  6120                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6121  0829  1FF2               	btfss	___ftge@ff1+2,7
  6122  082A  283F               	goto	l2035
  6123  082B  0970               	comf	___ftge@ff1,w
  6124  082C  00F6               	movwf	??___ftge
  6125  082D  0971               	comf	___ftge@ff1+1,w
  6126  082E  00F7               	movwf	??___ftge+1
  6127  082F  0972               	comf	___ftge@ff1+2,w
  6128  0830  00F8               	movwf	??___ftge+2
  6129  0831  0AF6               	incf	??___ftge,f
  6130  0832  1903               	skipnz
  6131  0833  0AF7               	incf	??___ftge+1,f
  6132  0834  1903               	skipnz
  6133  0835  0AF8               	incf	??___ftge+2,f
  6134  0836  3000               	movlw	0
  6135  0837  0776               	addwf	??___ftge,w
  6136  0838  00F0               	movwf	___ftge@ff1
  6137  0839  3000               	movlw	0
  6138  083A  3D77               	addwfc	??___ftge+1,w
  6139  083B  00F1               	movwf	___ftge@ff1+1
  6140  083C  3080               	movlw	128
  6141  083D  3D78               	addwfc	??___ftge+2,w
  6142  083E  00F2               	movwf	___ftge@ff1+2
  6143  083F                     l2035:	
  6144  083F  1FF5               	btfss	___ftge@ff2+2,7
  6145  0840  2855               	goto	l2039
  6146  0841  0973               	comf	___ftge@ff2,w
  6147  0842  00F6               	movwf	??___ftge
  6148  0843  0974               	comf	___ftge@ff2+1,w
  6149  0844  00F7               	movwf	??___ftge+1
  6150  0845  0975               	comf	___ftge@ff2+2,w
  6151  0846  00F8               	movwf	??___ftge+2
  6152  0847  0AF6               	incf	??___ftge,f
  6153  0848  1903               	skipnz
  6154  0849  0AF7               	incf	??___ftge+1,f
  6155  084A  1903               	skipnz
  6156  084B  0AF8               	incf	??___ftge+2,f
  6157  084C  3000               	movlw	0
  6158  084D  0776               	addwf	??___ftge,w
  6159  084E  00F3               	movwf	___ftge@ff2
  6160  084F  3000               	movlw	0
  6161  0850  3D77               	addwfc	??___ftge+1,w
  6162  0851  00F4               	movwf	___ftge@ff2+1
  6163  0852  3080               	movlw	128
  6164  0853  3D78               	addwfc	??___ftge+2,w
  6165  0854  00F5               	movwf	___ftge@ff2+2
  6166  0855                     l2039:	
  6167  0855  3080               	movlw	128
  6168  0856  06F2               	xorwf	___ftge@ff1+2,f
  6169  0857  3080               	movlw	128
  6170  0858  06F5               	xorwf	___ftge@ff2+2,f
  6171  0859  0875               	movf	___ftge@ff2+2,w
  6172  085A  0272               	subwf	___ftge@ff1+2,w
  6173  085B  1D03               	skipz
  6174  085C  0008               	return
  6175  085D  0874               	movf	___ftge@ff2+1,w
  6176  085E  0271               	subwf	___ftge@ff1+1,w
  6177  085F  1D03               	skipz
  6178  0860  0008               	return
  6179  0861  0873               	movf	___ftge@ff2,w
  6180  0862  0270               	subwf	___ftge@ff1,w
  6181  0863  0008               	return
  6182  0864                     __end_of___ftge:	
  6183                           
  6184                           	psect	text21
  6185  1794                     __ptext21:	
  6186 ;; *************** function _putsEUSART *****************
  6187 ;; Defined at:
  6188 ;;		line 49 in file "usart.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  buffer          1    wreg     PTR unsigned char 
  6191 ;;		 -> buffer(30), 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  buffer          1    1[COMMON] PTR unsigned char 
  6194 ;;		 -> buffer(30), 
  6195 ;; Return value:  Size  Location     Type
  6196 ;;		None               void
  6197 ;; Registers used:
  6198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6204 ;;      Params:         0       0       0       0       0       0       0       0
  6205 ;;      Locals:         1       0       0       0       0       0       0       0
  6206 ;;      Temps:          0       0       0       0       0       0       0       0
  6207 ;;      Totals:         1       0       0       0       0       0       0       0
  6208 ;;Total ram usage:        1 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    1
  6211 ;; This function calls:
  6212 ;;		_busyEUSART
  6213 ;;		_writeEUSART
  6214 ;; This function is called by:
  6215 ;;		_loop
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           
  6220                           ;psect for function _putsEUSART
  6221  1794                     _putsEUSART:	
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _putsEUSART: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6225                           ;putsEUSART@buffer stored from wreg
  6226  1794  00F1               	movwf	putsEUSART@buffer
  6227  1795                     l2349:	
  6228                           ;usart.c: 51: while(busyEUSART());
  6229                           
  6230                           ;usart.c: 50: do{
  6231                           
  6232  1795  3197  276A  3197   	fcall	_busyEUSART
  6233  1798  3800               	iorlw	0
  6234  1799  1D03               	skipz
  6235  179A  2F95               	goto	l2349
  6236                           
  6237                           ;usart.c: 52: writeEUSART(*buffer);
  6238  179B  0871               	movf	putsEUSART@buffer,w
  6239  179C  0086               	movwf	6
  6240  179D  0187               	clrf	7
  6241  179E  0801               	movf	1,w
  6242  179F  3197  275F  3197   	fcall	_writeEUSART
  6243                           
  6244                           ;usart.c: 53: }while(*buffer++);
  6245  17A2  0871               	movf	putsEUSART@buffer,w
  6246  17A3  0086               	movwf	6
  6247  17A4  0187               	clrf	7
  6248  17A5  0AF1               	incf	putsEUSART@buffer,f
  6249  17A6  0881               	movf	1,f
  6250  17A7  1903               	btfsc	3,2
  6251  17A8  0008               	return
  6252  17A9  2F95               	goto	l2349
  6253  17AA                     __end_of_putsEUSART:	
  6254                           
  6255                           	psect	text22
  6256  175F                     __ptext22:	
  6257 ;; *************** function _writeEUSART *****************
  6258 ;; Defined at:
  6259 ;;		line 45 in file "usart.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  data            1    wreg     unsigned char 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  data            1    0[COMMON] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;		None               void
  6266 ;; Registers used:
  6267 ;;		wreg
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6273 ;;      Params:         0       0       0       0       0       0       0       0
  6274 ;;      Locals:         1       0       0       0       0       0       0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0       0
  6276 ;;      Totals:         1       0       0       0       0       0       0       0
  6277 ;;Total ram usage:        1 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; This function calls:
  6280 ;;		Nothing
  6281 ;; This function is called by:
  6282 ;;		_putsEUSART
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function _writeEUSART
  6288  175F                     _writeEUSART:	
  6289                           
  6290                           ;incstack = 0
  6291                           ; Regs used in _writeEUSART: [wreg]
  6292                           ;writeEUSART@data stored from wreg
  6293  175F  00F0               	movwf	writeEUSART@data
  6294                           
  6295                           ;usart.c: 46: TXREG=data;
  6296  1760  0870               	movf	writeEUSART@data,w
  6297  1761  0023               	movlb	3	; select bank3
  6298  1762  009A               	movwf	26	;volatile
  6299  1763  0008               	return
  6300  1764                     __end_of_writeEUSART:	
  6301                           
  6302                           	psect	text23
  6303  176A                     __ptext23:	
  6304 ;; *************** function _busyEUSART *****************
  6305 ;; Defined at:
  6306 ;;		line 33 in file "usart.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;		None
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      unsigned char 
  6313 ;; Registers used:
  6314 ;;		wreg
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6320 ;;      Params:         0       0       0       0       0       0       0       0
  6321 ;;      Locals:         0       0       0       0       0       0       0       0
  6322 ;;      Temps:          0       0       0       0       0       0       0       0
  6323 ;;      Totals:         0       0       0       0       0       0       0       0
  6324 ;;Total ram usage:        0 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; This function calls:
  6327 ;;		Nothing
  6328 ;; This function is called by:
  6329 ;;		_loop
  6330 ;;		_putsEUSART
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           
  6335                           ;psect for function _busyEUSART
  6336  176A                     _busyEUSART:	
  6337                           
  6338                           ;usart.c: 34: if(!TXSTAbits.TRMT)
  6339                           
  6340                           ;incstack = 0
  6341                           ; Regs used in _busyEUSART: [wreg]
  6342  176A  0023               	movlb	3	; select bank3
  6343  176B  189E               	btfsc	30,1	;volatile
  6344  176C  2F6F               	goto	l1853
  6345                           
  6346                           ;usart.c: 35: return 1;
  6347  176D  3001               	movlw	1
  6348  176E  0008               	return
  6349  176F                     l1853:	
  6350                           
  6351                           ;usart.c: 36: return 0;
  6352  176F  3000               	movlw	0
  6353  1770  0008               	return
  6354  1771                     __end_of_busyEUSART:	
  6355                           
  6356                           	psect	text24
  6357  0864                     __ptext24:	
  6358 ;; *************** function _convertir *****************
  6359 ;; Defined at:
  6360 ;;		line 58 in file "principal.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  channel         2    0[COMMON] int 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  i               2    9[COMMON] int 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  2    0[COMMON] int 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6374 ;;      Params:         2       0       0       0       0       0       0       0
  6375 ;;      Locals:         2       0       0       0       0       0       0       0
  6376 ;;      Temps:          7       0       0       0       0       0       0       0
  6377 ;;      Totals:        11       0       0       0       0       0       0       0
  6378 ;;Total ram usage:       11 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_loop
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function _convertir
  6389  0864                     _convertir:	
  6390                           
  6391                           ;principal.c: 60: int i=0;
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _convertir: [wreg+status,2+status,0]
  6395  0864  01F9               	clrf	convertir@i
  6396  0865  01FA               	clrf	convertir@i+1
  6397                           
  6398                           ;principal.c: 61: ADRESL=0x00;
  6399  0866  0021               	movlb	1	; select bank1
  6400  0867  019B               	clrf	27	;volatile
  6401                           
  6402                           ;principal.c: 62: ADRESH=0x00;
  6403  0868  019C               	clrf	28	;volatile
  6404                           
  6405                           ;principal.c: 63: ADCON0bits.CHS=channel;
  6406  0869  0870               	movf	convertir@channel,w
  6407  086A  00F2               	movwf	??_convertir
  6408  086B  0DF2               	rlf	??_convertir,f
  6409  086C  0DF2               	rlf	??_convertir,f
  6410  086D  081D               	movf	29,w	;volatile
  6411  086E  0672               	xorwf	??_convertir,w
  6412  086F  3983               	andlw	-125
  6413  0870  0672               	xorwf	??_convertir,w
  6414  0871  009D               	movwf	29	;volatile
  6415                           
  6416                           ;principal.c: 64: ADCON0bits.ADON=1;
  6417  0872  141D               	bsf	29,0	;volatile
  6418                           
  6419                           ;principal.c: 65: ADCON0bits.GO=1;
  6420  0873  149D               	bsf	29,1	;volatile
  6421                           
  6422                           ;principal.c: 66: _delay((unsigned long)((10)*(1000000/4000.0)));
  6423  0874  3004               	movlw	4
  6424  0875  00F3               	movwf	??_convertir+1
  6425  0876  303D               	movlw	61
  6426  0877  00F2               	movwf	??_convertir
  6427  0878                     u3457:	
  6428  0878  0BF2               	decfsz	??_convertir,f
  6429  0879  2878               	goto	u3457
  6430  087A  0BF3               	decfsz	??_convertir+1,f
  6431  087B  2878               	goto	u3457
  6432  087C  3200               	nop2
  6433  087D                     l32:	
  6434                           ;principal.c: 67: while(ADCON0bits.GO);
  6435                           
  6436  087D  0021               	movlb	1	; select bank1
  6437  087E  189D               	btfsc	29,1	;volatile
  6438  087F  287D               	goto	l32
  6439                           
  6440                           ;principal.c: 68: ADCON0bits.ADON=0;
  6441  0880  101D               	bcf	29,0	;volatile
  6442                           
  6443                           ;principal.c: 69: i=ADRESH;
  6444  0881  081C               	movf	28,w	;volatile
  6445  0882  00F2               	movwf	??_convertir
  6446  0883  01F3               	clrf	??_convertir+1
  6447  0884  0872               	movf	??_convertir,w
  6448  0885  00F9               	movwf	convertir@i
  6449  0886  0873               	movf	??_convertir+1,w
  6450  0887  00FA               	movwf	convertir@i+1
  6451                           
  6452                           ;principal.c: 70: i=(i<<8)|ADRESL;
  6453  0888  081B               	movf	27,w	;volatile
  6454  0889  00F2               	movwf	??_convertir
  6455  088A  01F3               	clrf	??_convertir+1
  6456  088B  087A               	movf	convertir@i+1,w
  6457  088C  00F5               	movwf	??_convertir+3
  6458  088D  0879               	movf	convertir@i,w
  6459  088E  00F4               	movwf	??_convertir+2
  6460  088F  0874               	movf	??_convertir+2,w
  6461  0890  00F5               	movwf	??_convertir+3
  6462  0891  01F4               	clrf	??_convertir+2
  6463  0892  0872               	movf	??_convertir,w
  6464  0893  0474               	iorwf	??_convertir+2,w
  6465  0894  00F7               	movwf	??_convertir+5
  6466  0895  0873               	movf	??_convertir+1,w
  6467  0896  0475               	iorwf	??_convertir+3,w
  6468  0897  00F8               	movwf	??_convertir+6
  6469  0898  0877               	movf	??_convertir+5,w
  6470  0899  00F9               	movwf	convertir@i
  6471  089A  0878               	movf	??_convertir+6,w
  6472  089B  00FA               	movwf	convertir@i+1
  6473                           
  6474                           ;principal.c: 71: return i;
  6475  089C  087A               	movf	convertir@i+1,w
  6476  089D  01F1               	clrf	?_convertir+1
  6477  089E  07F1               	addwf	?_convertir+1,f
  6478  089F  0879               	movf	convertir@i,w
  6479  08A0  01F0               	clrf	?_convertir
  6480  08A1  07F0               	addwf	?_convertir,f
  6481  08A2  0008               	return
  6482  08A3                     __end_of_convertir:	
  6483                           
  6484                           	psect	text25
  6485  0AB9                     __ptext25:	
  6486 ;; *************** function ___ftdiv *****************
  6487 ;; Defined at:
  6488 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;  f2              3    0[BANK0 ] float 
  6491 ;;  f1              3    3[BANK0 ] float 
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  f3              3   11[BANK0 ] float 
  6494 ;;  sign            1   15[BANK0 ] unsigned char 
  6495 ;;  exp             1   14[BANK0 ] unsigned char 
  6496 ;;  cntr            1   10[BANK0 ] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  3    0[BANK0 ] float 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, pclath, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6506 ;;      Params:         0       6       0       0       0       0       0       0
  6507 ;;      Locals:         0       6       0       0       0       0       0       0
  6508 ;;      Temps:          0       4       0       0       0       0       0       0
  6509 ;;      Totals:         0      16       0       0       0       0       0       0
  6510 ;;Total ram usage:       16 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    1
  6513 ;; This function calls:
  6514 ;;		___ftpack
  6515 ;; This function is called by:
  6516 ;;		_loop
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           
  6521                           ;psect for function ___ftdiv
  6522  0AB9                     ___ftdiv:	
  6523                           
  6524                           ;incstack = 0
  6525                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6526  0AB9  0020               	movlb	0	; select bank0
  6527  0ABA  0823               	movf	___ftdiv@f1,w
  6528  0ABB  00A6               	movwf	??___ftdiv
  6529  0ABC  0824               	movf	___ftdiv@f1+1,w
  6530  0ABD  00A7               	movwf	??___ftdiv+1
  6531  0ABE  0825               	movf	___ftdiv@f1+2,w
  6532  0ABF  00A8               	movwf	??___ftdiv+2
  6533  0AC0  1003               	clrc
  6534  0AC1  0D27               	rlf	??___ftdiv+1,w
  6535  0AC2  0D28               	rlf	??___ftdiv+2,w
  6536  0AC3  00A9               	movwf	??___ftdiv+3
  6537  0AC4  0829               	movf	??___ftdiv+3,w
  6538  0AC5  00AE               	movwf	___ftdiv@exp
  6539  0AC6  08AE               	movf	___ftdiv@exp,f
  6540  0AC7  1D03               	skipz
  6541  0AC8  2AD0               	goto	l2373
  6542  0AC9  3000               	movlw	0
  6543  0ACA  00A0               	movwf	?___ftdiv
  6544  0ACB  3000               	movlw	0
  6545  0ACC  00A1               	movwf	?___ftdiv+1
  6546  0ACD  3000               	movlw	0
  6547  0ACE  00A2               	movwf	?___ftdiv+2
  6548  0ACF  0008               	return
  6549  0AD0                     l2373:	
  6550  0AD0  0820               	movf	___ftdiv@f2,w
  6551  0AD1  00A6               	movwf	??___ftdiv
  6552  0AD2  0821               	movf	___ftdiv@f2+1,w
  6553  0AD3  00A7               	movwf	??___ftdiv+1
  6554  0AD4  0822               	movf	___ftdiv@f2+2,w
  6555  0AD5  00A8               	movwf	??___ftdiv+2
  6556  0AD6  1003               	clrc
  6557  0AD7  0D27               	rlf	??___ftdiv+1,w
  6558  0AD8  0D28               	rlf	??___ftdiv+2,w
  6559  0AD9  00A9               	movwf	??___ftdiv+3
  6560  0ADA  0829               	movf	??___ftdiv+3,w
  6561  0ADB  00AF               	movwf	___ftdiv@sign
  6562  0ADC  08AF               	movf	___ftdiv@sign,f
  6563  0ADD  1D03               	skipz
  6564  0ADE  2AE6               	goto	l2379
  6565  0ADF  3000               	movlw	0
  6566  0AE0  00A0               	movwf	?___ftdiv
  6567  0AE1  3000               	movlw	0
  6568  0AE2  00A1               	movwf	?___ftdiv+1
  6569  0AE3  3000               	movlw	0
  6570  0AE4  00A2               	movwf	?___ftdiv+2
  6571  0AE5  0008               	return
  6572  0AE6                     l2379:	
  6573  0AE6  3000               	movlw	0
  6574  0AE7  00AB               	movwf	___ftdiv@f3
  6575  0AE8  3000               	movlw	0
  6576  0AE9  00AC               	movwf	___ftdiv@f3+1
  6577  0AEA  3000               	movlw	0
  6578  0AEB  00AD               	movwf	___ftdiv@f3+2
  6579  0AEC  3089               	movlw	137
  6580  0AED  072F               	addwf	___ftdiv@sign,w
  6581  0AEE  00A6               	movwf	??___ftdiv
  6582  0AEF  0826               	movf	??___ftdiv,w
  6583  0AF0  02AE               	subwf	___ftdiv@exp,f
  6584  0AF1  0823               	movf	___ftdiv@f1,w
  6585  0AF2  00A6               	movwf	??___ftdiv
  6586  0AF3  0824               	movf	___ftdiv@f1+1,w
  6587  0AF4  00A7               	movwf	??___ftdiv+1
  6588  0AF5  0825               	movf	___ftdiv@f1+2,w
  6589  0AF6  00A8               	movwf	??___ftdiv+2
  6590  0AF7  3010               	movlw	16
  6591  0AF8                     u3365:	
  6592  0AF8  36A8               	lsrf	??___ftdiv+2,f
  6593  0AF9  0CA7               	rrf	??___ftdiv+1,f
  6594  0AFA  0CA6               	rrf	??___ftdiv,f
  6595  0AFB  0B89               	decfsz	9,f
  6596  0AFC  2AF8               	goto	u3365
  6597  0AFD  0826               	movf	??___ftdiv,w
  6598  0AFE  00A9               	movwf	??___ftdiv+3
  6599  0AFF  0829               	movf	??___ftdiv+3,w
  6600  0B00  00AF               	movwf	___ftdiv@sign
  6601  0B01  0820               	movf	___ftdiv@f2,w
  6602  0B02  00A6               	movwf	??___ftdiv
  6603  0B03  0821               	movf	___ftdiv@f2+1,w
  6604  0B04  00A7               	movwf	??___ftdiv+1
  6605  0B05  0822               	movf	___ftdiv@f2+2,w
  6606  0B06  00A8               	movwf	??___ftdiv+2
  6607  0B07  3010               	movlw	16
  6608  0B08                     u3375:	
  6609  0B08  36A8               	lsrf	??___ftdiv+2,f
  6610  0B09  0CA7               	rrf	??___ftdiv+1,f
  6611  0B0A  0CA6               	rrf	??___ftdiv,f
  6612  0B0B  0B89               	decfsz	9,f
  6613  0B0C  2B08               	goto	u3375
  6614  0B0D  0826               	movf	??___ftdiv,w
  6615  0B0E  00A9               	movwf	??___ftdiv+3
  6616  0B0F  0829               	movf	??___ftdiv+3,w
  6617  0B10  06AF               	xorwf	___ftdiv@sign,f
  6618  0B11  3080               	movlw	128
  6619  0B12  00A6               	movwf	??___ftdiv
  6620  0B13  0826               	movf	??___ftdiv,w
  6621  0B14  05AF               	andwf	___ftdiv@sign,f
  6622  0B15  17A4               	bsf	___ftdiv@f1+1,7
  6623  0B16  30FF               	movlw	255
  6624  0B17  05A3               	andwf	___ftdiv@f1,f
  6625  0B18  30FF               	movlw	255
  6626  0B19  05A4               	andwf	___ftdiv@f1+1,f
  6627  0B1A  3000               	movlw	0
  6628  0B1B  05A5               	andwf	___ftdiv@f1+2,f
  6629  0B1C  17A1               	bsf	___ftdiv@f2+1,7
  6630  0B1D  30FF               	movlw	255
  6631  0B1E  05A0               	andwf	___ftdiv@f2,f
  6632  0B1F  30FF               	movlw	255
  6633  0B20  05A1               	andwf	___ftdiv@f2+1,f
  6634  0B21  3000               	movlw	0
  6635  0B22  05A2               	andwf	___ftdiv@f2+2,f
  6636  0B23  3018               	movlw	24
  6637  0B24  00A6               	movwf	??___ftdiv
  6638  0B25  0826               	movf	??___ftdiv,w
  6639  0B26  00AA               	movwf	___ftdiv@cntr
  6640  0B27                     l2393:	
  6641  0B27  3001               	movlw	1
  6642  0B28                     u3385:	
  6643  0B28  35AB               	lslf	___ftdiv@f3,f
  6644  0B29  0DAC               	rlf	___ftdiv@f3+1,f
  6645  0B2A  0DAD               	rlf	___ftdiv@f3+2,f
  6646  0B2B  0B89               	decfsz	9,f
  6647  0B2C  2B28               	goto	u3385
  6648  0B2D  0822               	movf	___ftdiv@f2+2,w
  6649  0B2E  0225               	subwf	___ftdiv@f1+2,w
  6650  0B2F  1D03               	skipz
  6651  0B30  2B37               	goto	u3395
  6652  0B31  0821               	movf	___ftdiv@f2+1,w
  6653  0B32  0224               	subwf	___ftdiv@f1+1,w
  6654  0B33  1D03               	skipz
  6655  0B34  2B37               	goto	u3395
  6656  0B35  0820               	movf	___ftdiv@f2,w
  6657  0B36  0223               	subwf	___ftdiv@f1,w
  6658  0B37                     u3395:	
  6659  0B37  1C03               	skipc
  6660  0B38  2B40               	goto	l2401
  6661  0B39  0820               	movf	___ftdiv@f2,w
  6662  0B3A  02A3               	subwf	___ftdiv@f1,f
  6663  0B3B  0821               	movf	___ftdiv@f2+1,w
  6664  0B3C  3BA4               	subwfb	___ftdiv@f1+1,f
  6665  0B3D  0822               	movf	___ftdiv@f2+2,w
  6666  0B3E  3BA5               	subwfb	___ftdiv@f1+2,f
  6667  0B3F  142B               	bsf	___ftdiv@f3,0
  6668  0B40                     l2401:	
  6669  0B40  3001               	movlw	1
  6670  0B41                     u3405:	
  6671  0B41  35A3               	lslf	___ftdiv@f1,f
  6672  0B42  0DA4               	rlf	___ftdiv@f1+1,f
  6673  0B43  0DA5               	rlf	___ftdiv@f1+2,f
  6674  0B44  0B89               	decfsz	9,f
  6675  0B45  2B41               	goto	u3405
  6676  0B46  3001               	movlw	1
  6677  0B47  02AA               	subwf	___ftdiv@cntr,f
  6678  0B48  1D03               	btfss	3,2
  6679  0B49  2B27               	goto	l2393
  6680  0B4A  082B               	movf	___ftdiv@f3,w
  6681  0B4B  00F0               	movwf	___ftpack@arg
  6682  0B4C  082C               	movf	___ftdiv@f3+1,w
  6683  0B4D  00F1               	movwf	___ftpack@arg+1
  6684  0B4E  082D               	movf	___ftdiv@f3+2,w
  6685  0B4F  00F2               	movwf	___ftpack@arg+2
  6686  0B50  082E               	movf	___ftdiv@exp,w
  6687  0B51  00A6               	movwf	??___ftdiv
  6688  0B52  0826               	movf	??___ftdiv,w
  6689  0B53  00F3               	movwf	___ftpack@exp
  6690  0B54  082F               	movf	___ftdiv@sign,w
  6691  0B55  00A7               	movwf	??___ftdiv+1
  6692  0B56  0827               	movf	??___ftdiv+1,w
  6693  0B57  00F4               	movwf	___ftpack@sign
  6694  0B58  3189  21D2         	fcall	___ftpack
  6695  0B5A  0870               	movf	?___ftpack,w
  6696  0B5B  0020               	movlb	0	; select bank0
  6697  0B5C  00A0               	movwf	?___ftdiv
  6698  0B5D  0871               	movf	?___ftpack+1,w
  6699  0B5E  00A1               	movwf	?___ftdiv+1
  6700  0B5F  0872               	movf	?___ftpack+2,w
  6701  0B60  00A2               	movwf	?___ftdiv+2
  6702  0B61  0008               	return
  6703  0B62                     __end_of___ftdiv:	
  6704                           
  6705                           	psect	text26
  6706  0004                     __ptext26:	
  6707 ;; *************** function ___awtoft *****************
  6708 ;; Defined at:
  6709 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;  c               2    8[COMMON] int 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;  sign            1   13[COMMON] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  3    8[COMMON] float 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0, pclath, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6723 ;;      Params:         3       0       0       0       0       0       0       0
  6724 ;;      Locals:         1       0       0       0       0       0       0       0
  6725 ;;      Temps:          2       0       0       0       0       0       0       0
  6726 ;;      Totals:         6       0       0       0       0       0       0       0
  6727 ;;Total ram usage:        6 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    1
  6730 ;; This function calls:
  6731 ;;		___ftpack
  6732 ;; This function is called by:
  6733 ;;		_loop
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           
  6738                           ;psect for function ___awtoft
  6739  0004                     ___awtoft:	
  6740                           
  6741                           ;incstack = 0
  6742                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6743  0004  01FD               	clrf	___awtoft@sign
  6744  0005  1FF9               	btfss	___awtoft@c+1,7
  6745  0006  280E               	goto	l2363
  6746  0007  09F8               	comf	___awtoft@c,f
  6747  0008  09F9               	comf	___awtoft@c+1,f
  6748  0009  0AF8               	incf	___awtoft@c,f
  6749  000A  1903               	skipnz
  6750  000B  0AF9               	incf	___awtoft@c+1,f
  6751  000C  01FD               	clrf	___awtoft@sign
  6752  000D  0AFD               	incf	___awtoft@sign,f
  6753  000E                     l2363:	
  6754  000E  0878               	movf	___awtoft@c,w
  6755  000F  00F0               	movwf	___ftpack@arg
  6756  0010  0879               	movf	___awtoft@c+1,w
  6757  0011  00F1               	movwf	___ftpack@arg+1
  6758  0012  01F2               	clrf	___ftpack@arg+2
  6759  0013  308E               	movlw	142
  6760  0014  00FB               	movwf	??___awtoft
  6761  0015  087B               	movf	??___awtoft,w
  6762  0016  00F3               	movwf	___ftpack@exp
  6763  0017  087D               	movf	___awtoft@sign,w
  6764  0018  00FC               	movwf	??___awtoft+1
  6765  0019  087C               	movf	??___awtoft+1,w
  6766  001A  00F4               	movwf	___ftpack@sign
  6767  001B  3189  21D2         	fcall	___ftpack
  6768  001D  0870               	movf	?___ftpack,w
  6769  001E  00F8               	movwf	?___awtoft
  6770  001F  0871               	movf	?___ftpack+1,w
  6771  0020  00F9               	movwf	?___awtoft+1
  6772  0021  0872               	movf	?___ftpack+2,w
  6773  0022  00FA               	movwf	?___awtoft+2
  6774  0023  0008               	return
  6775  0024                     __end_of___awtoft:	
  6776                           
  6777                           	psect	text27
  6778  09D2                     __ptext27:	
  6779 ;; *************** function ___ftpack *****************
  6780 ;; Defined at:
  6781 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  arg             3    0[COMMON] unsigned um
  6784 ;;  exp             1    3[COMMON] unsigned char 
  6785 ;;  sign            1    4[COMMON] unsigned char 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  3    0[COMMON] float 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, status,0
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6797 ;;      Params:         5       0       0       0       0       0       0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0       0
  6799 ;;      Temps:          3       0       0       0       0       0       0       0
  6800 ;;      Totals:         8       0       0       0       0       0       0       0
  6801 ;;Total ram usage:        8 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		___awtoft
  6807 ;;		___ftadd
  6808 ;;		___ftdiv
  6809 ;;		___ftmul
  6810 ;;		___lltoft
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           
  6815                           ;psect for function ___ftpack
  6816  09D2                     ___ftpack:	
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6820  09D2  0873               	movf	___ftpack@exp,w
  6821  09D3  1903               	btfsc	3,2
  6822  09D4  29DA               	goto	l1605
  6823  09D5  0872               	movf	___ftpack@arg+2,w
  6824  09D6  0471               	iorwf	___ftpack@arg+1,w
  6825  09D7  0470               	iorwf	___ftpack@arg,w
  6826  09D8  1D03               	skipz
  6827  09D9  29EB               	goto	l1611
  6828  09DA                     l1605:	
  6829  09DA  3000               	movlw	0
  6830  09DB  00F0               	movwf	?___ftpack
  6831  09DC  3000               	movlw	0
  6832  09DD  00F1               	movwf	?___ftpack+1
  6833  09DE  3000               	movlw	0
  6834  09DF  00F2               	movwf	?___ftpack+2
  6835  09E0  0008               	return
  6836  09E1                     l1609:	
  6837  09E1  3001               	movlw	1
  6838  09E2  00F5               	movwf	??___ftpack
  6839  09E3  0875               	movf	??___ftpack,w
  6840  09E4  07F3               	addwf	___ftpack@exp,f
  6841  09E5  3001               	movlw	1
  6842  09E6                     u1755:	
  6843  09E6  36F2               	lsrf	___ftpack@arg+2,f
  6844  09E7  0CF1               	rrf	___ftpack@arg+1,f
  6845  09E8  0CF0               	rrf	___ftpack@arg,f
  6846  09E9  0B89               	decfsz	9,f
  6847  09EA  29E6               	goto	u1755
  6848  09EB                     l1611:	
  6849  09EB  30FE               	movlw	254
  6850  09EC  0572               	andwf	___ftpack@arg+2,w
  6851  09ED  1903               	btfsc	3,2
  6852  09EE  2A04               	goto	l450
  6853  09EF  29E1               	goto	l1609
  6854  09F0                     l1613:	
  6855  09F0  3001               	movlw	1
  6856  09F1  00F5               	movwf	??___ftpack
  6857  09F2  0875               	movf	??___ftpack,w
  6858  09F3  07F3               	addwf	___ftpack@exp,f
  6859  09F4  3001               	movlw	1
  6860  09F5  07F0               	addwf	___ftpack@arg,f
  6861  09F6  3000               	movlw	0
  6862  09F7  1803               	skipnc
  6863  09F8  3001               	movlw	1
  6864  09F9  07F1               	addwf	___ftpack@arg+1,f
  6865  09FA  3000               	movlw	0
  6866  09FB  1803               	skipnc
  6867  09FC  3001               	movlw	1
  6868  09FD  07F2               	addwf	___ftpack@arg+2,f
  6869  09FE  3001               	movlw	1
  6870  09FF                     u1775:	
  6871  09FF  36F2               	lsrf	___ftpack@arg+2,f
  6872  0A00  0CF1               	rrf	___ftpack@arg+1,f
  6873  0A01  0CF0               	rrf	___ftpack@arg,f
  6874  0A02  0B89               	decfsz	9,f
  6875  0A03  29FF               	goto	u1775
  6876  0A04                     l450:	
  6877  0A04  30FF               	movlw	255
  6878  0A05  0572               	andwf	___ftpack@arg+2,w
  6879  0A06  1903               	btfsc	3,2
  6880  0A07  2A11               	goto	l1621
  6881  0A08  29F0               	goto	l1613
  6882  0A09                     l1619:	
  6883  0A09  3001               	movlw	1
  6884  0A0A  02F3               	subwf	___ftpack@exp,f
  6885  0A0B  3001               	movlw	1
  6886  0A0C                     u1795:	
  6887  0A0C  35F0               	lslf	___ftpack@arg,f
  6888  0A0D  0DF1               	rlf	___ftpack@arg+1,f
  6889  0A0E  0DF2               	rlf	___ftpack@arg+2,f
  6890  0A0F  0B89               	decfsz	9,f
  6891  0A10  2A0C               	goto	u1795
  6892  0A11                     l1621:	
  6893  0A11  1FF1               	btfss	___ftpack@arg+1,7
  6894  0A12  2A09               	goto	l1619
  6895  0A13  1873               	btfsc	___ftpack@exp,0
  6896  0A14  2A1B               	goto	l456
  6897  0A15  30FF               	movlw	255
  6898  0A16  05F0               	andwf	___ftpack@arg,f
  6899  0A17  307F               	movlw	127
  6900  0A18  05F1               	andwf	___ftpack@arg+1,f
  6901  0A19  30FF               	movlw	255
  6902  0A1A  05F2               	andwf	___ftpack@arg+2,f
  6903  0A1B                     l456:	
  6904  0A1B  1003               	clrc
  6905  0A1C  0CF3               	rrf	___ftpack@exp,f
  6906  0A1D  0873               	movf	___ftpack@exp,w
  6907  0A1E  00F5               	movwf	??___ftpack
  6908  0A1F  01F6               	clrf	??___ftpack+1
  6909  0A20  01F7               	clrf	??___ftpack+2
  6910  0A21  3010               	movlw	16
  6911  0A22                     u1825:	
  6912  0A22  35F5               	lslf	??___ftpack,f
  6913  0A23  0DF6               	rlf	??___ftpack+1,f
  6914  0A24  0DF7               	rlf	??___ftpack+2,f
  6915  0A25  0B89               	decfsz	9,f
  6916  0A26  2A22               	goto	u1825
  6917  0A27  0875               	movf	??___ftpack,w
  6918  0A28  04F0               	iorwf	___ftpack@arg,f
  6919  0A29  0876               	movf	??___ftpack+1,w
  6920  0A2A  04F1               	iorwf	___ftpack@arg+1,f
  6921  0A2B  0877               	movf	??___ftpack+2,w
  6922  0A2C  04F2               	iorwf	___ftpack@arg+2,f
  6923  0A2D  0874               	movf	___ftpack@sign,w
  6924  0A2E  1903               	btfsc	3,2
  6925  0A2F  0008               	return
  6926  0A30  17F2               	bsf	___ftpack@arg+2,7
  6927  0A31  0008               	return
  6928  0A32                     __end_of___ftpack:	
  6929  007E                     btemp	set	126	;btemp
  6930  007E                     pic14e$flags	set	126
  6931  007E                     wtemp	set	126
  6932  007E                     wtemp0	set	126
  6933  0080                     wtemp1	set	128
  6934  0082                     wtemp2	set	130
  6935  0084                     wtemp3	set	132
  6936  0086                     wtemp4	set	134
  6937  0088                     wtemp5	set	136
  6938  007F                     wtemp6	set	127
  6939  007E                     ttemp	set	126
  6940  007E                     ttemp0	set	126
  6941  0081                     ttemp1	set	129
  6942  0084                     ttemp2	set	132
  6943  0087                     ttemp3	set	135
  6944  007F                     ttemp4	set	127
  6945  007E                     ltemp	set	126
  6946  007E                     ltemp0	set	126
  6947  0082                     ltemp1	set	130
  6948  0086                     ltemp2	set	134
  6949  0080                     ltemp3	set	128


Data Sizes:
    Strings     17
    Constant    118
    Data        0
    BSS         33
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      80
    BANK1            80     34      72
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 30
		 -> buffer(BANK1[30]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S449$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    putsEUSART@buffer	PTR unsigned char  size(1) Largest target is 30
		 -> buffer(BANK1[30]), 


Critical Paths under _main in COMMON

    _loop->___awtoft
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    _putsEUSART->_writeEUSART
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _loop->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52178
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
                         _openEUSART
 ---------------------------------------------------------------------------------
 (2) _openEUSART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _loop                                                 2     2      0   52178
                                             76 BANK0      2     2      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                         _busyEUSART
                          _convertir
                         _putsEUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             51    46      5   42623
                                             65 BANK0     11     6      5
                                              0 BANK1     34    34      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               12     9      3   10374
                                             32 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              17    14      3   10176
                                             32 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2524
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    4333
                                             16 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1580
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     431
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     574
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     543
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     418
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     444
                                             41 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3356
                                             59 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             46 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     648
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) _putsEUSART                                           1     1      0      96
                                              1 COMMON     1     1      0
                         _busyEUSART
                        _writeEUSART
 ---------------------------------------------------------------------------------
 (3) _writeEUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _busyEUSART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _convertir                                           11     9      2     197
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2623
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2306
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _busyEUSART
     _convertir
     _putsEUSART
       _busyEUSART
       _writeEUSART
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _setup
     _openEUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A6       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4E      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     22      48       8       90.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      A6      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jun 02 11:47:13 2015

            __CFG_CP$OFF 0000                       l32 087D                       l48 0CCC  
           ___awdiv@sign 0021      ___wmul@multiplicand 0026             ___ftadd@exp1 005A  
           ___ftadd@exp2 0059             ___ftadd@sign 0058                      l151 04DE  
                    l146 03B7                      l272 17CC                      l505 0C47  
                    l450 0A04                      l456 0A1B                      l479 0E3E  
           __CFG_CPD$OFF 0000                      _ant 00E3                      _neg 00E6  
                    _pos 006E             ___awmod@sign 0076             __CFG_BORV$LO 0000  
                    wreg 0009              _sprintf$462 00A3              _sprintf$883 00A0  
           __CFG_LVP$OFF 0000             ___ftdiv@cntr 002A             ___ftdiv@sign 002F  
                   l2101 0AA2                     l2005 00F2                     l2023 012C  
                   l2015 0111                     l2105 0AB0                     l2025 0135  
                   l2017 011F                     l2035 083F                     l2115 093C  
                   l2027 0138                     l2125 096A                     l2117 094A  
                   l2141 08B9                     l2301 06A8                     l2039 0855  
                   l2071 0A4B                     l2231 04C7                     l2223 047A  
                   l2207 0416                     l2401 0B40                     l2129 0975  
                   l2145 08D1                     l2313 06EB                     l1611 09EB  
                   l2091 0A89                     l2139 08AB                     l2307 06C5  
                   l1621 0A11                     l1613 09F0                     l1605 09DA  
                   l2149 08DC                     l2157 0805                     l2261 059A  
                   l2245 054A                     l2237 0513                     l2421 0D7F  
                   l2159 0815                     l2335 07CE                     l2271 05EE  
                   l2191 03B9                     l2343 0399                     l2423 0D94  
                   l1609 09E1                     l2097 0A96                     l2089 0A7B  
                   l1721 0925                     l1713 0914                     l1633 17C5  
                   l2329 07BB                     l2265 05E8                     l2249 055E  
                   l2337 07D3                     l2193 03CF                     l2345 07F0  
                   l2417 0D2D                     l1619 0A09                     l2363 000E  
                   l2099 0A9F                     l1651 0989                     l1707 08FC  
                   l1803 0B79                     l2187 03B4                     l2373 0AD0  
                   l2349 1795                     l1733 0DC7                     l1709 0908  
                   l1717 091D                     l1821 0BCA                     l2293 0640  
                   l1743 0DDD                     l1911 0313                     l1903 026C  
                   l2295 0695                     l2279 0625                     l2393 0B27  
                   l1761 0E0A                     l1737 0DCE                     l1657 0994  
                   l1833 0BE6                     l1825 0BD2                     l1809 0B8F  
                   l2379 0AE6                     l1763 0E14                     l1755 0DF7  
                   l1683 09CB                     l1675 09BA                     l1667 099C  
                   l1853 176F                     l1773 0E30                     l1765 0E19  
                   l1941 0C68                     l1669 09A8                     l1837 0BEE  
                   l1917 0374                     l1783 0E62                     l1775 0E3A  
                   l1767 0E1D                     l1927 0C2F                     l1679 09C3  
                   l1695 08EF                     l1793 0E7D                     l1961 0CAA  
                   l1779 0E50                     l1971 0CC3                     l1699 08F6  
                   l1981 0042                     l1949 0C82                     l1877 0FD3  
                   l1869 0F59                     l1893 01EE                     l1967 0CB7  
                   l1959 0C9C                     l1969 0CC0                     l1987 005F  
                   l1899 024F                     l1997 00AA                     STR_1 1076  
                   u2015 08FF                     u2035 090E                     u3005 08D2  
                   u2045 0915                     u2225 0E1E                     u3025 080A  
                   u2165 0DF8                     u2405 0BF5                     u2325 0B9B  
                   u3205 0619                     u2255 0E31                     u2335 0BAB  
                   u3135 04EA                     u3145 051F                     u2195 0E0B  
                   u2355 0BD3                     u3405 0B41                     u2525 0C69  
                   u2365 0BD9                     u3245 06B3                     u2615 0CB8  
                   u2535 0C79                     u3255 06C1                     u3175 0548  
                   u3095 042B                     u1825 0A22                     u2705 0112  
                   u2545 0C83                     u3425 0CFB                     u1755 09E6  
                   u1915 099F                     u2395 0BEF                     u3435 0D3C  
                   u3365 0AF8                     u2805 0A52                     u1775 09FF  
                   u3375 0B08                     u2735 012D                     u2655 00AB  
                   u1935 09A9                     u1855 17CD                     u3385 0B28  
                   u3457 0878                     u2905 093F                     u2665 00D5  
                   u2585 0C9D                     u1945 09B3                     u1865 17D2  
                   u1795 0A0C                     u3395 0B37                     u2835 0A7C  
                   u1955 09BB                     u2925 094B                     u2935 095F  
                   u2865 0A97                     u2945 096B                     u2975 08AE  
                   u2995 08C7             __CFG_WRT$OFF 0000                     _main 1771  
           ___ftpack@arg 0070                     _loop 0CCC             ___ftpack@exp 0073  
                   fsr0h 0005                     fsr1h 0007                     fsr0l 0004  
                   indf0 0000                     indf1 0001                     fsr1l 0006  
                   btemp 007E                     ltemp 007E                     start 0002  
                   ttemp 007E                     wtemp 007E            __CFG_IESO$OFF 0000  
           ___ftmul@cntr 003E             ___ftmul@sign 003F              _writeEUSART 175F  
           ___fttol@exp1 0056             ___fttol@lval 0052                    ?_main 0070  
        __end_of___awdiv 09D2                    ?_loop 0070          __end_of___ftadd 0E95  
          __CFG_WDTE$OFF 0000          __end_of___awmod 092C          __end_of___ftdiv 0B62  
        __end_of___ftneg 1780          __end_of___lldiv 097E          __end_of___ftmul 0C16  
        ___awdiv@divisor 0077          __end_of___llmod 08E5          __end_of___ftsub 17C3  
        __end_of___fttol 0AB9          ___awdiv@counter 0020                    _RCREG 0199  
                  _RCSTA 019D                    _SPBRG 019B                    _PORTA 000C  
                  _TXREG 019A                    _TXSTA 019E             ___lltoft@exp 007D  
         __CFG_FCMEN$OFF 0000            ___awtoft@sign 007D          __end_of_dpowers 1028  
                  _scale 0141            ___ftpack@sign 0074                    _setup 17E1  
         __CFG_BOREN$OFF 0000                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __end_of_sprintf 07F5           __CFG_MCLRE$OFF 0000          __initialization 07F5  
           __end_of_main 1778             __end_of_loop 0D9F                   ??_main 007E  
          ___fttol@sign1 0051                   ??_loop 006C           __CFG_PLLEN$OFF 0000  
   __size_of__tdiv_to_l_ 00B6         ___llmod@dividend 0074                   ?_scale 0040  
                 _ADRESH 009C                   _ADRESL 009B         ___awdiv@dividend 0079  
                 ?_setup 0070         __end_of___awtoft 0024         __end_of___ftpack 0A32  
       __end_of___lltoft 0829           __CFG_PWRTE$OFF 0000         __end_of__powers_ 1076  
                 ___ftge 0829                   ___wmul 17C3                ??___awdiv 007B  
              ??___ftadd 0054                ??___awmod 0074                ??___ftdiv 0026  
              ??___ftneg 0073                ??___lldiv 0078                ??___ftmul 0036  
              ??___llmod 0078                ??___ftsub 007E                ??___fttol 004D  
                 _buffer 00C5                   _fround 0E95         ___awdiv@quotient 0022  
        ___awmod@divisor 0070                   _result 00C2          ___awmod@counter 0075  
  ___ftmul@f3_as_product 003B                ??_sprintf 0066  __end_of__initialization 07FC  
             ___ftadd@f1 004E               ___ftadd@f2 0051               ___ftge@ff1 0070  
             ___ftge@ff2 0073               ___ftdiv@f1 0023               ___ftdiv@f2 0020  
             ___ftdiv@f3 002B               ___ftneg@f1 0070               ___awtoft@c 0078  
             ___ftmul@f1 0030               ___ftmul@f2 0033               ___ftsub@f1 005E  
             ___ftsub@f2 005B               ___fttol@f1 0049           __pcstackCOMMON 0070  
             ___lltoft@c 0078            __end_of_scale 0391            __end_of_setup 1800  
             __div_to_l_ 0024          __div_to_l_@exp1 0025          __div_to_l_@cntr 0024  
           sprintf@integ 00B8                  ??_scale 0043          __div_to_l_@quot 0020  
                ??_setup 0070       __size_of_convertir 003F               __pbssBANK1 00C2  
          __div_to_l_@f1 0070            __div_to_l_@f2 0073               __pmaintext 1771  
                ?___ftge 0070             ?_writeEUSART 0070                  ?___wmul 0024  
                ?_fround 0040                ?___awtoft 0078                ?___ftpack 0070  
              ?___lltoft 0078          writeEUSART@data 0070               _busyEUSART 176A  
      __end_of__npowers_ 104F          __size_of___ftge 003B                  ___awdiv 097E  
                ___ftadd 0D9F                  ___awmod 08E5                  ___ftdiv 0AB9  
                ___ftneg 1778                  ___lldiv 092C          __size_of___wmul 001E  
                ___ftmul 0B62                  ___llmod 08A3                  ___ftsub 17AA  
                ___fttol 0A32               _fround$880 004A               _fround$881 0047  
        __CFG_STVREN$OFF 0000        __end_of_convertir 08A3               ??___awtoft 007B  
             ??___ftpack 0075          __size_of_fround 016B               ??___lltoft 007C  
                __ptext1 17E1                  __ptext2 1780                  __ptext3 0CCC  
                __ptext4 0391                  __ptext5 0141                  __ptext6 0E95  
                __ptext7 17C3                  __ptext8 0B62                  __ptext9 08E5  
            ?__div_to_l_ 0070                  _dpowers 1000         ___awmod@dividend 0072  
             _openEUSART 1780                  _sprintf 0391                  clrloop0 1765  
   end_of_initialization 07FC          ___lldiv@divisor 0070          ___lldiv@counter 007D  
              _RCSTAbits 019D             __pstringtext 1000           __tdiv_to_l_@f1 0070  
         __tdiv_to_l_@f2 0073            ??__tdiv_to_l_ 0076         __CFG_FOSC$INTOSC 0000  
             _putsEUSART 1794                _TRISAbits 008C                _TRISCbits 008E  
            ?_busyEUSART 0070              ___ftdiv@exp 002E                _TXSTAbits 019E  
    __size_of__div_to_l_ 011D              ___ftmul@exp 003A         convertir@channel 0070  
         __end_of___ftge 0864           __end_of___wmul 17E1     __size_of_writeEUSART 0005  
            _BAUDCONbits 019F           __end_of_fround 1000               convertir@i 0079  
    start_initialization 07F5              ?_openEUSART 0070      __end_of__tdiv_to_l_ 0CCC  
        ___llmod@divisor 0070          ___llmod@counter 0079                 ??___ftge 0076  
               ??___wmul 007C            sprintf@vd_464 00AC                 ??_fround 0043  
    __size_of_busyEUSART 0007               fround@prec 004D        __size_of___awtoft 0020  
      __size_of___ftpack 0060        __size_of___lltoft 0028                ___latbits 0002  
            ?_putsEUSART 0070            __pcstackBANK0 0020            __pcstackBANK1 00A0  
    __end_of__stringdata 1087              sprintf@_val 00B4              sprintf@flag 00B0  
            sprintf@fval 00BE              sprintf@prec 00B2                __pnvBANK0 006E  
              __pnvBANK1 00E3      __size_of_openEUSART 0014                 ?___awdiv 0077  
               ?___ftadd 004E                 ?___awmod 0070                 ?___ftdiv 0020  
               ?___ftneg 0070                 ?___lldiv 0070                 ?___ftmul 0030  
               ?___llmod 0070                 ?___ftsub 005B                __npowers_ 1028  
               ?___fttol 0049              __tdiv_to_l_ 0C16             ??__div_to_l_ 0076  
              _convertir 0864                _scale$882 0045                 ?_sprintf 0061  
         __size_of_scale 0250           __size_of_setup 001F           ___wmul@product 007C  
              clear_ram0 1764                 _PIR1bits 0011       __end_of__div_to_l_ 0141  
    __size_of_putsEUSART 0016               _ADCON0bits 009D               _ADCON1bits 009E  
            __stringdata 1076        ___wmul@multiplier 0024               ?_convertir 0070  
           ??_busyEUSART 0070         __size_of___awdiv 0054         __size_of___ftadd 00F6  
       __size_of___awmod 0047         __size_of___ftdiv 00A9         __size_of___ftneg 0008  
       __size_of___lldiv 0052         __size_of___ftmul 00B4         __size_of___llmod 0042  
       __size_of___ftsub 0019         __size_of___fttol 0087                 ___awtoft 0004  
               ___ftpack 09D2                 ___lltoft 0801               _ANSELAbits 018C  
     __end_of_busyEUSART 1771               sprintf@exp 00BB             ??_openEUSART 0070  
               __ptext10 097E                 __ptext11 0C16                 __ptext20 0829  
               __ptext12 0024                 __ptext21 1794                 __ptext13 0801  
               __ptext22 175F                 __ptext14 08A3                 __ptext23 176A  
               __ptext15 092C                 __ptext24 0864                 __ptext16 0A32  
               __ptext25 0AB9                 __ptext17 17AA                 __ptext26 0004  
               __ptext18 0D9F                 __ptext27 09D2                 __ptext19 1778  
               __powers_ 104F         __size_of_sprintf 0464            __size_of_main 0007  
          __size_of_loop 00D3            ??_writeEUSART 0070       __end_of_openEUSART 1794  
            ??_convertir 0072             ??_putsEUSART 0071              pic14e$flags 007E  
               scale@scl 0048         putsEUSART@buffer 0071                sprintf@ap 00A7  
       __tdiv_to_l_@exp1 0025                sprintf@vd 00A8         __tdiv_to_l_@cntr 0024  
              sprintf@sp 00BD         __tdiv_to_l_@quot 0020         ___lldiv@dividend 0074  
      __CFG_CLKOUTEN$OFF 0000               _OSCCONbits 0099       __end_of_putsEUSART 17AA  
           ?__tdiv_to_l_ 0070      __end_of_writeEUSART 1764                 sprintf@c 00C1  
               sprintf@f 0061         ___lldiv@quotient 0079  

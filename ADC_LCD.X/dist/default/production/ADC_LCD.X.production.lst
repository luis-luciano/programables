

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed May 06 08:57:51 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16LF1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  0010                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001B                     	;# 
    67  001C                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  008E                     	;# 
    73  0090                     	;# 
    74  0091                     	;# 
    75  0092                     	;# 
    76  0093                     	;# 
    77  0095                     	;# 
    78  0096                     	;# 
    79  0097                     	;# 
    80  0098                     	;# 
    81  0099                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  010E                     	;# 
    91  0110                     	;# 
    92  0111                     	;# 
    93  0112                     	;# 
    94  0113                     	;# 
    95  0114                     	;# 
    96  0115                     	;# 
    97  0116                     	;# 
    98  0117                     	;# 
    99  0118                     	;# 
   100  0119                     	;# 
   101  011A                     	;# 
   102  011B                     	;# 
   103  011D                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0191                     	;# 
   107  0191                     	;# 
   108  0192                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0194                     	;# 
   113  0195                     	;# 
   114  0196                     	;# 
   115  0199                     	;# 
   116  019A                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019C                     	;# 
   122  019C                     	;# 
   123  019D                     	;# 
   124  019E                     	;# 
   125  019F                     	;# 
   126  020D                     	;# 
   127  0210                     	;# 
   128  0211                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0214                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0217                     	;# 
   136  0291                     	;# 
   137  0291                     	;# 
   138  0292                     	;# 
   139  0293                     	;# 
   140  0294                     	;# 
   141  0295                     	;# 
   142  0295                     	;# 
   143  0296                     	;# 
   144  0298                     	;# 
   145  0298                     	;# 
   146  0299                     	;# 
   147  029A                     	;# 
   148  029B                     	;# 
   149  029C                     	;# 
   150  029C                     	;# 
   151  029D                     	;# 
   152  029E                     	;# 
   153  029F                     	;# 
   154  0311                     	;# 
   155  0311                     	;# 
   156  0312                     	;# 
   157  0313                     	;# 
   158  0314                     	;# 
   159  0315                     	;# 
   160  0315                     	;# 
   161  0316                     	;# 
   162  0318                     	;# 
   163  0318                     	;# 
   164  0319                     	;# 
   165  031A                     	;# 
   166  031C                     	;# 
   167  031C                     	;# 
   168  031D                     	;# 
   169  031E                     	;# 
   170  0394                     	;# 
   171  0395                     	;# 
   172  0396                     	;# 
   173  0415                     	;# 
   174  0416                     	;# 
   175  0417                     	;# 
   176  041C                     	;# 
   177  041D                     	;# 
   178  041E                     	;# 
   179  0791                     	;# 
   180  0792                     	;# 
   181  0793                     	;# 
   182  0794                     	;# 
   183  0795                     	;# 
   184  0798                     	;# 
   185  0799                     	;# 
   186  07A0                     	;# 
   187  07A1                     	;# 
   188  07A3                     	;# 
   189  07A4                     	;# 
   190  07A6                     	;# 
   191  07A7                     	;# 
   192  07A9                     	;# 
   193  07AA                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEF                     	;# 
   205                           
   206                           	psect	stringtext
   207  1000                     __pstringtext:	
   208  1000                     _dpowers:	
   209  1000  3401               	retlw	1
   210  1001  3400               	retlw	0
   211  1002  3400               	retlw	0
   212  1003  3400               	retlw	0
   213  1004  340A               	retlw	10
   214  1005  3400               	retlw	0
   215  1006  3400               	retlw	0
   216  1007  3400               	retlw	0
   217  1008  3464               	retlw	100
   218  1009  3400               	retlw	0
   219  100A  3400               	retlw	0
   220  100B  3400               	retlw	0
   221  100C  34E8               	retlw	232
   222  100D  3403               	retlw	3
   223  100E  3400               	retlw	0
   224  100F  3400               	retlw	0
   225  1010  3410               	retlw	16
   226  1011  3427               	retlw	39
   227  1012  3400               	retlw	0
   228  1013  3400               	retlw	0
   229  1014  34A0               	retlw	160
   230  1015  3486               	retlw	134
   231  1016  3401               	retlw	1
   232  1017  3400               	retlw	0
   233  1018  3440               	retlw	64
   234  1019  3442               	retlw	66
   235  101A  340F               	retlw	15
   236  101B  3400               	retlw	0
   237  101C  3480               	retlw	128
   238  101D  3496               	retlw	150
   239  101E  3498               	retlw	152
   240  101F  3400               	retlw	0
   241  1020  3400               	retlw	0
   242  1021  34E1               	retlw	225
   243  1022  34F5               	retlw	245
   244  1023  3405               	retlw	5
   245  1024  3400               	retlw	0
   246  1025  34CA               	retlw	202
   247  1026  349A               	retlw	154
   248  1027  343B               	retlw	59
   249  1028                     __end_of_dpowers:	
   250  1028                     __npowers_:	
   251  1028  3400               	retlw	0
   252  1029  3480               	retlw	128
   253  102A  343F               	retlw	63
   254  102B  34CD               	retlw	205
   255  102C  34CC               	retlw	204
   256  102D  343D               	retlw	61
   257  102E  34D7               	retlw	215
   258  102F  3423               	retlw	35
   259  1030  343C               	retlw	60
   260  1031  3412               	retlw	18
   261  1032  3483               	retlw	131
   262  1033  343A               	retlw	58
   263  1034  34B7               	retlw	183
   264  1035  34D1               	retlw	209
   265  1036  3438               	retlw	56
   266  1037  34C6               	retlw	198
   267  1038  3427               	retlw	39
   268  1039  3437               	retlw	55
   269  103A  3438               	retlw	56
   270  103B  3486               	retlw	134
   271  103C  3435               	retlw	53
   272  103D  34C0               	retlw	192
   273  103E  34D6               	retlw	214
   274  103F  3433               	retlw	51
   275  1040  34CC               	retlw	204
   276  1041  342B               	retlw	43
   277  1042  3432               	retlw	50
   278  1043  3470               	retlw	112
   279  1044  3489               	retlw	137
   280  1045  3430               	retlw	48
   281  1046  34E7               	retlw	231
   282  1047  34DB               	retlw	219
   283  1048  342E               	retlw	46
   284  1049  34E5               	retlw	229
   285  104A  343C               	retlw	60
   286  104B  341E               	retlw	30
   287  104C  3442               	retlw	66
   288  104D  34A2               	retlw	162
   289  104E  340D               	retlw	13
   290  104F                     __end_of__npowers_:	
   291  104F                     __powers_:	
   292  104F  3400               	retlw	0
   293  1050  3480               	retlw	128
   294  1051  343F               	retlw	63
   295  1052  3400               	retlw	0
   296  1053  3420               	retlw	32
   297  1054  3441               	retlw	65
   298  1055  3400               	retlw	0
   299  1056  34C8               	retlw	200
   300  1057  3442               	retlw	66
   301  1058  3400               	retlw	0
   302  1059  347A               	retlw	122
   303  105A  3444               	retlw	68
   304  105B  3440               	retlw	64
   305  105C  341C               	retlw	28
   306  105D  3446               	retlw	70
   307  105E  3450               	retlw	80
   308  105F  34C3               	retlw	195
   309  1060  3447               	retlw	71
   310  1061  3424               	retlw	36
   311  1062  3474               	retlw	116
   312  1063  3449               	retlw	73
   313  1064  3497               	retlw	151
   314  1065  3418               	retlw	24
   315  1066  344B               	retlw	75
   316  1067  34BC               	retlw	188
   317  1068  34BE               	retlw	190
   318  1069  344C               	retlw	76
   319  106A  346B               	retlw	107
   320  106B  346E               	retlw	110
   321  106C  344E               	retlw	78
   322  106D  3403               	retlw	3
   323  106E  3415               	retlw	21
   324  106F  3450               	retlw	80
   325  1070  3479               	retlw	121
   326  1071  34AD               	retlw	173
   327  1072  3460               	retlw	96
   328  1073  34F3               	retlw	243
   329  1074  3449               	retlw	73
   330  1075  3471               	retlw	113
   331  1076                     __end_of__powers_:	
   332  000C                     _PORTAbits	set	12
   333  000D                     _PORTBbits	set	13
   334  009D                     _ADCON0bits	set	157
   335  009E                     _ADCON1bits	set	158
   336  009C                     _ADRESH	set	156
   337  009B                     _ADRESL	set	155
   338  0099                     _OSCCONbits	set	153
   339  008C                     _TRISAbits	set	140
   340  008D                     _TRISBbits	set	141
   341  018C                     _ANSELAbits	set	396
   342  018D                     _ANSELB	set	397
   343  1076                     __stringdata:	
   344  1076                     STR_1:	
   345  1076  3456               	retlw	86	;'V'
   346  1077  3444               	retlw	68	;'D'
   347  1078  3444               	retlw	68	;'D'
   348  1079  343D               	retlw	61	;'='
   349  107A  3425               	retlw	37	;'%'
   350  107B  3466               	retlw	102	;'f'
   351  107C  3400               	retlw	0
   352  107D                     __end_of__stringdata:	
   353                           
   354                           ; #config settings
   355  0000                     
   356                           	psect	cinit
   357  07F1                     start_initialization:	
   358  07F1                     __initialization:	
   359                           
   360                           ; Clear objects allocated to BANK0
   361  07F1  01EA               	clrf	__pbssBANK0& (0+127)
   362  07F2  01EB               	clrf	(__pbssBANK0+1)& (0+127)
   363  07F3  01EC               	clrf	(__pbssBANK0+2)& (0+127)
   364  07F4  01ED               	clrf	(__pbssBANK0+3)& (0+127)
   365                           
   366                           ; Clear objects allocated to BANK1
   367  07F5  30C2               	movlw	low __pbssBANK1
   368  07F6  0084               	movwf	4
   369  07F7  3000               	movlw	high __pbssBANK1
   370  07F8  0085               	movwf	5
   371  07F9  3021               	movlw	33
   372  07FA  3196  2623         	fcall	clear_ram0
   373  07FC                     end_of_initialization:	
   374                           ;End of C runtime variable initialization code
   375                           
   376  07FC                     __end_of__initialization:	
   377  07FC  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   378  07FD  0020               	movlb	0
   379  07FE  3196  2E29         	ljmp	_main	;jump to C main() function
   380                           
   381                           	psect	bssBANK0
   382  006A                     __pbssBANK0:	
   383  006A                     _i:	
   384  006A                     	ds	2
   385  006C                     _j:	
   386  006C                     	ds	2
   387                           
   388                           	psect	bssBANK1
   389  00C2                     __pbssBANK1:	
   390  00C2                     _valor:	
   391  00C2                     	ds	3
   392  00C5                     _buffer:	
   393  00C5                     	ds	30
   394                           
   395                           	psect	clrtext
   396  1623                     clear_ram0:	
   397                           ;	Called with FSR0 containing the base address, and
   398                           ;	WREG with the size to clear
   399                           
   400  1623  0064               	clrwdt	;clear the watchdog before getting into this loop
   401  1624                     clrloop0:	
   402  1624  0180               	clrf	0	;clear RAM location pointed to by FSR
   403  1625  3101               	addfsr 0,1
   404  1626  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   405  1627  2E24               	goto	clrloop0	;have we reached the end yet?
   406  1628  3400               	retlw	0	;all done for this memory range, return
   407                           
   408                           	psect	cstackBANK1
   409  00A0                     __pcstackBANK1:	
   410  00A0                     _sprintf$813:	
   411                           
   412                           ; 3 bytes @ 0x0
   413  00A0                     	ds	3
   414  00A3                     _sprintf$398:	
   415                           
   416                           ; 4 bytes @ 0x3
   417  00A3                     	ds	4
   418  00A7                     sprintf@ap:	
   419                           
   420                           ; 1 bytes @ 0x7
   421  00A7                     	ds	1
   422  00A8                     sprintf@vd:	
   423                           
   424                           ; 4 bytes @ 0x8
   425  00A8                     	ds	4
   426  00AC                     sprintf@vd_400:	
   427                           
   428                           ; 4 bytes @ 0xC
   429  00AC                     	ds	4
   430  00B0                     sprintf@flag:	
   431                           
   432                           ; 2 bytes @ 0x10
   433  00B0                     	ds	2
   434  00B2                     sprintf@prec:	
   435                           
   436                           ; 2 bytes @ 0x12
   437  00B2                     	ds	2
   438  00B4                     sprintf@_val:	
   439                           
   440                           ; 4 bytes @ 0x14
   441  00B4                     	ds	4
   442  00B8                     sprintf@integ:	
   443                           
   444                           ; 3 bytes @ 0x18
   445  00B8                     	ds	3
   446  00BB                     sprintf@exp:	
   447                           
   448                           ; 2 bytes @ 0x1B
   449  00BB                     	ds	2
   450  00BD                     sprintf@sp:	
   451                           
   452                           ; 1 bytes @ 0x1D
   453  00BD                     	ds	1
   454  00BE                     sprintf@fval:	
   455                           
   456                           ; 3 bytes @ 0x1E
   457  00BE                     	ds	3
   458  00C1                     sprintf@c:	
   459                           
   460                           ; 1 bytes @ 0x21
   461  00C1                     	ds	1
   462                           
   463                           	psect	cstackCOMMON
   464  0070                     __pcstackCOMMON:	
   465  0070                     ?_Lcd_Cmd:	
   466  0070                     ??_Lcd_Cmd:	
   467                           ; 0 bytes @ 0x0
   468                           
   469  0070                     ?_Lcd_Chr_CP:	
   470                           ; 0 bytes @ 0x0
   471                           
   472  0070                     ??_Lcd_Chr_CP:	
   473                           ; 0 bytes @ 0x0
   474                           
   475  0070                     ?_Lcd_Init:	
   476                           ; 0 bytes @ 0x0
   477                           
   478  0070                     ?_setup:	
   479                           ; 0 bytes @ 0x0
   480                           
   481  0070                     ?_loop:	
   482                           ; 0 bytes @ 0x0
   483                           
   484  0070                     ?_main:	
   485                           ; 0 bytes @ 0x0
   486                           
   487  0070                     ?___ftge:	
   488                           ; 0 bytes @ 0x0
   489                           
   490  0070                     ?___awmod:	
   491                           ; 1 bit 
   492                           
   493  0070                     ?___ftpack:	
   494                           ; 2 bytes @ 0x0
   495                           
   496  0070                     ?___ftneg:	
   497                           ; 3 bytes @ 0x0
   498                           
   499  0070                     ?__tdiv_to_l_:	
   500                           ; 3 bytes @ 0x0
   501                           
   502  0070                     ?__div_to_l_:	
   503                           ; 4 bytes @ 0x0
   504                           
   505  0070                     ?___lldiv:	
   506                           ; 4 bytes @ 0x0
   507                           
   508  0070                     ?___llmod:	
   509                           ; 4 bytes @ 0x0
   510                           
   511  0070                     ___awmod@divisor:	
   512                           ; 4 bytes @ 0x0
   513                           
   514  0070                     __div_to_l_@f1:	
   515                           ; 2 bytes @ 0x0
   516                           
   517  0070                     ___ftpack@arg:	
   518                           ; 3 bytes @ 0x0
   519                           
   520  0070                     __tdiv_to_l_@f1:	
   521                           ; 3 bytes @ 0x0
   522                           
   523  0070                     ___ftge@ff1:	
   524                           ; 3 bytes @ 0x0
   525                           
   526  0070                     ___ftneg@f1:	
   527                           ; 3 bytes @ 0x0
   528                           
   529  0070                     ___lldiv@divisor:	
   530                           ; 3 bytes @ 0x0
   531                           
   532  0070                     ___llmod@divisor:	
   533                           ; 4 bytes @ 0x0
   534                           
   535                           
   536                           ; 4 bytes @ 0x0
   537  0070                     	ds	2
   538  0072                     Lcd_Chr_CP@data:	
   539  0072                     Lcd_Cmd@data:	
   540                           ; 1 bytes @ 0x2
   541                           
   542  0072                     ___awmod@dividend:	
   543                           ; 1 bytes @ 0x2
   544                           
   545                           
   546                           ; 2 bytes @ 0x2
   547  0072                     	ds	1
   548  0073                     ??_Lcd_Init:	
   549  0073                     ?_Lcd_Out:	
   550                           ; 0 bytes @ 0x3
   551                           
   552  0073                     ??___ftneg:	
   553                           ; 0 bytes @ 0x3
   554                           
   555  0073                     Lcd_Out@x:	
   556                           ; 0 bytes @ 0x3
   557                           
   558  0073                     ___ftpack@exp:	
   559                           ; 1 bytes @ 0x3
   560                           
   561  0073                     __div_to_l_@f2:	
   562                           ; 1 bytes @ 0x3
   563                           
   564  0073                     __tdiv_to_l_@f2:	
   565                           ; 3 bytes @ 0x3
   566                           
   567  0073                     ___ftge@ff2:	
   568                           ; 3 bytes @ 0x3
   569                           
   570                           
   571                           ; 3 bytes @ 0x3
   572  0073                     	ds	1
   573  0074                     ??___awmod:	
   574  0074                     Lcd_Init@data:	
   575                           ; 0 bytes @ 0x4
   576                           
   577  0074                     Lcd_Out@buffer:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     ___ftpack@sign:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     ___lldiv@dividend:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0074                     ___llmod@dividend:	
   587                           ; 4 bytes @ 0x4
   588                           
   589                           
   590                           ; 4 bytes @ 0x4
   591  0074                     	ds	1
   592  0075                     ??___ftpack:	
   593  0075                     ??_Lcd_Out:	
   594                           ; 0 bytes @ 0x5
   595                           
   596  0075                     ??_setup:	
   597                           ; 0 bytes @ 0x5
   598                           
   599  0075                     ___awmod@counter:	
   600                           ; 0 bytes @ 0x5
   601                           
   602                           
   603                           ; 1 bytes @ 0x5
   604  0075                     	ds	1
   605  0076                     ??__tdiv_to_l_:	
   606  0076                     ??__div_to_l_:	
   607                           ; 0 bytes @ 0x6
   608                           
   609  0076                     ??___ftge:	
   610                           ; 0 bytes @ 0x6
   611                           
   612  0076                     Lcd_Out@y:	
   613                           ; 0 bytes @ 0x6
   614                           
   615  0076                     ___awmod@sign:	
   616                           ; 1 bytes @ 0x6
   617                           
   618                           
   619                           ; 1 bytes @ 0x6
   620  0076                     	ds	1
   621  0077                     ?___awdiv:	
   622  0077                     Lcd_Out@data:	
   623                           ; 2 bytes @ 0x7
   624                           
   625  0077                     ___awdiv@divisor:	
   626                           ; 1 bytes @ 0x7
   627                           
   628                           
   629                           ; 2 bytes @ 0x7
   630  0077                     	ds	1
   631  0078                     ??___lldiv:	
   632  0078                     ??___llmod:	
   633                           ; 0 bytes @ 0x8
   634                           
   635  0078                     ?___lltoft:	
   636                           ; 0 bytes @ 0x8
   637                           
   638  0078                     ?___lwtoft:	
   639                           ; 3 bytes @ 0x8
   640                           
   641  0078                     ___lwtoft@c:	
   642                           ; 3 bytes @ 0x8
   643                           
   644  0078                     ___lltoft@c:	
   645                           ; 2 bytes @ 0x8
   646                           
   647                           
   648                           ; 4 bytes @ 0x8
   649  0078                     	ds	1
   650  0079                     ___llmod@counter:	
   651  0079                     ___awdiv@dividend:	
   652                           ; 1 bytes @ 0x9
   653                           
   654  0079                     ___lldiv@quotient:	
   655                           ; 2 bytes @ 0x9
   656                           
   657                           
   658                           ; 4 bytes @ 0x9
   659  0079                     	ds	2
   660  007B                     ??___awdiv:	
   661  007B                     ??___lwtoft:	
   662                           ; 0 bytes @ 0xB
   663                           
   664                           
   665                           ; 0 bytes @ 0xB
   666  007B                     	ds	1
   667  007C                     ??___wmul:	
   668  007C                     ??___lltoft:	
   669                           ; 0 bytes @ 0xC
   670                           
   671  007C                     ___wmul@product:	
   672                           ; 0 bytes @ 0xC
   673                           
   674                           
   675                           ; 2 bytes @ 0xC
   676  007C                     	ds	1
   677  007D                     ___lldiv@counter:	
   678  007D                     ___lltoft@exp:	
   679                           ; 1 bytes @ 0xD
   680                           
   681                           
   682                           ; 1 bytes @ 0xD
   683  007D                     	ds	1
   684  007E                     ??_main:	
   685  007E                     ??___ftsub:	
   686                           ; 0 bytes @ 0xE
   687                           
   688                           
   689                           	psect	cstackBANK0
   690  0020                     __pcstackBANK0:	
   691                           ; 0 bytes @ 0xE
   692                           
   693  0020                     ___awdiv@counter:	
   694  0020                     __div_to_l_@quot:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0020                     __tdiv_to_l_@quot:	
   698                           ; 4 bytes @ 0x0
   699                           
   700                           
   701                           ; 4 bytes @ 0x0
   702  0020                     	ds	1
   703  0021                     ___awdiv@sign:	
   704                           
   705                           ; 1 bytes @ 0x1
   706  0021                     	ds	1
   707  0022                     ___awdiv@quotient:	
   708                           
   709                           ; 2 bytes @ 0x2
   710  0022                     	ds	2
   711  0024                     ?___wmul:	
   712  0024                     __div_to_l_@cntr:	
   713                           ; 2 bytes @ 0x4
   714                           
   715  0024                     __tdiv_to_l_@cntr:	
   716                           ; 1 bytes @ 0x4
   717                           
   718  0024                     ___wmul@multiplier:	
   719                           ; 1 bytes @ 0x4
   720                           
   721                           
   722                           ; 2 bytes @ 0x4
   723  0024                     	ds	1
   724  0025                     __div_to_l_@exp1:	
   725  0025                     __tdiv_to_l_@exp1:	
   726                           ; 1 bytes @ 0x5
   727                           
   728                           
   729                           ; 1 bytes @ 0x5
   730  0025                     	ds	1
   731  0026                     ___wmul@multiplicand:	
   732                           
   733                           ; 2 bytes @ 0x6
   734  0026                     	ds	2
   735  0028                     ?___ftmul:	
   736  0028                     ___ftmul@f1:	
   737                           ; 3 bytes @ 0x8
   738                           
   739                           
   740                           ; 3 bytes @ 0x8
   741  0028                     	ds	3
   742  002B                     ___ftmul@f2:	
   743                           
   744                           ; 3 bytes @ 0xB
   745  002B                     	ds	3
   746  002E                     ??___ftmul:	
   747                           
   748                           ; 0 bytes @ 0xE
   749  002E                     	ds	4
   750  0032                     ___ftmul@exp:	
   751                           
   752                           ; 1 bytes @ 0x12
   753  0032                     	ds	1
   754  0033                     ___ftmul@f3_as_product:	
   755                           
   756                           ; 3 bytes @ 0x13
   757  0033                     	ds	3
   758  0036                     ___ftmul@cntr:	
   759                           
   760                           ; 1 bytes @ 0x16
   761  0036                     	ds	1
   762  0037                     ___ftmul@sign:	
   763                           
   764                           ; 1 bytes @ 0x17
   765  0037                     	ds	1
   766  0038                     ?_fround:	
   767  0038                     ?_scale:	
   768                           ; 3 bytes @ 0x18
   769                           
   770  0038                     ?___ftdiv:	
   771                           ; 3 bytes @ 0x18
   772                           
   773  0038                     ___ftdiv@f2:	
   774                           ; 3 bytes @ 0x18
   775                           
   776                           
   777                           ; 3 bytes @ 0x18
   778  0038                     	ds	3
   779  003B                     ??_fround:	
   780  003B                     ??_scale:	
   781                           ; 0 bytes @ 0x1B
   782                           
   783  003B                     ___ftdiv@f1:	
   784                           ; 0 bytes @ 0x1B
   785                           
   786                           
   787                           ; 3 bytes @ 0x1B
   788  003B                     	ds	2
   789  003D                     _scale$812:	
   790                           
   791                           ; 3 bytes @ 0x1D
   792  003D                     	ds	1
   793  003E                     ??___ftdiv:	
   794                           
   795                           ; 0 bytes @ 0x1E
   796  003E                     	ds	1
   797  003F                     _fround$811:	
   798                           
   799                           ; 3 bytes @ 0x1F
   800  003F                     	ds	1
   801  0040                     scale@scl:	
   802                           
   803                           ; 1 bytes @ 0x20
   804  0040                     	ds	1
   805  0041                     ?___fttol:	
   806  0041                     ___fttol@f1:	
   807                           ; 4 bytes @ 0x21
   808                           
   809                           
   810                           ; 3 bytes @ 0x21
   811  0041                     	ds	1
   812  0042                     ___ftdiv@cntr:	
   813  0042                     _fround$810:	
   814                           ; 1 bytes @ 0x22
   815                           
   816                           
   817                           ; 3 bytes @ 0x22
   818  0042                     	ds	1
   819  0043                     ___ftdiv@f3:	
   820                           
   821                           ; 3 bytes @ 0x23
   822  0043                     	ds	2
   823  0045                     ??___fttol:	
   824  0045                     fround@prec:	
   825                           ; 0 bytes @ 0x25
   826                           
   827                           
   828                           ; 1 bytes @ 0x25
   829  0045                     	ds	1
   830  0046                     ?___ftadd:	
   831  0046                     ___ftdiv@exp:	
   832                           ; 3 bytes @ 0x26
   833                           
   834  0046                     ___ftadd@f1:	
   835                           ; 1 bytes @ 0x26
   836                           
   837                           
   838                           ; 3 bytes @ 0x26
   839  0046                     	ds	1
   840  0047                     ___ftdiv@sign:	
   841                           
   842                           ; 1 bytes @ 0x27
   843  0047                     	ds	2
   844  0049                     ___fttol@sign1:	
   845  0049                     ___ftadd@f2:	
   846                           ; 1 bytes @ 0x29
   847                           
   848                           
   849                           ; 3 bytes @ 0x29
   850  0049                     	ds	1
   851  004A                     ___fttol@lval:	
   852                           
   853                           ; 4 bytes @ 0x2A
   854  004A                     	ds	2
   855  004C                     ??___ftadd:	
   856                           
   857                           ; 0 bytes @ 0x2C
   858  004C                     	ds	2
   859  004E                     ___fttol@exp1:	
   860                           
   861                           ; 1 bytes @ 0x2E
   862  004E                     	ds	2
   863  0050                     ___ftadd@sign:	
   864                           
   865                           ; 1 bytes @ 0x30
   866  0050                     	ds	1
   867  0051                     ___ftadd@exp2:	
   868                           
   869                           ; 1 bytes @ 0x31
   870  0051                     	ds	1
   871  0052                     ___ftadd@exp1:	
   872                           
   873                           ; 1 bytes @ 0x32
   874  0052                     	ds	1
   875  0053                     ?___ftsub:	
   876  0053                     ___ftsub@f2:	
   877                           ; 3 bytes @ 0x33
   878                           
   879                           
   880                           ; 3 bytes @ 0x33
   881  0053                     	ds	3
   882  0056                     ___ftsub@f1:	
   883                           
   884                           ; 3 bytes @ 0x36
   885  0056                     	ds	3
   886  0059                     ?_sprintf:	
   887  0059                     sprintf@f:	
   888                           ; 2 bytes @ 0x39
   889                           
   890                           
   891                           ; 2 bytes @ 0x39
   892  0059                     	ds	5
   893  005E                     ??_sprintf:	
   894                           
   895                           ; 0 bytes @ 0x3E
   896  005E                     	ds	6
   897  0064                     ??_loop:	
   898                           
   899                           ; 0 bytes @ 0x44
   900  0064                     	ds	6
   901                           
   902                           	psect	maintext
   903  1629                     __pmaintext:	
   904 ;;
   905 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   906 ;;
   907 ;; *************** function _main *****************
   908 ;; Defined at:
   909 ;;		line 77 in file "principal.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;		None               void
   916 ;; Registers used:
   917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 17F/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   923 ;;      Params:         0       0       0       0       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0
   926 ;;      Totals:         0       0       0       0       0       0       0       0
   927 ;;Total ram usage:        0 bytes
   928 ;; Hardware stack levels required when called:    5
   929 ;; This function calls:
   930 ;;		_loop
   931 ;;		_setup
   932 ;; This function is called by:
   933 ;;		Startup code after reset
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           
   938                           ;psect for function _main
   939  1629                     _main:	
   940                           
   941                           ;principal.c: 78: setup();
   942                           
   943                           ;incstack = 0
   944                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   945  1629  3196  2669  3196   	fcall	_setup
   946                           
   947                           ;principal.c: 79: loop();
   948  162C  318A  2262         	fcall	_loop
   949                           
   950                           ;principal.c: 80: return;
   951  162E  3180  2802         	ljmp	start
   952  1630                     __end_of_main:	
   953                           
   954                           	psect	text1
   955  1669                     __ptext1:	
   956 ;; *************** function _setup *****************
   957 ;; Defined at:
   958 ;;		line 36 in file "principal.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;		None               void
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, pclath, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   972 ;;      Params:         0       0       0       0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0       0
   975 ;;      Totals:         0       0       0       0       0       0       0       0
   976 ;;Total ram usage:        0 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    2
   979 ;; This function calls:
   980 ;;		_Lcd_Cmd
   981 ;;		_Lcd_Init
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           
   988                           ;psect for function _setup
   989  1669                     _setup:	
   990                           
   991                           ;principal.c: 37: OSCCONbits.IRCF=11;
   992                           
   993                           ;incstack = 0
   994                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   995  1669  0021               	movlb	1	; select bank1
   996  166A  0819               	movf	25,w	;volatile
   997  166B  3987               	andlw	-121
   998  166C  3858               	iorlw	88
   999  166D  0099               	movwf	25	;volatile
  1000                           
  1001                           ;principal.c: 38: ANSELAbits.ANSA0=1;
  1002  166E  0023               	movlb	3	; select bank3
  1003  166F  140C               	bsf	12,0	;volatile
  1004                           
  1005                           ;principal.c: 39: PORTAbits.RA0=0;
  1006  1670  0020               	movlb	0	; select bank0
  1007  1671  100C               	bcf	12,0	;volatile
  1008                           
  1009                           ;principal.c: 40: TRISAbits.TRISA0=1;
  1010  1672  0021               	movlb	1	; select bank1
  1011  1673  140C               	bsf	12,0	;volatile
  1012                           
  1013                           ;principal.c: 41: ADCON0bits.CHS=0;
  1014  1674  3083               	movlw	-125
  1015  1675  059D               	andwf	29,f	;volatile
  1016                           
  1017                           ;principal.c: 42: ADCON0bits.ADON=0;
  1018  1676  101D               	bcf	29,0	;volatile
  1019                           
  1020                           ;principal.c: 43: ADCON0bits.GO=0;
  1021  1677  109D               	bcf	29,1	;volatile
  1022                           
  1023                           ;principal.c: 44: ADCON1bits.ADFM=1;
  1024  1678  179E               	bsf	30,7	;volatile
  1025                           
  1026                           ;principal.c: 45: ADCON1bits.ADCS=6;
  1027  1679  081E               	movf	30,w	;volatile
  1028  167A  398F               	andlw	-113
  1029  167B  3860               	iorlw	96
  1030  167C  009E               	movwf	30	;volatile
  1031                           
  1032                           ;principal.c: 46: ADCON1bits.ADNREF=0;
  1033  167D  111E               	bcf	30,2	;volatile
  1034                           
  1035                           ;principal.c: 47: ADCON1bits.ADPREF=0;
  1036  167E  30FC               	movlw	-4
  1037  167F  059E               	andwf	30,f	;volatile
  1038                           
  1039                           ;principal.c: 48: ADRESL=0x00;
  1040  1680  019B               	clrf	27	;volatile
  1041                           
  1042                           ;principal.c: 49: ADRESH=0x00;
  1043  1681  019C               	clrf	28	;volatile
  1044                           
  1045                           ;principal.c: 50: Lcd_Init();
  1046  1682  318A  22F6  3196   	fcall	_Lcd_Init
  1047                           
  1048                           ;principal.c: 51: Lcd_Cmd(1);
  1049  1685  3001               	movlw	1
  1050  1686  3189  213F  3196   	fcall	_Lcd_Cmd
  1051                           
  1052                           ;principal.c: 52: Lcd_Cmd(12);
  1053  1689  300C               	movlw	12
  1054  168A  3189  213F         	fcall	_Lcd_Cmd
  1055  168C  0008               	return
  1056  168D                     __end_of_setup:	
  1057                           
  1058                           	psect	text2
  1059  0AF6                     __ptext2:	
  1060 ;; *************** function _Lcd_Init *****************
  1061 ;; Defined at:
  1062 ;;		line 58 in file "lcd.h"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  data            1    4[COMMON] unsigned char 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;		None               void
  1069 ;; Registers used:
  1070 ;;		wreg, status,2, status,0, pclath, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1076 ;;      Params:         0       0       0       0       0       0       0       0
  1077 ;;      Locals:         1       0       0       0       0       0       0       0
  1078 ;;      Temps:          1       0       0       0       0       0       0       0
  1079 ;;      Totals:         2       0       0       0       0       0       0       0
  1080 ;;Total ram usage:        2 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    1
  1083 ;; This function calls:
  1084 ;;		_Lcd_Cmd
  1085 ;; This function is called by:
  1086 ;;		_setup
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           
  1091                           ;psect for function _Lcd_Init
  1092  0AF6                     _Lcd_Init:	
  1093                           
  1094                           ;lcd.h: 59: unsigned char data;
  1095                           ;lcd.h: 60: ANSELB=0x00;
  1096                           
  1097                           ;incstack = 0
  1098                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1099  0AF6  0023               	movlb	3	; select bank3
  1100  0AF7  018D               	clrf	13	;volatile
  1101                           
  1102                           ;lcd.h: 61: TRISBbits.TRISB7 = 0;
  1103  0AF8  0021               	movlb	1	; select bank1
  1104  0AF9  138D               	bcf	13,7	;volatile
  1105                           
  1106                           ;lcd.h: 62: TRISBbits.TRISB6 = 0;
  1107  0AFA  130D               	bcf	13,6	;volatile
  1108                           
  1109                           ;lcd.h: 63: TRISBbits.TRISB5 = 0;
  1110  0AFB  128D               	bcf	13,5	;volatile
  1111                           
  1112                           ;lcd.h: 64: TRISBbits.TRISB4 = 0;
  1113  0AFC  120D               	bcf	13,4	;volatile
  1114                           
  1115                           ;lcd.h: 65: TRISBbits.TRISB2 = 0;
  1116  0AFD  110D               	bcf	13,2	;volatile
  1117                           
  1118                           ;lcd.h: 66: TRISBbits.TRISB1 = 0;
  1119  0AFE  108D               	bcf	13,1	;volatile
  1120                           
  1121                           ;lcd.h: 67: PORTBbits.RB7 = 0;
  1122  0AFF  0020               	movlb	0	; select bank0
  1123  0B00  138D               	bcf	13,7	;volatile
  1124                           
  1125                           ;lcd.h: 68: PORTBbits.RB6 = 0;
  1126  0B01  130D               	bcf	13,6	;volatile
  1127                           
  1128                           ;lcd.h: 69: PORTBbits.RB5 = 0;
  1129  0B02  128D               	bcf	13,5	;volatile
  1130                           
  1131                           ;lcd.h: 70: PORTBbits.RB4 = 0;
  1132  0B03  120D               	bcf	13,4	;volatile
  1133                           
  1134                           ;lcd.h: 71: PORTBbits.RB2 = 0;
  1135  0B04  110D               	bcf	13,2	;volatile
  1136                           
  1137                           ;lcd.h: 72: PORTBbits.RB1 = 0;
  1138  0B05  108D               	bcf	13,1	;volatile
  1139                           
  1140                           ;lcd.h: 73: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1141  0B06  30E5               	movlw	229
  1142  0B07  00F3               	movwf	??_Lcd_Init
  1143  0B08                     u3657:	
  1144  0B08  3200               	nop2
  1145  0B09  0000               	nop
  1146  0B0A  0BF3               	decfsz	??_Lcd_Init,f
  1147  0B0B  2B08               	goto	u3657
  1148                           
  1149                           ;lcd.h: 74: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1150  0B0C  30E5               	movlw	229
  1151  0B0D  00F3               	movwf	??_Lcd_Init
  1152  0B0E                     u3667:	
  1153  0B0E  3200               	nop2
  1154  0B0F  0000               	nop
  1155  0B10  0BF3               	decfsz	??_Lcd_Init,f
  1156  0B11  2B0E               	goto	u3667
  1157                           
  1158                           ;lcd.h: 75: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1159  0B12  30E5               	movlw	229
  1160  0B13  00F3               	movwf	??_Lcd_Init
  1161  0B14                     u3677:	
  1162  0B14  3200               	nop2
  1163  0B15  0000               	nop
  1164  0B16  0BF3               	decfsz	??_Lcd_Init,f
  1165  0B17  2B14               	goto	u3677
  1166                           
  1167                           ;lcd.h: 76: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1168  0B18  30E5               	movlw	229
  1169  0B19  00F3               	movwf	??_Lcd_Init
  1170  0B1A                     u3687:	
  1171  0B1A  3200               	nop2
  1172  0B1B  0000               	nop
  1173  0B1C  0BF3               	decfsz	??_Lcd_Init,f
  1174  0B1D  2B1A               	goto	u3687
  1175                           
  1176                           ;lcd.h: 77: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1177  0B1E  30E5               	movlw	229
  1178  0B1F  00F3               	movwf	??_Lcd_Init
  1179  0B20                     u3697:	
  1180  0B20  3200               	nop2
  1181  0B21  0000               	nop
  1182  0B22  0BF3               	decfsz	??_Lcd_Init,f
  1183  0B23  2B20               	goto	u3697
  1184                           
  1185                           ;lcd.h: 78: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1186  0B24  30E5               	movlw	229
  1187  0B25  00F3               	movwf	??_Lcd_Init
  1188  0B26                     u3707:	
  1189  0B26  3200               	nop2
  1190  0B27  0000               	nop
  1191  0B28  0BF3               	decfsz	??_Lcd_Init,f
  1192  0B29  2B26               	goto	u3707
  1193                           
  1194                           ;lcd.h: 79: for(data = 1; data < 4; data ++)
  1195  0B2A  01F4               	clrf	Lcd_Init@data
  1196  0B2B  0AF4               	incf	Lcd_Init@data,f
  1197  0B2C  3004               	movlw	4
  1198  0B2D  0274               	subwf	Lcd_Init@data,w
  1199  0B2E  1803               	btfsc	3,0
  1200  0B2F  2B53               	goto	l34
  1201  0B30                     l33:	
  1202                           
  1203                           ;lcd.h: 80: {
  1204                           ;lcd.h: 81: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 1; 
      +                          PORTBbits.RB2 = 0;
  1205  0B30  0020               	movlb	0	; select bank0
  1206  0B31  138D               	bcf	13,7	;volatile
  1207  0B32  130D               	bcf	13,6	;volatile
  1208  0B33  168D               	bsf	13,5	;volatile
  1209  0B34  160D               	bsf	13,4	;volatile
  1210  0B35  110D               	bcf	13,2	;volatile
  1211                           
  1212                           ;lcd.h: 82: PORTBbits.RB1 = 0; PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; 
      +                          PORTBbits.RB4 = 1;
  1213  0B36  108D               	bcf	13,1	;volatile
  1214  0B37  138D               	bcf	13,7	;volatile
  1215  0B38  130D               	bcf	13,6	;volatile
  1216  0B39  168D               	bsf	13,5	;volatile
  1217  0B3A  160D               	bsf	13,4	;volatile
  1218                           
  1219                           ;lcd.h: 83: PORTBbits.RB2 = 1; PORTBbits.RB1 = 0;
  1220  0B3B  150D               	bsf	13,2	;volatile
  1221  0B3C  108D               	bcf	13,1	;volatile
  1222                           
  1223                           ;lcd.h: 84: _delay((unsigned long)((5)*(1000000/4000000.0)));
  1224  0B3D  0000               	nop
  1225                           
  1226                           ;lcd.h: 85: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 1; 
      +                          PORTBbits.RB2 = 0;
  1227  0B3E  0020               	movlb	0	; select bank0
  1228  0B3F  138D               	bcf	13,7	;volatile
  1229  0B40  130D               	bcf	13,6	;volatile
  1230  0B41  168D               	bsf	13,5	;volatile
  1231  0B42  160D               	bsf	13,4	;volatile
  1232  0B43  110D               	bcf	13,2	;volatile
  1233                           
  1234                           ;lcd.h: 86: PORTBbits.RB1 = 0;
  1235  0B44  108D               	bcf	13,1	;volatile
  1236                           
  1237                           ;lcd.h: 87: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1238  0B45  30E5               	movlw	229
  1239  0B46  00F3               	movwf	??_Lcd_Init
  1240  0B47                     u3717:	
  1241  0B47  3200               	nop2
  1242  0B48  0000               	nop
  1243  0B49  0BF3               	decfsz	??_Lcd_Init,f
  1244  0B4A  2B47               	goto	u3717
  1245  0B4B  3001               	movlw	1
  1246  0B4C  00F3               	movwf	??_Lcd_Init
  1247  0B4D  0873               	movf	??_Lcd_Init,w
  1248  0B4E  07F4               	addwf	Lcd_Init@data,f
  1249  0B4F  3004               	movlw	4
  1250  0B50  0274               	subwf	Lcd_Init@data,w
  1251  0B51  1C03               	skipc
  1252  0B52  2B30               	goto	l33
  1253  0B53                     l34:	
  1254                           
  1255                           ;lcd.h: 88: }
  1256                           ;lcd.h: 89: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 0; PORTBbits.RB1 = 0;
  1257  0B53  0020               	movlb	0	; select bank0
  1258  0B54  138D               	bcf	13,7	;volatile
  1259  0B55  130D               	bcf	13,6	;volatile
  1260  0B56  168D               	bsf	13,5	;volatile
  1261  0B57  120D               	bcf	13,4	;volatile
  1262  0B58  110D               	bcf	13,2	;volatile
  1263  0B59  108D               	bcf	13,1	;volatile
  1264                           
  1265                           ;lcd.h: 90: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 1; PORTBbits.RB1 = 0;
  1266  0B5A  138D               	bcf	13,7	;volatile
  1267  0B5B  130D               	bcf	13,6	;volatile
  1268  0B5C  168D               	bsf	13,5	;volatile
  1269  0B5D  120D               	bcf	13,4	;volatile
  1270  0B5E  150D               	bsf	13,2	;volatile
  1271  0B5F  108D               	bcf	13,1	;volatile
  1272                           
  1273                           ;lcd.h: 91: _delay((unsigned long)((5)*(1000000/4000000.0)));
  1274  0B60  0000               	nop
  1275                           
  1276                           ;lcd.h: 92: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 0; PORTBbits.RB1 = 0;
  1277  0B61  0020               	movlb	0	; select bank0
  1278  0B62  138D               	bcf	13,7	;volatile
  1279  0B63  130D               	bcf	13,6	;volatile
  1280  0B64  168D               	bsf	13,5	;volatile
  1281  0B65  120D               	bcf	13,4	;volatile
  1282  0B66  110D               	bcf	13,2	;volatile
  1283  0B67  108D               	bcf	13,1	;volatile
  1284                           
  1285                           ;lcd.h: 93: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  1286  0B68  30E5               	movlw	229
  1287  0B69  00F3               	movwf	??_Lcd_Init
  1288  0B6A                     u3727:	
  1289  0B6A  3200               	nop2
  1290  0B6B  0000               	nop
  1291  0B6C  0BF3               	decfsz	??_Lcd_Init,f
  1292  0B6D  2B6A               	goto	u3727
  1293                           
  1294                           ;lcd.h: 94: data = 40; Lcd_Cmd(data);
  1295  0B6E  3028               	movlw	40
  1296  0B6F  00F3               	movwf	??_Lcd_Init
  1297  0B70  0873               	movf	??_Lcd_Init,w
  1298  0B71  00F4               	movwf	Lcd_Init@data
  1299  0B72  0874               	movf	Lcd_Init@data,w
  1300  0B73  3189  213F  318A   	fcall	_Lcd_Cmd
  1301                           
  1302                           ;lcd.h: 95: data = 16; Lcd_Cmd(data);
  1303  0B76  3010               	movlw	16
  1304  0B77  00F3               	movwf	??_Lcd_Init
  1305  0B78  0873               	movf	??_Lcd_Init,w
  1306  0B79  00F4               	movwf	Lcd_Init@data
  1307  0B7A  0874               	movf	Lcd_Init@data,w
  1308  0B7B  3189  213F  318A   	fcall	_Lcd_Cmd
  1309                           
  1310                           ;lcd.h: 96: data = 1; Lcd_Cmd(data);
  1311  0B7E  01F4               	clrf	Lcd_Init@data
  1312  0B7F  0AF4               	incf	Lcd_Init@data,f
  1313  0B80  0874               	movf	Lcd_Init@data,w
  1314  0B81  3189  213F  318A   	fcall	_Lcd_Cmd
  1315                           
  1316                           ;lcd.h: 97: data = 15; Lcd_Cmd(data);
  1317  0B84  300F               	movlw	15
  1318  0B85  00F3               	movwf	??_Lcd_Init
  1319  0B86  0873               	movf	??_Lcd_Init,w
  1320  0B87  00F4               	movwf	Lcd_Init@data
  1321  0B88  0874               	movf	Lcd_Init@data,w
  1322  0B89  3189  213F         	fcall	_Lcd_Cmd
  1323  0B8B  0008               	return
  1324  0B8C                     __end_of_Lcd_Init:	
  1325                           
  1326                           	psect	text3
  1327  0A62                     __ptext3:	
  1328 ;; *************** function _loop *****************
  1329 ;; Defined at:
  1330 ;;		line 58 in file "principal.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;		None               void
  1337 ;; Registers used:
  1338 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1344 ;;      Params:         0       0       0       0       0       0       0       0
  1345 ;;      Locals:         0       0       0       0       0       0       0       0
  1346 ;;      Temps:          0       6       0       0       0       0       0       0
  1347 ;;      Totals:         0       6       0       0       0       0       0       0
  1348 ;;Total ram usage:        6 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:    4
  1351 ;; This function calls:
  1352 ;;		_Lcd_Cmd
  1353 ;;		_Lcd_Out
  1354 ;;		___ftdiv
  1355 ;;		___ftmul
  1356 ;;		___lwtoft
  1357 ;;		_sprintf
  1358 ;; This function is called by:
  1359 ;;		_main
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           
  1364                           ;psect for function _loop
  1365  0A62                     _loop:	
  1366  0A62                     l81:	
  1367                           ;incstack = 0
  1368                           ; Regs used in _loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1369                           ;principal.c: 59: while(1){
  1370                           
  1371                           
  1372                           ;principal.c: 60: ADCON0bits.ADON=1;
  1373  0A62  0021               	movlb	1	; select bank1
  1374  0A63  141D               	bsf	29,0	;volatile
  1375                           
  1376                           ;principal.c: 61: ADCON0bits.GO=1;
  1377  0A64  149D               	bsf	29,1	;volatile
  1378                           
  1379                           ;principal.c: 62: _delay((unsigned long)((10)*(1000000/4000.0)));
  1380  0A65  3004               	movlw	4
  1381  0A66  0020               	movlb	0	; select bank0
  1382  0A67  00E5               	movwf	??_loop+1
  1383  0A68  303D               	movlw	61
  1384  0A69  00E4               	movwf	??_loop
  1385  0A6A                     u3737:	
  1386  0A6A  0BE4               	decfsz	??_loop,f
  1387  0A6B  2A6A               	goto	u3737
  1388  0A6C  0BE5               	decfsz	??_loop+1,f
  1389  0A6D  2A6A               	goto	u3737
  1390  0A6E  3200               	nop2
  1391  0A6F                     l82:	
  1392                           ;principal.c: 63: while(ADCON0bits.GO);
  1393                           
  1394  0A6F  0021               	movlb	1	; select bank1
  1395  0A70  189D               	btfsc	29,1	;volatile
  1396  0A71  2A6F               	goto	l82
  1397                           
  1398                           ;principal.c: 64: ADCON0bits.ADON=0;
  1399  0A72  101D               	bcf	29,0	;volatile
  1400                           
  1401                           ;principal.c: 65: i=ADRESH;
  1402  0A73  081C               	movf	28,w	;volatile
  1403  0A74  0020               	movlb	0	; select bank0
  1404  0A75  00E4               	movwf	??_loop
  1405  0A76  01E5               	clrf	??_loop+1
  1406  0A77  0864               	movf	??_loop,w
  1407  0A78  00EA               	movwf	_i
  1408  0A79  0865               	movf	??_loop+1,w
  1409  0A7A  00EB               	movwf	_i+1
  1410                           
  1411                           ;principal.c: 66: i=(i<<8)|ADRESL;
  1412  0A7B  0021               	movlb	1	; select bank1
  1413  0A7C  081B               	movf	27,w	;volatile
  1414  0A7D  0020               	movlb	0	; select bank0
  1415  0A7E  00E4               	movwf	??_loop
  1416  0A7F  01E5               	clrf	??_loop+1
  1417  0A80  086A               	movf	_i,w
  1418  0A81  00E7               	movwf	??_loop+3
  1419  0A82  01E6               	clrf	??_loop+2
  1420  0A83  0864               	movf	??_loop,w
  1421  0A84  0466               	iorwf	??_loop+2,w
  1422  0A85  00E8               	movwf	??_loop+4
  1423  0A86  0865               	movf	??_loop+1,w
  1424  0A87  0467               	iorwf	??_loop+3,w
  1425  0A88  00E9               	movwf	??_loop+5
  1426  0A89  0868               	movf	??_loop+4,w
  1427  0A8A  00EA               	movwf	_i
  1428  0A8B  0869               	movf	??_loop+5,w
  1429  0A8C  00EB               	movwf	_i+1
  1430                           
  1431                           ;principal.c: 67: if(i!=j){
  1432  0A8D  086D               	movf	_j+1,w
  1433  0A8E  066B               	xorwf	_i+1,w
  1434  0A8F  1D03               	skipz
  1435  0A90  2A93               	goto	u3635
  1436  0A91  086C               	movf	_j,w
  1437  0A92  066A               	xorwf	_i,w
  1438  0A93                     u3635:	
  1439  0A93  1903               	skipnz
  1440  0A94  2A62               	goto	l81
  1441                           
  1442                           ;principal.c: 68: valor=i*5.0f/1023;
  1443  0A95  30C0               	movlw	192
  1444  0A96  00B8               	movwf	___ftdiv@f2
  1445  0A97  307F               	movlw	127
  1446  0A98  00B9               	movwf	___ftdiv@f2+1
  1447  0A99  3044               	movlw	68
  1448  0A9A  00BA               	movwf	___ftdiv@f2+2
  1449  0A9B  3000               	movlw	0
  1450  0A9C  00A8               	movwf	___ftmul@f1
  1451  0A9D  30A0               	movlw	160
  1452  0A9E  00A9               	movwf	___ftmul@f1+1
  1453  0A9F  3040               	movlw	64
  1454  0AA0  00AA               	movwf	___ftmul@f1+2
  1455  0AA1  086B               	movf	_i+1,w
  1456  0AA2  01F9               	clrf	___lwtoft@c+1
  1457  0AA3  07F9               	addwf	___lwtoft@c+1,f
  1458  0AA4  086A               	movf	_i,w
  1459  0AA5  01F8               	clrf	___lwtoft@c
  1460  0AA6  07F8               	addwf	___lwtoft@c,f
  1461  0AA7  3196  2638  318A   	fcall	___lwtoft
  1462  0AAA  0878               	movf	?___lwtoft,w
  1463  0AAB  0020               	movlb	0	; select bank0
  1464  0AAC  00AB               	movwf	___ftmul@f2
  1465  0AAD  0879               	movf	?___lwtoft+1,w
  1466  0AAE  00AC               	movwf	___ftmul@f2+1
  1467  0AAF  087A               	movf	?___lwtoft+2,w
  1468  0AB0  00AD               	movwf	___ftmul@f2+2
  1469  0AB1  318C  2435  318A   	fcall	___ftmul
  1470  0AB4  0020               	movlb	0	; select bank0
  1471  0AB5  0828               	movf	?___ftmul,w
  1472  0AB6  00BB               	movwf	___ftdiv@f1
  1473  0AB7  0829               	movf	?___ftmul+1,w
  1474  0AB8  00BC               	movwf	___ftdiv@f1+1
  1475  0AB9  082A               	movf	?___ftmul+2,w
  1476  0ABA  00BD               	movwf	___ftdiv@f1+2
  1477  0ABB  318B  238C  318A   	fcall	___ftdiv
  1478  0ABE  0020               	movlb	0	; select bank0
  1479  0ABF  0838               	movf	?___ftdiv,w
  1480  0AC0  0021               	movlb	1	; select bank1
  1481  0AC1  00C2               	movwf	_valor^(0+128)
  1482  0AC2  0020               	movlb	0	; select bank0
  1483  0AC3  0839               	movf	?___ftdiv+1,w
  1484  0AC4  0021               	movlb	1	; select bank1
  1485  0AC5  00C3               	movwf	(_valor+1)^(0+128)
  1486  0AC6  0020               	movlb	0	; select bank0
  1487  0AC7  083A               	movf	?___ftdiv+2,w
  1488  0AC8  0021               	movlb	1	; select bank1
  1489  0AC9  00C4               	movwf	(_valor+2)^(0+128)
  1490                           
  1491                           ;principal.c: 69: sprintf(buffer,"VDD=%f",valor);
  1492  0ACA  3076               	movlw	low (STR_1| (0+32768))
  1493  0ACB  0020               	movlb	0	; select bank0
  1494  0ACC  00D9               	movwf	sprintf@f
  1495  0ACD  3090               	movlw	high (STR_1| (0+32768))
  1496  0ACE  00DA               	movwf	sprintf@f+1
  1497  0ACF  0021               	movlb	1	; select bank1
  1498  0AD0  0842               	movf	_valor^(0+128),w
  1499  0AD1  0020               	movlb	0	; select bank0
  1500  0AD2  00DB               	movwf	?_sprintf+2
  1501  0AD3  0021               	movlb	1	; select bank1
  1502  0AD4  0843               	movf	(_valor+1)^(0+128),w
  1503  0AD5  0020               	movlb	0	; select bank0
  1504  0AD6  00DC               	movwf	?_sprintf+3
  1505  0AD7  0021               	movlb	1	; select bank1
  1506  0AD8  0844               	movf	(_valor+2)^(0+128),w
  1507  0AD9  0020               	movlb	0	; select bank0
  1508  0ADA  00DD               	movwf	?_sprintf+4
  1509  0ADB  30C5               	movlw	_buffer& (0+255)
  1510  0ADC  3183  238D  318A   	fcall	_sprintf
  1511                           
  1512                           ;principal.c: 70: Lcd_Cmd(1);
  1513  0ADF  3001               	movlw	1
  1514  0AE0  3189  213F  318A   	fcall	_Lcd_Cmd
  1515                           
  1516                           ;principal.c: 71: Lcd_Out(1,1,buffer);
  1517  0AE3  01F3               	clrf	Lcd_Out@x
  1518  0AE4  0AF3               	incf	Lcd_Out@x,f
  1519  0AE5  30C5               	movlw	_buffer& (0+255)
  1520  0AE6  0020               	movlb	0	; select bank0
  1521  0AE7  00E4               	movwf	??_loop
  1522  0AE8  0864               	movf	??_loop,w
  1523  0AE9  00F4               	movwf	Lcd_Out@buffer
  1524  0AEA  3001               	movlw	1
  1525  0AEB  3196  26B5  318A   	fcall	_Lcd_Out
  1526                           
  1527                           ;principal.c: 72: j=i;
  1528  0AEE  0020               	movlb	0	; select bank0
  1529  0AEF  086B               	movf	_i+1,w
  1530  0AF0  01ED               	clrf	_j+1
  1531  0AF1  07ED               	addwf	_j+1,f
  1532  0AF2  086A               	movf	_i,w
  1533  0AF3  01EC               	clrf	_j
  1534  0AF4  07EC               	addwf	_j,f
  1535  0AF5  2A62               	goto	l81
  1536  0AF6                     __end_of_loop:	
  1537                           
  1538                           	psect	text4
  1539  038D                     __ptext4:	
  1540 ;; *************** function _sprintf *****************
  1541 ;; Defined at:
  1542 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  sp              1    wreg     PTR unsigned char 
  1545 ;;		 -> buffer(30), 
  1546 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  1547 ;;		 -> STR_1(7), 
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;  sp              1   29[BANK1 ] PTR unsigned char 
  1550 ;;		 -> buffer(30), 
  1551 ;;  vd              4    8[BANK1 ] unsigned long 
  1552 ;;  vd              4   12[BANK1 ] unsigned long 
  1553 ;;  _val            4   20[BANK1 ] struct .
  1554 ;;  fval            3   30[BANK1 ] struct .
  1555 ;;  integ           3   24[BANK1 ] struct .
  1556 ;;  ival            3    0        struct .
  1557 ;;  exp             2   27[BANK1 ] int 
  1558 ;;  prec            2   18[BANK1 ] int 
  1559 ;;  flag            2   16[BANK1 ] unsigned short 
  1560 ;;  width           2    0        int 
  1561 ;;  c               1   33[BANK1 ] char 
  1562 ;;  ap              1    7[BANK1 ] PTR void [1]
  1563 ;;		 -> ?_sprintf(2), 
  1564 ;;  d               1    0        unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  2   57[BANK0 ] int 
  1567 ;; Registers used:
  1568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1574 ;;      Params:         0       5       0       0       0       0       0       0
  1575 ;;      Locals:         0       0      34       0       0       0       0       0
  1576 ;;      Temps:          0       6       0       0       0       0       0       0
  1577 ;;      Totals:         0      11      34       0       0       0       0       0
  1578 ;;Total ram usage:       45 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:    3
  1581 ;; This function calls:
  1582 ;;		___awdiv
  1583 ;;		___ftadd
  1584 ;;		___ftge
  1585 ;;		___ftmul
  1586 ;;		___ftneg
  1587 ;;		___ftsub
  1588 ;;		___fttol
  1589 ;;		___lldiv
  1590 ;;		___llmod
  1591 ;;		___lltoft
  1592 ;;		___wmul
  1593 ;;		__div_to_l_
  1594 ;;		__tdiv_to_l_
  1595 ;;		_fround
  1596 ;;		_scale
  1597 ;; This function is called by:
  1598 ;;		_loop
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           
  1603                           ;psect for function _sprintf
  1604  038D                     _sprintf:	
  1605                           
  1606                           ;incstack = 0
  1607                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1608                           ;sprintf@sp stored from wreg
  1609  038D  0021               	movlb	1	; select bank1
  1610  038E  00BD               	movwf	sprintf@sp^(0+128)
  1611                           
  1612                           ;doprnt.c: 494: va_list ap;
  1613                           ;doprnt.c: 499: signed char c;
  1614                           ;doprnt.c: 501: int width;
  1615                           ;doprnt.c: 504: int prec;
  1616                           ;doprnt.c: 508: unsigned short flag;
  1617                           ;doprnt.c: 515: char d;
  1618                           ;doprnt.c: 516: double fval, integ;
  1619                           ;doprnt.c: 517: int exp;
  1620                           ;doprnt.c: 518: double ival;
  1621                           ;doprnt.c: 519: union {
  1622                           ;doprnt.c: 520: unsigned long _val;
  1623                           ;doprnt.c: 521: struct {
  1624                           ;doprnt.c: 522: const char * _cp;
  1625                           ;doprnt.c: 523: unsigned _len;
  1626                           ;doprnt.c: 524: } _str;
  1627                           ;doprnt.c: 525: } _val;
  1628                           ;doprnt.c: 542: *ap = __va_start();
  1629  038F  305B               	movlw	(?_sprintf+2)& (0+255)
  1630  0390  0020               	movlb	0	; select bank0
  1631  0391  00DE               	movwf	??_sprintf
  1632  0392  085E               	movf	??_sprintf,w
  1633  0393  0021               	movlb	1	; select bank1
  1634  0394  00A7               	movwf	sprintf@ap^(0+128)
  1635  0395                     l2525:	
  1636                           ;doprnt.c: 545: while(c = *f++) {
  1637                           
  1638  0395  0020               	movlb	0	; select bank0
  1639  0396  085A               	movf	sprintf@f+1,w
  1640  0397  00DF               	movwf	??_sprintf+1
  1641  0398  0859               	movf	sprintf@f,w
  1642  0399  00DE               	movwf	??_sprintf
  1643  039A  0AD9               	incf	sprintf@f,f
  1644  039B  1903               	skipnz
  1645  039C  0ADA               	incf	sprintf@f+1,f
  1646  039D  085E               	movf	??_sprintf,w
  1647  039E  0084               	movwf	4
  1648  039F  085F               	movf	??_sprintf+1,w
  1649  03A0  0085               	movwf	5
  1650  03A1  0800               	movf	0,w	;code access
  1651  03A2  00E0               	movwf	??_sprintf+2
  1652  03A3  0860               	movf	??_sprintf+2,w
  1653  03A4  0021               	movlb	1	; select bank1
  1654  03A5  00C1               	movwf	sprintf@c^(0+128)
  1655  03A6  08C1               	movf	sprintf@c^(0+128),f
  1656  03A7  1903               	btfsc	3,2
  1657  03A8  2FEC               	goto	l2527
  1658                           
  1659                           ;doprnt.c: 547: if(c != '%')
  1660  03A9  0841               	movf	sprintf@c^(0+128),w
  1661  03AA  3A25               	xorlw	37
  1662  03AB  1903               	skipnz
  1663  03AC  2BB0               	goto	l2369
  1664                           
  1665                           ;doprnt.c: 549: {
  1666                           ;doprnt.c: 550: ((*sp++ = (c)));
  1667  03AD  0841               	movf	sprintf@c^(0+128),w
  1668  03AE  0020               	movlb	0	; select bank0
  1669  03AF  2FDE               	goto	L5
  1670  03B0                     l2369:	
  1671                           ;doprnt.c: 551: continue;
  1672                           
  1673                           
  1674                           ;doprnt.c: 552: }
  1675                           ;doprnt.c: 557: flag = 0;
  1676  03B0  01B0               	clrf	sprintf@flag^(0+128)
  1677  03B1  01B1               	clrf	(sprintf@flag+1)^(0+128)
  1678                           
  1679                           ;doprnt.c: 644: switch(c = *f++) {
  1680  03B2  2BB5               	goto	l2373
  1681  03B3                     l130:	
  1682                           ;doprnt.c: 671: case 'f':
  1683                           
  1684                           ;doprnt.c: 647: goto alldone;
  1685                           
  1686                           ;doprnt.c: 646: case 0:
  1687                           
  1688                           
  1689                           ;doprnt.c: 672: flag |= 0x400;
  1690  03B3  1531               	bsf	(sprintf@flag^(0+128)+1),2
  1691                           
  1692                           ;doprnt.c: 673: break;
  1693  03B4  2BCB               	goto	l2375
  1694  03B5                     l2373:	
  1695                           ;doprnt.c: 831: }
  1696                           
  1697                           ;doprnt.c: 822: continue;
  1698                           
  1699                           ;doprnt.c: 811: default:
  1700                           
  1701  03B5  0020               	movlb	0	; select bank0
  1702  03B6  085A               	movf	sprintf@f+1,w
  1703  03B7  00DF               	movwf	??_sprintf+1
  1704  03B8  0859               	movf	sprintf@f,w
  1705  03B9  00DE               	movwf	??_sprintf
  1706  03BA  0AD9               	incf	sprintf@f,f
  1707  03BB  1903               	skipnz
  1708  03BC  0ADA               	incf	sprintf@f+1,f
  1709  03BD  085E               	movf	??_sprintf,w
  1710  03BE  0084               	movwf	4
  1711  03BF  085F               	movf	??_sprintf+1,w
  1712  03C0  0085               	movwf	5
  1713  03C1  0800               	movf	0,w	;code access
  1714  03C2  0021               	movlb	1	; select bank1
  1715  03C3  00C1               	movwf	sprintf@c^(0+128)
  1716                           
  1717                           ; Switch size 1, requested type "space"
  1718                           ; Number of cases is 2, Range of values is 0 to 102
  1719                           ; switch strategies available:
  1720                           ; Name         Instructions Cycles
  1721                           ; simple_byte            7     4 (average)
  1722                           ; direct_byte          212     6 (fixed)
  1723                           ; jumptable            260     6 (fixed)
  1724                           ;	Chosen strategy is simple_byte
  1725  03C4  3A00               	xorlw	0	; case 0
  1726  03C5  1903               	skipnz
  1727  03C6  2FEC               	goto	l2527
  1728  03C7  3A66               	xorlw	102	; case 102
  1729  03C8  1903               	skipnz
  1730  03C9  2BB3               	goto	l130
  1731  03CA  2B95               	goto	l2525
  1732  03CB                     l2375:	
  1733                           
  1734                           ;doprnt.c: 834: if(flag & (0x700)) {
  1735  03CB  3000               	movlw	0
  1736  03CC  0530               	andwf	sprintf@flag^(0+128),w
  1737  03CD  0020               	movlb	0	; select bank0
  1738  03CE  00DE               	movwf	??_sprintf
  1739  03CF  3007               	movlw	7
  1740  03D0  0021               	movlb	1	; select bank1
  1741  03D1  0531               	andwf	(sprintf@flag+1)^(0+128),w
  1742  03D2  0020               	movlb	0	; select bank0
  1743  03D3  00DF               	movwf	??_sprintf+1
  1744  03D4  085F               	movf	??_sprintf+1,w
  1745  03D5  045E               	iorwf	??_sprintf,w
  1746  03D6  1903               	skipnz
  1747  03D7  2FCF               	goto	l2519
  1748                           
  1749                           ;doprnt.c: 838: prec = 6;
  1750  03D8  3006               	movlw	6
  1751  03D9  0021               	movlb	1	; select bank1
  1752  03DA  00B2               	movwf	sprintf@prec^(0+128)
  1753  03DB  3000               	movlw	0
  1754  03DC  00B3               	movwf	(sprintf@prec^(0+128)+1)
  1755                           
  1756                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1757  03DD  0827               	movf	sprintf@ap^(0+128),w
  1758  03DE  0086               	movwf	6
  1759  03DF  0187               	clrf	7
  1760  03E0  3F40               	moviw [0]fsr1
  1761  03E1  00BE               	movwf	sprintf@fval^(0+128)
  1762  03E2  3F41               	moviw [1]fsr1
  1763  03E3  00BF               	movwf	(sprintf@fval+1)^(0+128)
  1764  03E4  3F42               	moviw [2]fsr1
  1765  03E5  00C0               	movwf	(sprintf@fval+2)^(0+128)
  1766  03E6  3003               	movlw	3
  1767  03E7  0020               	movlb	0	; select bank0
  1768  03E8  00DE               	movwf	??_sprintf
  1769  03E9  085E               	movf	??_sprintf,w
  1770  03EA  0021               	movlb	1	; select bank1
  1771  03EB  07A7               	addwf	sprintf@ap^(0+128),f
  1772                           
  1773                           ;doprnt.c: 840: if(fval < 0.0) {
  1774  03EC  083E               	movf	sprintf@fval^(0+128),w
  1775  03ED  00F0               	movwf	___ftge@ff1
  1776  03EE  083F               	movf	(sprintf@fval+1)^(0+128),w
  1777  03EF  00F1               	movwf	___ftge@ff1+1
  1778  03F0  0840               	movf	(sprintf@fval+2)^(0+128),w
  1779  03F1  00F2               	movwf	___ftge@ff1+2
  1780  03F2  3000               	movlw	0
  1781  03F3  00F3               	movwf	___ftge@ff2
  1782  03F4  3000               	movlw	0
  1783  03F5  00F4               	movwf	___ftge@ff2+1
  1784  03F6  3000               	movlw	0
  1785  03F7  00F5               	movwf	___ftge@ff2+2
  1786  03F8  3196  26EA  3183   	fcall	___ftge
  1787  03FB  1803               	btfsc	3,0
  1788  03FC  2C12               	goto	l2389
  1789                           
  1790                           ;doprnt.c: 841: fval = -fval;
  1791  03FD  0021               	movlb	1	; select bank1
  1792  03FE  083E               	movf	sprintf@fval^(0+128),w
  1793  03FF  00F0               	movwf	___ftneg@f1
  1794  0400  083F               	movf	(sprintf@fval+1)^(0+128),w
  1795  0401  00F1               	movwf	___ftneg@f1+1
  1796  0402  0840               	movf	(sprintf@fval+2)^(0+128),w
  1797  0403  00F2               	movwf	___ftneg@f1+2
  1798  0404  3196  2630  3183   	fcall	___ftneg
  1799  0407  0870               	movf	?___ftneg,w
  1800  0408  0021               	movlb	1	; select bank1
  1801  0409  00BE               	movwf	sprintf@fval^(0+128)
  1802  040A  0871               	movf	?___ftneg+1,w
  1803  040B  00BF               	movwf	(sprintf@fval+1)^(0+128)
  1804  040C  0872               	movf	?___ftneg+2,w
  1805  040D  00C0               	movwf	(sprintf@fval+2)^(0+128)
  1806                           
  1807                           ;doprnt.c: 842: flag |= 0x03;
  1808  040E  3003               	movlw	3
  1809  040F  04B0               	iorwf	sprintf@flag^(0+128),f
  1810  0410  3000               	movlw	0
  1811  0411  04B1               	iorwf	(sprintf@flag+1)^(0+128),f
  1812  0412                     l2389:	
  1813                           
  1814                           ;doprnt.c: 843: }
  1815                           ;doprnt.c: 844: exp = 0;
  1816  0412  0021               	movlb	1	; select bank1
  1817  0413  01BB               	clrf	sprintf@exp^(0+128)
  1818  0414  01BC               	clrf	(sprintf@exp+1)^(0+128)
  1819                           
  1820                           ;doprnt.c: 845: if( fval!=0) {
  1821  0415  0840               	movf	(sprintf@fval+2)^(0+128),w
  1822  0416  043F               	iorwf	(sprintf@fval+1)^(0+128),w
  1823  0417  043E               	iorwf	sprintf@fval^(0+128),w
  1824  0418  1903               	skipnz
  1825  0419  2CDA               	goto	l135
  1826                           
  1827                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1828  041A  30BE               	movlw	low sprintf@fval
  1829  041B  0086               	movwf	6
  1830  041C  0187               	clrf	7
  1831  041D  3F40               	moviw [0]fsr1
  1832  041E  0020               	movlb	0	; select bank0
  1833  041F  00DE               	movwf	??_sprintf
  1834  0420  3F41               	moviw [1]fsr1
  1835  0421  00DF               	movwf	??_sprintf+1
  1836  0422  3F42               	moviw [2]fsr1
  1837  0423  00E0               	movwf	??_sprintf+2
  1838  0424  3F43               	moviw [3]fsr1
  1839  0425  00E1               	movwf	??_sprintf+3
  1840  0426  300F               	movlw	15
  1841  0427                     u3325:	
  1842  0427  36E1               	lsrf	??_sprintf+3,f
  1843  0428  0CE0               	rrf	??_sprintf+2,f
  1844  0429  0CDF               	rrf	??_sprintf+1,f
  1845  042A  0CDE               	rrf	??_sprintf,f
  1846  042B  0B89               	decfsz	9,f
  1847  042C  2C27               	goto	u3325
  1848  042D  30FF               	movlw	255
  1849  042E  055E               	andwf	??_sprintf,w
  1850  042F  00E2               	movwf	??_sprintf+4
  1851  0430  3000               	movlw	0
  1852  0431  055F               	andwf	??_sprintf+1,w
  1853  0432  00E3               	movwf	??_sprintf+5
  1854  0433  0862               	movf	??_sprintf+4,w
  1855  0434  3E82               	addlw	130
  1856  0435  0021               	movlb	1	; select bank1
  1857  0436  00BB               	movwf	sprintf@exp^(0+128)
  1858  0437  30FF               	movlw	255
  1859  0438  0020               	movlb	0	; select bank0
  1860  0439  3D63               	addwfc	??_sprintf+5,w
  1861  043A  0021               	movlb	1	; select bank1
  1862  043B  00BC               	movwf	(sprintf@exp+1)^(0+128)
  1863                           
  1864                           ;doprnt.c: 847: exp--;
  1865  043C  30FF               	movlw	255
  1866  043D  07BB               	addwf	sprintf@exp^(0+128),f
  1867  043E  30FF               	movlw	255
  1868  043F  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  1869                           
  1870                           ;doprnt.c: 848: exp *= 3;
  1871  0440  3003               	movlw	3
  1872  0441  0020               	movlb	0	; select bank0
  1873  0442  00A4               	movwf	___wmul@multiplier
  1874  0443  3000               	movlw	0
  1875  0444  00A5               	movwf	___wmul@multiplier+1
  1876  0445  0021               	movlb	1	; select bank1
  1877  0446  083C               	movf	(sprintf@exp+1)^(0+128),w
  1878  0447  0020               	movlb	0	; select bank0
  1879  0448  01A7               	clrf	___wmul@multiplicand+1
  1880  0449  07A7               	addwf	___wmul@multiplicand+1,f
  1881  044A  0021               	movlb	1	; select bank1
  1882  044B  083B               	movf	sprintf@exp^(0+128),w
  1883  044C  0020               	movlb	0	; select bank0
  1884  044D  01A6               	clrf	___wmul@multiplicand
  1885  044E  07A6               	addwf	___wmul@multiplicand,f
  1886  044F  3196  264B  3183   	fcall	___wmul
  1887  0452  0020               	movlb	0	; select bank0
  1888  0453  0825               	movf	?___wmul+1,w
  1889  0454  0021               	movlb	1	; select bank1
  1890  0455  01BC               	clrf	(sprintf@exp+1)^(0+128)
  1891  0456  07BC               	addwf	(sprintf@exp+1)^(0+128),f
  1892  0457  0020               	movlb	0	; select bank0
  1893  0458  0824               	movf	?___wmul,w
  1894  0459  0021               	movlb	1	; select bank1
  1895  045A  01BB               	clrf	sprintf@exp^(0+128)
  1896  045B  07BB               	addwf	sprintf@exp^(0+128),f
  1897                           
  1898                           ;doprnt.c: 849: exp /= 10;
  1899  045C  300A               	movlw	10
  1900  045D  00F7               	movwf	___awdiv@divisor
  1901  045E  3000               	movlw	0
  1902  045F  00F8               	movwf	___awdiv@divisor+1
  1903  0460  083C               	movf	(sprintf@exp+1)^(0+128),w
  1904  0461  01FA               	clrf	___awdiv@dividend+1
  1905  0462  07FA               	addwf	___awdiv@dividend+1,f
  1906  0463  083B               	movf	sprintf@exp^(0+128),w
  1907  0464  01F9               	clrf	___awdiv@dividend
  1908  0465  07F9               	addwf	___awdiv@dividend,f
  1909  0466  3188  2004  3183   	fcall	___awdiv
  1910  0469  0878               	movf	?___awdiv+1,w
  1911  046A  0021               	movlb	1	; select bank1
  1912  046B  01BC               	clrf	(sprintf@exp+1)^(0+128)
  1913  046C  07BC               	addwf	(sprintf@exp+1)^(0+128),f
  1914  046D  0877               	movf	?___awdiv,w
  1915  046E  01BB               	clrf	sprintf@exp^(0+128)
  1916  046F  07BB               	addwf	sprintf@exp^(0+128),f
  1917                           
  1918                           ;doprnt.c: 850: if(exp < 0)
  1919  0470  1FBC               	btfss	(sprintf@exp+1)^(0+128),7
  1920  0471  2C76               	goto	l2405
  1921                           
  1922                           ;doprnt.c: 851: exp--;
  1923  0472  30FF               	movlw	255
  1924  0473  07BB               	addwf	sprintf@exp^(0+128),f
  1925  0474  30FF               	movlw	255
  1926  0475  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  1927  0476                     l2405:	
  1928                           
  1929                           ;doprnt.c: 855: integ = scale(-exp);
  1930  0476  033B               	decf	sprintf@exp^(0+128),w
  1931  0477  3AFF               	xorlw	255
  1932  0478  3181  213D  3183   	fcall	_scale
  1933  047B  0020               	movlb	0	; select bank0
  1934  047C  0838               	movf	?_scale,w
  1935  047D  0021               	movlb	1	; select bank1
  1936  047E  00B8               	movwf	sprintf@integ^(0+128)
  1937  047F  0020               	movlb	0	; select bank0
  1938  0480  0839               	movf	?_scale+1,w
  1939  0481  0021               	movlb	1	; select bank1
  1940  0482  00B9               	movwf	(sprintf@integ+1)^(0+128)
  1941  0483  0020               	movlb	0	; select bank0
  1942  0484  083A               	movf	?_scale+2,w
  1943  0485  0021               	movlb	1	; select bank1
  1944  0486  00BA               	movwf	(sprintf@integ+2)^(0+128)
  1945                           
  1946                           ;doprnt.c: 856: integ *= fval;
  1947  0487  083E               	movf	sprintf@fval^(0+128),w
  1948  0488  0020               	movlb	0	; select bank0
  1949  0489  00A8               	movwf	___ftmul@f1
  1950  048A  0021               	movlb	1	; select bank1
  1951  048B  083F               	movf	(sprintf@fval+1)^(0+128),w
  1952  048C  0020               	movlb	0	; select bank0
  1953  048D  00A9               	movwf	___ftmul@f1+1
  1954  048E  0021               	movlb	1	; select bank1
  1955  048F  0840               	movf	(sprintf@fval+2)^(0+128),w
  1956  0490  0020               	movlb	0	; select bank0
  1957  0491  00AA               	movwf	___ftmul@f1+2
  1958  0492  0021               	movlb	1	; select bank1
  1959  0493  0838               	movf	sprintf@integ^(0+128),w
  1960  0494  0020               	movlb	0	; select bank0
  1961  0495  00AB               	movwf	___ftmul@f2
  1962  0496  0021               	movlb	1	; select bank1
  1963  0497  0839               	movf	(sprintf@integ+1)^(0+128),w
  1964  0498  0020               	movlb	0	; select bank0
  1965  0499  00AC               	movwf	___ftmul@f2+1
  1966  049A  0021               	movlb	1	; select bank1
  1967  049B  083A               	movf	(sprintf@integ+2)^(0+128),w
  1968  049C  0020               	movlb	0	; select bank0
  1969  049D  00AD               	movwf	___ftmul@f2+2
  1970  049E  318C  2435  3183   	fcall	___ftmul
  1971  04A1  0020               	movlb	0	; select bank0
  1972  04A2  0828               	movf	?___ftmul,w
  1973  04A3  0021               	movlb	1	; select bank1
  1974  04A4  00B8               	movwf	sprintf@integ^(0+128)
  1975  04A5  0020               	movlb	0	; select bank0
  1976  04A6  0829               	movf	?___ftmul+1,w
  1977  04A7  0021               	movlb	1	; select bank1
  1978  04A8  00B9               	movwf	(sprintf@integ+1)^(0+128)
  1979  04A9  0020               	movlb	0	; select bank0
  1980  04AA  082A               	movf	?___ftmul+2,w
  1981  04AB  0021               	movlb	1	; select bank1
  1982  04AC  00BA               	movwf	(sprintf@integ+2)^(0+128)
  1983                           
  1984                           ;doprnt.c: 857: if(integ < 1.0)
  1985  04AD  0838               	movf	sprintf@integ^(0+128),w
  1986  04AE  00F0               	movwf	___ftge@ff1
  1987  04AF  0839               	movf	(sprintf@integ+1)^(0+128),w
  1988  04B0  00F1               	movwf	___ftge@ff1+1
  1989  04B1  083A               	movf	(sprintf@integ+2)^(0+128),w
  1990  04B2  00F2               	movwf	___ftge@ff1+2
  1991  04B3  3000               	movlw	0
  1992  04B4  00F3               	movwf	___ftge@ff2
  1993  04B5  3080               	movlw	128
  1994  04B6  00F4               	movwf	___ftge@ff2+1
  1995  04B7  303F               	movlw	63
  1996  04B8  00F5               	movwf	___ftge@ff2+2
  1997  04B9  3196  26EA  3183   	fcall	___ftge
  1998  04BC  1803               	btfsc	3,0
  1999  04BD  2CC3               	goto	l2413
  2000                           
  2001                           ;doprnt.c: 858: exp--;
  2002  04BE  30FF               	movlw	255
  2003  04BF  0021               	movlb	1	; select bank1
  2004  04C0  07BB               	addwf	sprintf@exp^(0+128),f
  2005  04C1  30FF               	movlw	255
  2006  04C2  2CD9               	goto	L1
  2007  04C3                     l2413:	
  2008                           
  2009                           ;doprnt.c: 859: else if(integ >= 10.0)
  2010  04C3  0021               	movlb	1	; select bank1
  2011  04C4  0838               	movf	sprintf@integ^(0+128),w
  2012  04C5  00F0               	movwf	___ftge@ff1
  2013  04C6  0839               	movf	(sprintf@integ+1)^(0+128),w
  2014  04C7  00F1               	movwf	___ftge@ff1+1
  2015  04C8  083A               	movf	(sprintf@integ+2)^(0+128),w
  2016  04C9  00F2               	movwf	___ftge@ff1+2
  2017  04CA  3000               	movlw	0
  2018  04CB  00F3               	movwf	___ftge@ff2
  2019  04CC  3020               	movlw	32
  2020  04CD  00F4               	movwf	___ftge@ff2+1
  2021  04CE  3041               	movlw	65
  2022  04CF  00F5               	movwf	___ftge@ff2+2
  2023  04D0  3196  26EA  3183   	fcall	___ftge
  2024  04D3  1C03               	btfss	3,0
  2025  04D4  2CDA               	goto	l135
  2026                           
  2027                           ;doprnt.c: 860: exp++;
  2028  04D5  3001               	movlw	1
  2029  04D6  0021               	movlb	1	; select bank1
  2030  04D7  07BB               	addwf	sprintf@exp^(0+128),f
  2031  04D8  3000               	movlw	0
  2032  04D9                     L1:	
  2033  04D9  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2034  04DA                     l135:	
  2035                           
  2036                           ;doprnt.c: 861: }
  2037                           ;doprnt.c: 1121: if(prec <= 12)
  2038  04DA  0021               	movlb	1	; select bank1
  2039  04DB  0833               	movf	(sprintf@prec+1)^(0+128),w
  2040  04DC  3A80               	xorlw	128
  2041  04DD  0020               	movlb	0	; select bank0
  2042  04DE  00DE               	movwf	??_sprintf
  2043  04DF  3080               	movlw	128
  2044  04E0  025E               	subwf	??_sprintf,w
  2045  04E1  1D03               	skipz
  2046  04E2  2CE6               	goto	u3365
  2047  04E3  300D               	movlw	13
  2048  04E4  0021               	movlb	1	; select bank1
  2049  04E5  0232               	subwf	sprintf@prec^(0+128),w
  2050  04E6                     u3365:	
  2051  04E6  1803               	skipnc
  2052  04E7  2D0F               	goto	l2419
  2053                           
  2054                           ;doprnt.c: 1122: fval += fround(prec);
  2055  04E8  0021               	movlb	1	; select bank1
  2056  04E9  0832               	movf	sprintf@prec^(0+128),w
  2057  04EA  318E  2695  3183   	fcall	_fround
  2058  04ED  0020               	movlb	0	; select bank0
  2059  04EE  0838               	movf	?_fround,w
  2060  04EF  00C6               	movwf	___ftadd@f1
  2061  04F0  0839               	movf	?_fround+1,w
  2062  04F1  00C7               	movwf	___ftadd@f1+1
  2063  04F2  083A               	movf	?_fround+2,w
  2064  04F3  00C8               	movwf	___ftadd@f1+2
  2065  04F4  0021               	movlb	1	; select bank1
  2066  04F5  083E               	movf	sprintf@fval^(0+128),w
  2067  04F6  0020               	movlb	0	; select bank0
  2068  04F7  00C9               	movwf	___ftadd@f2
  2069  04F8  0021               	movlb	1	; select bank1
  2070  04F9  083F               	movf	(sprintf@fval+1)^(0+128),w
  2071  04FA  0020               	movlb	0	; select bank0
  2072  04FB  00CA               	movwf	___ftadd@f2+1
  2073  04FC  0021               	movlb	1	; select bank1
  2074  04FD  0840               	movf	(sprintf@fval+2)^(0+128),w
  2075  04FE  0020               	movlb	0	; select bank0
  2076  04FF  00CB               	movwf	___ftadd@f2+2
  2077  0500  318D  259F  3183   	fcall	___ftadd
  2078  0503  0020               	movlb	0	; select bank0
  2079  0504  0846               	movf	?___ftadd,w
  2080  0505  0021               	movlb	1	; select bank1
  2081  0506  00BE               	movwf	sprintf@fval^(0+128)
  2082  0507  0020               	movlb	0	; select bank0
  2083  0508  0847               	movf	?___ftadd+1,w
  2084  0509  0021               	movlb	1	; select bank1
  2085  050A  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2086  050B  0020               	movlb	0	; select bank0
  2087  050C  0848               	movf	?___ftadd+2,w
  2088  050D  0021               	movlb	1	; select bank1
  2089  050E  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2090  050F                     l2419:	
  2091                           
  2092                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2093  050F  0021               	movlb	1	; select bank1
  2094  0510  083C               	movf	(sprintf@exp+1)^(0+128),w
  2095  0511  3A80               	xorlw	128
  2096  0512  0020               	movlb	0	; select bank0
  2097  0513  00DE               	movwf	??_sprintf
  2098  0514  3080               	movlw	128
  2099  0515  025E               	subwf	??_sprintf,w
  2100  0516  1D03               	skipz
  2101  0517  2D1B               	goto	u3375
  2102  0518  300A               	movlw	10
  2103  0519  0021               	movlb	1	; select bank1
  2104  051A  023B               	subwf	sprintf@exp^(0+128),w
  2105  051B                     u3375:	
  2106  051B  1803               	skipnc
  2107  051C  2D46               	goto	l2427
  2108  051D  0021               	movlb	1	; select bank1
  2109  051E  0840               	movf	(sprintf@fval+2)^(0+128),w
  2110  051F  043F               	iorwf	(sprintf@fval+1)^(0+128),w
  2111  0520  043E               	iorwf	sprintf@fval^(0+128),w
  2112  0521  1903               	skipnz
  2113  0522  2D96               	goto	l2443
  2114  0523  083E               	movf	sprintf@fval^(0+128),w
  2115  0524  0020               	movlb	0	; select bank0
  2116  0525  00C1               	movwf	___fttol@f1
  2117  0526  0021               	movlb	1	; select bank1
  2118  0527  083F               	movf	(sprintf@fval+1)^(0+128),w
  2119  0528  0020               	movlb	0	; select bank0
  2120  0529  00C2               	movwf	___fttol@f1+1
  2121  052A  0021               	movlb	1	; select bank1
  2122  052B  0840               	movf	(sprintf@fval+2)^(0+128),w
  2123  052C  0020               	movlb	0	; select bank0
  2124  052D  00C3               	movwf	___fttol@f1+2
  2125  052E  3188  20B8  3183   	fcall	___fttol
  2126  0531  0020               	movlb	0	; select bank0
  2127  0532  0844               	movf	?___fttol+3,w
  2128  0533  0443               	iorwf	?___fttol+2,w
  2129  0534  0442               	iorwf	?___fttol+1,w
  2130  0535  0441               	iorwf	?___fttol,w
  2131  0536  1D03               	skipz
  2132  0537  2D96               	goto	l2443
  2133  0538  0021               	movlb	1	; select bank1
  2134  0539  083C               	movf	(sprintf@exp+1)^(0+128),w
  2135  053A  3A80               	xorlw	128
  2136  053B  0020               	movlb	0	; select bank0
  2137  053C  00DE               	movwf	??_sprintf
  2138  053D  3080               	movlw	128
  2139  053E  025E               	subwf	??_sprintf,w
  2140  053F  1D03               	skipz
  2141  0540  2D44               	goto	u3405
  2142  0541  3002               	movlw	2
  2143  0542  0021               	movlb	1	; select bank1
  2144  0543  023B               	subwf	sprintf@exp^(0+128),w
  2145  0544                     u3405:	
  2146  0544  1C03               	skipc
  2147  0545  2D96               	goto	l2443
  2148  0546                     l2427:	
  2149                           
  2150                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2151  0546  0021               	movlb	1	; select bank1
  2152  0547  0838               	movf	sprintf@integ^(0+128),w
  2153  0548  00F0               	movwf	___ftge@ff1
  2154  0549  0839               	movf	(sprintf@integ+1)^(0+128),w
  2155  054A  00F1               	movwf	___ftge@ff1+1
  2156  054B  083A               	movf	(sprintf@integ+2)^(0+128),w
  2157  054C  00F2               	movwf	___ftge@ff1+2
  2158  054D  3070               	movlw	112
  2159  054E  00F3               	movwf	___ftge@ff2
  2160  054F  3089               	movlw	137
  2161  0550  00F4               	movwf	___ftge@ff2+1
  2162  0551  3040               	movlw	64
  2163  0552  00F5               	movwf	___ftge@ff2+2
  2164  0553  3196  26EA  3183   	fcall	___ftge
  2165  0556  1803               	btfsc	3,0
  2166  0557  2D5A               	goto	l2431
  2167                           
  2168                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2169  0558  30F7               	movlw	247
  2170  0559  2D5B               	goto	L2
  2171  055A                     l2431:	
  2172                           ;doprnt.c: 1131: }else{
  2173                           
  2174                           
  2175                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2176  055A  30F8               	movlw	248
  2177  055B                     L2:	
  2178  055B  0021               	movlb	1	; select bank1
  2179  055C  07BB               	addwf	sprintf@exp^(0+128),f
  2180  055D  30FF               	movlw	255
  2181  055E  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2182                           
  2183                           ;doprnt.c: 1133: }
  2184                           ;doprnt.c: 1134: integ = scale(exp);
  2185  055F  083B               	movf	sprintf@exp^(0+128),w
  2186  0560  3181  213D  3183   	fcall	_scale
  2187  0563  0020               	movlb	0	; select bank0
  2188  0564  0838               	movf	?_scale,w
  2189  0565  0021               	movlb	1	; select bank1
  2190  0566  00B8               	movwf	sprintf@integ^(0+128)
  2191  0567  0020               	movlb	0	; select bank0
  2192  0568  0839               	movf	?_scale+1,w
  2193  0569  0021               	movlb	1	; select bank1
  2194  056A  00B9               	movwf	(sprintf@integ+1)^(0+128)
  2195  056B  0020               	movlb	0	; select bank0
  2196  056C  083A               	movf	?_scale+2,w
  2197  056D  0021               	movlb	1	; select bank1
  2198  056E  00BA               	movwf	(sprintf@integ+2)^(0+128)
  2199                           
  2200                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2201  056F  083E               	movf	sprintf@fval^(0+128),w
  2202  0570  00F0               	movwf	__tdiv_to_l_@f1
  2203  0571  083F               	movf	(sprintf@fval+1)^(0+128),w
  2204  0572  00F1               	movwf	__tdiv_to_l_@f1+1
  2205  0573  0840               	movf	(sprintf@fval+2)^(0+128),w
  2206  0574  00F2               	movwf	__tdiv_to_l_@f1+2
  2207  0575  0838               	movf	sprintf@integ^(0+128),w
  2208  0576  00F3               	movwf	__tdiv_to_l_@f2
  2209  0577  0839               	movf	(sprintf@integ+1)^(0+128),w
  2210  0578  00F4               	movwf	__tdiv_to_l_@f2+1
  2211  0579  083A               	movf	(sprintf@integ+2)^(0+128),w
  2212  057A  00F5               	movwf	__tdiv_to_l_@f2+2
  2213  057B  318C  24E9  3183   	fcall	__tdiv_to_l_
  2214  057E  0873               	movf	?__tdiv_to_l_+3,w
  2215  057F  0021               	movlb	1	; select bank1
  2216  0580  00A6               	movwf	(_sprintf$398+3)^(0+128)
  2217  0581  0872               	movf	?__tdiv_to_l_+2,w
  2218  0582  00A5               	movwf	(_sprintf$398+2)^(0+128)
  2219  0583  0871               	movf	?__tdiv_to_l_+1,w
  2220  0584  00A4               	movwf	(_sprintf$398+1)^(0+128)
  2221  0585  0870               	movf	?__tdiv_to_l_,w
  2222  0586  00A3               	movwf	_sprintf$398^(0+128)
  2223  0587  0826               	movf	(_sprintf$398+3)^(0+128),w
  2224  0588  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2225  0589  0825               	movf	(_sprintf$398+2)^(0+128),w
  2226  058A  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2227  058B  0824               	movf	(_sprintf$398+1)^(0+128),w
  2228  058C  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2229  058D  0823               	movf	_sprintf$398^(0+128),w
  2230  058E  00B4               	movwf	sprintf@_val^(0+128)
  2231                           
  2232                           ;doprnt.c: 1138: fval = 0.0;
  2233  058F  3000               	movlw	0
  2234  0590  00BE               	movwf	sprintf@fval^(0+128)
  2235  0591  3000               	movlw	0
  2236  0592  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2237  0593  3000               	movlw	0
  2238  0594  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2239                           
  2240                           ;doprnt.c: 1139: } else {
  2241  0595  2DE4               	goto	l2447
  2242  0596                     l2443:	
  2243                           
  2244                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2245  0596  0021               	movlb	1	; select bank1
  2246  0597  083E               	movf	sprintf@fval^(0+128),w
  2247  0598  0020               	movlb	0	; select bank0
  2248  0599  00C1               	movwf	___fttol@f1
  2249  059A  0021               	movlb	1	; select bank1
  2250  059B  083F               	movf	(sprintf@fval+1)^(0+128),w
  2251  059C  0020               	movlb	0	; select bank0
  2252  059D  00C2               	movwf	___fttol@f1+1
  2253  059E  0021               	movlb	1	; select bank1
  2254  059F  0840               	movf	(sprintf@fval+2)^(0+128),w
  2255  05A0  0020               	movlb	0	; select bank0
  2256  05A1  00C3               	movwf	___fttol@f1+2
  2257  05A2  3188  20B8  3183   	fcall	___fttol
  2258  05A5  0020               	movlb	0	; select bank0
  2259  05A6  0844               	movf	?___fttol+3,w
  2260  05A7  0021               	movlb	1	; select bank1
  2261  05A8  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2262  05A9  0020               	movlb	0	; select bank0
  2263  05AA  0843               	movf	?___fttol+2,w
  2264  05AB  0021               	movlb	1	; select bank1
  2265  05AC  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2266  05AD  0020               	movlb	0	; select bank0
  2267  05AE  0842               	movf	?___fttol+1,w
  2268  05AF  0021               	movlb	1	; select bank1
  2269  05B0  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2270  05B1  0020               	movlb	0	; select bank0
  2271  05B2  0841               	movf	?___fttol,w
  2272  05B3  0021               	movlb	1	; select bank1
  2273  05B4  00B4               	movwf	sprintf@_val^(0+128)
  2274                           
  2275                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2276  05B5  0837               	movf	(sprintf@_val+3)^(0+128),w
  2277  05B6  00FB               	movwf	___lltoft@c+3
  2278  05B7  0836               	movf	(sprintf@_val+2)^(0+128),w
  2279  05B8  00FA               	movwf	___lltoft@c+2
  2280  05B9  0835               	movf	(sprintf@_val+1)^(0+128),w
  2281  05BA  00F9               	movwf	___lltoft@c+1
  2282  05BB  0834               	movf	sprintf@_val^(0+128),w
  2283  05BC  00F8               	movwf	___lltoft@c
  2284  05BD  3196  268D  3183   	fcall	___lltoft
  2285  05C0  0878               	movf	?___lltoft,w
  2286  05C1  0020               	movlb	0	; select bank0
  2287  05C2  00D3               	movwf	___ftsub@f2
  2288  05C3  0879               	movf	?___lltoft+1,w
  2289  05C4  00D4               	movwf	___ftsub@f2+1
  2290  05C5  087A               	movf	?___lltoft+2,w
  2291  05C6  00D5               	movwf	___ftsub@f2+2
  2292  05C7  0021               	movlb	1	; select bank1
  2293  05C8  083E               	movf	sprintf@fval^(0+128),w
  2294  05C9  0020               	movlb	0	; select bank0
  2295  05CA  00D6               	movwf	___ftsub@f1
  2296  05CB  0021               	movlb	1	; select bank1
  2297  05CC  083F               	movf	(sprintf@fval+1)^(0+128),w
  2298  05CD  0020               	movlb	0	; select bank0
  2299  05CE  00D7               	movwf	___ftsub@f1+1
  2300  05CF  0021               	movlb	1	; select bank1
  2301  05D0  0840               	movf	(sprintf@fval+2)^(0+128),w
  2302  05D1  0020               	movlb	0	; select bank0
  2303  05D2  00D8               	movwf	___ftsub@f1+2
  2304  05D3  3180  2007  3183   	fcall	___ftsub
  2305  05D6  0020               	movlb	0	; select bank0
  2306  05D7  0853               	movf	?___ftsub,w
  2307  05D8  0021               	movlb	1	; select bank1
  2308  05D9  00BE               	movwf	sprintf@fval^(0+128)
  2309  05DA  0020               	movlb	0	; select bank0
  2310  05DB  0854               	movf	?___ftsub+1,w
  2311  05DC  0021               	movlb	1	; select bank1
  2312  05DD  00BF               	movwf	(sprintf@fval+1)^(0+128)
  2313  05DE  0020               	movlb	0	; select bank0
  2314  05DF  0855               	movf	?___ftsub+2,w
  2315  05E0  0021               	movlb	1	; select bank1
  2316  05E1  00C0               	movwf	(sprintf@fval+2)^(0+128)
  2317                           
  2318                           ;doprnt.c: 1142: exp = 0;
  2319  05E2  01BB               	clrf	sprintf@exp^(0+128)
  2320  05E3  01BC               	clrf	(sprintf@exp+1)^(0+128)
  2321  05E4                     l2447:	
  2322                           
  2323                           ;doprnt.c: 1143: }
  2324                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2325  05E4  01C1               	clrf	sprintf@c^(0+128)
  2326  05E5  0AC1               	incf	sprintf@c^(0+128),f
  2327  05E6  0841               	movf	sprintf@c^(0+128),w
  2328  05E7  3A0A               	xorlw	10
  2329  05E8  1903               	btfsc	3,2
  2330  05E9  2E21               	goto	l2461
  2331  05EA                     l2453:	
  2332                           
  2333                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2334  05EA  0841               	movf	sprintf@c^(0+128),w
  2335  05EB  0020               	movlb	0	; select bank0
  2336  05EC  00DE               	movwf	??_sprintf
  2337  05ED  01DF               	clrf	??_sprintf+1
  2338  05EE  35DE               	lslf	??_sprintf,f
  2339  05EF  0DDF               	rlf	??_sprintf+1,f
  2340  05F0  35DE               	lslf	??_sprintf,f
  2341  05F1  0DDF               	rlf	??_sprintf+1,f
  2342  05F2  3000               	movlw	low (_dpowers| (0+32768))
  2343  05F3  075E               	addwf	??_sprintf,w
  2344  05F4  0084               	movwf	4
  2345  05F5  3090               	movlw	high (_dpowers| (0+32768))
  2346  05F6  3D5F               	addwfc	??_sprintf+1,w
  2347  05F7  0085               	movwf	5
  2348  05F8  3F00               	moviw [0]fsr0
  2349  05F9  00E0               	movwf	??_sprintf+2
  2350  05FA  3F01               	moviw [1]fsr0
  2351  05FB  00E1               	movwf	??_sprintf+3
  2352  05FC  3F02               	moviw [2]fsr0
  2353  05FD  00E2               	movwf	??_sprintf+4
  2354  05FE  3F03               	moviw [3]fsr0
  2355  05FF  00E3               	movwf	??_sprintf+5
  2356  0600  0863               	movf	??_sprintf+5,w
  2357  0601  0021               	movlb	1	; select bank1
  2358  0602  0237               	subwf	(sprintf@_val+3)^(0+128),w
  2359  0603  1D03               	skipz
  2360  0604  2E15               	goto	u3435
  2361  0605  0020               	movlb	0	; select bank0
  2362  0606  0862               	movf	??_sprintf+4,w
  2363  0607  0021               	movlb	1	; select bank1
  2364  0608  0236               	subwf	(sprintf@_val+2)^(0+128),w
  2365  0609  1D03               	skipz
  2366  060A  2E15               	goto	u3435
  2367  060B  0020               	movlb	0	; select bank0
  2368  060C  0861               	movf	??_sprintf+3,w
  2369  060D  0021               	movlb	1	; select bank1
  2370  060E  0235               	subwf	(sprintf@_val+1)^(0+128),w
  2371  060F  1D03               	skipz
  2372  0610  2E15               	goto	u3435
  2373  0611  0020               	movlb	0	; select bank0
  2374  0612  0860               	movf	??_sprintf+2,w
  2375  0613  0021               	movlb	1	; select bank1
  2376  0614  0234               	subwf	sprintf@_val^(0+128),w
  2377  0615                     u3435:	
  2378  0615  1C03               	btfss	3,0
  2379  0616  2E21               	goto	l2461
  2380                           
  2381                           ;doprnt.c: 1147: break;
  2382  0617  3001               	movlw	1
  2383  0618  0020               	movlb	0	; select bank0
  2384  0619  00DE               	movwf	??_sprintf
  2385  061A  085E               	movf	??_sprintf,w
  2386  061B  0021               	movlb	1	; select bank1
  2387  061C  07C1               	addwf	sprintf@c^(0+128),f
  2388  061D  0841               	movf	sprintf@c^(0+128),w
  2389  061E  3A0A               	xorlw	10
  2390  061F  1D03               	skipz
  2391  0620  2DEA               	goto	l2453
  2392  0621                     l2461:	
  2393                           
  2394                           ;doprnt.c: 1184: {
  2395                           ;doprnt.c: 1197: if(flag & 0x03)
  2396  0621  3003               	movlw	3
  2397  0622  0530               	andwf	sprintf@flag^(0+128),w
  2398  0623  0020               	movlb	0	; select bank0
  2399  0624  00DE               	movwf	??_sprintf
  2400  0625  3000               	movlw	0
  2401  0626  0021               	movlb	1	; select bank1
  2402  0627  0531               	andwf	(sprintf@flag+1)^(0+128),w
  2403  0628  0020               	movlb	0	; select bank0
  2404  0629  00DF               	movwf	??_sprintf+1
  2405  062A  085F               	movf	??_sprintf+1,w
  2406  062B  045E               	iorwf	??_sprintf,w
  2407  062C  1903               	skipnz
  2408  062D  2E3C               	goto	l2475
  2409                           
  2410                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  2411  062E  302D               	movlw	45
  2412  062F                     L6:	
  2413  062F  00DE               	movwf	??_sprintf
  2414  0630  0021               	movlb	1	; select bank1
  2415  0631  083D               	movf	sprintf@sp^(0+128),w
  2416  0632  0086               	movwf	6
  2417  0633  0187               	clrf	7
  2418  0634  0020               	movlb	0	; select bank0
  2419  0635  085E               	movf	??_sprintf,w
  2420  0636  0081               	movwf	1
  2421  0637  3001               	movlw	1
  2422  0638  00DE               	movwf	??_sprintf
  2423  0639  085E               	movf	??_sprintf,w
  2424  063A  0021               	movlb	1	; select bank1
  2425  063B  07BD               	addwf	sprintf@sp^(0+128),f
  2426  063C                     l2475:	
  2427  063C  30FF               	movlw	-1
  2428  063D  0020               	movlb	0	; select bank0
  2429  063E  00DE               	movwf	??_sprintf
  2430  063F  085E               	movf	??_sprintf,w
  2431  0640  0021               	movlb	1	; select bank1
  2432  0641  07C1               	addwf	sprintf@c^(0+128),f
  2433  0642  0841               	movf	sprintf@c^(0+128),w
  2434  0643  3AFF               	xorlw	255
  2435  0644  1903               	btfsc	3,2
  2436  0645  2EA4               	goto	l2483
  2437                           
  2438                           ;doprnt.c: 1209: {
  2439                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  2440                           
  2441                           ;doprnt.c: 1204: }
  2442                           ;doprnt.c: 1205: while(c--) {
  2443  0646  0841               	movf	sprintf@c^(0+128),w
  2444  0647  0020               	movlb	0	; select bank0
  2445  0648  00DE               	movwf	??_sprintf
  2446  0649  01DF               	clrf	??_sprintf+1
  2447  064A  35DE               	lslf	??_sprintf,f
  2448  064B  0DDF               	rlf	??_sprintf+1,f
  2449  064C  35DE               	lslf	??_sprintf,f
  2450  064D  0DDF               	rlf	??_sprintf+1,f
  2451  064E  3000               	movlw	low (_dpowers| (0+32768))
  2452  064F  075E               	addwf	??_sprintf,w
  2453  0650  0084               	movwf	4
  2454  0651  3090               	movlw	high (_dpowers| (0+32768))
  2455  0652  3D5F               	addwfc	??_sprintf+1,w
  2456  0653  0085               	movwf	5
  2457  0654  3F00               	moviw [0]fsr0
  2458  0655  00F0               	movwf	___lldiv@divisor
  2459  0656  3F01               	moviw [1]fsr0
  2460  0657  00F1               	movwf	___lldiv@divisor+1
  2461  0658  3F02               	moviw [2]fsr0
  2462  0659  00F2               	movwf	___lldiv@divisor+2
  2463  065A  3F03               	moviw [3]fsr0
  2464  065B  00F3               	movwf	___lldiv@divisor+3
  2465  065C  0021               	movlb	1	; select bank1
  2466  065D  0837               	movf	(sprintf@_val+3)^(0+128),w
  2467  065E  00F7               	movwf	___lldiv@dividend+3
  2468  065F  0836               	movf	(sprintf@_val+2)^(0+128),w
  2469  0660  00F6               	movwf	___lldiv@dividend+2
  2470  0661  0835               	movf	(sprintf@_val+1)^(0+128),w
  2471  0662  00F5               	movwf	___lldiv@dividend+1
  2472  0663  0834               	movf	sprintf@_val^(0+128),w
  2473  0664  00F4               	movwf	___lldiv@dividend
  2474  0665  3197  27AE  3183   	fcall	___lldiv
  2475  0668  0873               	movf	?___lldiv+3,w
  2476  0669  0021               	movlb	1	; select bank1
  2477  066A  00AB               	movwf	(sprintf@vd+3)^(0+128)
  2478  066B  0872               	movf	?___lldiv+2,w
  2479  066C  00AA               	movwf	(sprintf@vd+2)^(0+128)
  2480  066D  0871               	movf	?___lldiv+1,w
  2481  066E  00A9               	movwf	(sprintf@vd+1)^(0+128)
  2482  066F  0870               	movf	?___lldiv,w
  2483  0670  00A8               	movwf	sprintf@vd^(0+128)
  2484                           
  2485                           ;doprnt.c: 1211: vd %= 10;
  2486  0671  3000               	movlw	0
  2487  0672  00F3               	movwf	___llmod@divisor+3
  2488  0673  3000               	movlw	0
  2489  0674  00F2               	movwf	___llmod@divisor+2
  2490  0675  3000               	movlw	0
  2491  0676  00F1               	movwf	___llmod@divisor+1
  2492  0677  300A               	movlw	10
  2493  0678  00F0               	movwf	___llmod@divisor
  2494  0679  082B               	movf	(sprintf@vd+3)^(0+128),w
  2495  067A  00F7               	movwf	___llmod@dividend+3
  2496  067B  082A               	movf	(sprintf@vd+2)^(0+128),w
  2497  067C  00F6               	movwf	___llmod@dividend+2
  2498  067D  0829               	movf	(sprintf@vd+1)^(0+128),w
  2499  067E  00F5               	movwf	___llmod@dividend+1
  2500  067F  0828               	movf	sprintf@vd^(0+128),w
  2501  0680  00F4               	movwf	___llmod@dividend
  2502  0681  3197  2725  3183   	fcall	___llmod
  2503  0684  0873               	movf	?___llmod+3,w
  2504  0685  0021               	movlb	1	; select bank1
  2505  0686  00AB               	movwf	(sprintf@vd+3)^(0+128)
  2506  0687  0872               	movf	?___llmod+2,w
  2507  0688  00AA               	movwf	(sprintf@vd+2)^(0+128)
  2508  0689  0871               	movf	?___llmod+1,w
  2509  068A  00A9               	movwf	(sprintf@vd+1)^(0+128)
  2510  068B  0870               	movf	?___llmod,w
  2511  068C  00A8               	movwf	sprintf@vd^(0+128)
  2512                           
  2513                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  2514  068D  0828               	movf	sprintf@vd^(0+128),w
  2515  068E  3E30               	addlw	48
  2516  068F  0020               	movlb	0	; select bank0
  2517  0690  2E2F               	goto	L6
  2518  0691                     l2477:	
  2519                           ;doprnt.c: 1213: }
  2520                           ;doprnt.c: 1215: }
  2521                           ;doprnt.c: 1216: while(exp > 0) {
  2522                           
  2523                           
  2524                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  2525  0691  3030               	movlw	48
  2526  0692  0020               	movlb	0	; select bank0
  2527  0693  00DE               	movwf	??_sprintf
  2528  0694  0021               	movlb	1	; select bank1
  2529  0695  083D               	movf	sprintf@sp^(0+128),w
  2530  0696  0086               	movwf	6
  2531  0697  0187               	clrf	7
  2532  0698  0020               	movlb	0	; select bank0
  2533  0699  085E               	movf	??_sprintf,w
  2534  069A  0081               	movwf	1
  2535  069B  3001               	movlw	1
  2536  069C  00DE               	movwf	??_sprintf
  2537  069D  085E               	movf	??_sprintf,w
  2538  069E  0021               	movlb	1	; select bank1
  2539  069F  07BD               	addwf	sprintf@sp^(0+128),f
  2540                           
  2541                           ;doprnt.c: 1218: exp--;
  2542  06A0  30FF               	movlw	255
  2543  06A1  07BB               	addwf	sprintf@exp^(0+128),f
  2544  06A2  30FF               	movlw	255
  2545  06A3  3DBC               	addwfc	(sprintf@exp+1)^(0+128),f
  2546  06A4                     l2483:	
  2547  06A4  083C               	movf	(sprintf@exp+1)^(0+128),w
  2548  06A5  3A80               	xorlw	128
  2549  06A6  0020               	movlb	0	; select bank0
  2550  06A7  00DE               	movwf	??_sprintf
  2551  06A8  3080               	movlw	128
  2552  06A9  025E               	subwf	??_sprintf,w
  2553  06AA  1D03               	skipz
  2554  06AB  2EAF               	goto	u3475
  2555  06AC  3001               	movlw	1
  2556  06AD  0021               	movlb	1	; select bank1
  2557  06AE  023B               	subwf	sprintf@exp^(0+128),w
  2558  06AF                     u3475:	
  2559  06AF  1803               	skipnc
  2560  06B0  2E91               	goto	l2477
  2561                           
  2562                           ;doprnt.c: 1219: }
  2563                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2564  06B1  0021               	movlb	1	; select bank1
  2565  06B2  0833               	movf	(sprintf@prec+1)^(0+128),w
  2566  06B3  3A80               	xorlw	128
  2567  06B4  0020               	movlb	0	; select bank0
  2568  06B5  00DE               	movwf	??_sprintf
  2569  06B6  3080               	movlw	128
  2570  06B7  025E               	subwf	??_sprintf,w
  2571  06B8  1D03               	skipz
  2572  06B9  2EBD               	goto	u3485
  2573  06BA  3009               	movlw	9
  2574  06BB  0021               	movlb	1	; select bank1
  2575  06BC  0232               	subwf	sprintf@prec^(0+128),w
  2576  06BD                     u3485:	
  2577  06BD  1C03               	skipc
  2578  06BE  2EC1               	goto	l2489
  2579                           
  2580                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2581  06BF  3008               	movlw	8
  2582  06C0  2EC3               	goto	L3
  2583  06C1                     l2489:	
  2584                           
  2585                           ;doprnt.c: 1222: else
  2586                           ;doprnt.c: 1223: c = prec;
  2587  06C1  0021               	movlb	1	; select bank1
  2588  06C2  0832               	movf	sprintf@prec^(0+128),w
  2589  06C3                     L3:	
  2590  06C3  0020               	movlb	0	; select bank0
  2591  06C4  00DE               	movwf	??_sprintf
  2592  06C5  085E               	movf	??_sprintf,w
  2593  06C6  0021               	movlb	1	; select bank1
  2594  06C7  00C1               	movwf	sprintf@c^(0+128)
  2595                           
  2596                           ;doprnt.c: 1224: prec -= c;
  2597  06C8  0841               	movf	sprintf@c^(0+128),w
  2598  06C9  0020               	movlb	0	; select bank0
  2599  06CA  00DE               	movwf	??_sprintf
  2600  06CB  01DF               	clrf	??_sprintf+1
  2601  06CC  1BDE               	btfsc	??_sprintf,7
  2602  06CD  03DF               	decf	??_sprintf+1,f
  2603  06CE  085E               	movf	??_sprintf,w
  2604  06CF  0021               	movlb	1	; select bank1
  2605  06D0  02B2               	subwf	sprintf@prec^(0+128),f
  2606  06D1  0020               	movlb	0	; select bank0
  2607  06D2  085F               	movf	??_sprintf+1,w
  2608  06D3  0021               	movlb	1	; select bank1
  2609  06D4  3BB3               	subwfb	(sprintf@prec+1)^(0+128),f
  2610                           
  2611                           ;doprnt.c: 1228: if(c)
  2612  06D5  0841               	movf	sprintf@c^(0+128),w
  2613  06D6  1903               	btfsc	3,2
  2614  06D7  2EE7               	goto	l2495
  2615                           
  2616                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  2617  06D8  302E               	movlw	46
  2618  06D9  0020               	movlb	0	; select bank0
  2619  06DA  00DE               	movwf	??_sprintf
  2620  06DB  0021               	movlb	1	; select bank1
  2621  06DC  083D               	movf	sprintf@sp^(0+128),w
  2622  06DD  0086               	movwf	6
  2623  06DE  0187               	clrf	7
  2624  06DF  0020               	movlb	0	; select bank0
  2625  06E0  085E               	movf	??_sprintf,w
  2626  06E1  0081               	movwf	1
  2627  06E2  3001               	movlw	1
  2628  06E3  00DE               	movwf	??_sprintf
  2629  06E4  085E               	movf	??_sprintf,w
  2630  06E5  0021               	movlb	1	; select bank1
  2631  06E6  07BD               	addwf	sprintf@sp^(0+128),f
  2632  06E7                     l2495:	
  2633                           
  2634                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2635  06E7  0841               	movf	sprintf@c^(0+128),w
  2636  06E8  3181  213D  3183   	fcall	_scale
  2637  06EB  0020               	movlb	0	; select bank0
  2638  06EC  0838               	movf	?_scale,w
  2639  06ED  0021               	movlb	1	; select bank1
  2640  06EE  00A0               	movwf	_sprintf$813^(0+128)
  2641  06EF  0020               	movlb	0	; select bank0
  2642  06F0  0839               	movf	?_scale+1,w
  2643  06F1  0021               	movlb	1	; select bank1
  2644  06F2  00A1               	movwf	(_sprintf$813+1)^(0+128)
  2645  06F3  0020               	movlb	0	; select bank0
  2646  06F4  083A               	movf	?_scale+2,w
  2647  06F5  0021               	movlb	1	; select bank1
  2648  06F6  00A2               	movwf	(_sprintf$813+2)^(0+128)
  2649                           
  2650                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2651  06F7  0820               	movf	_sprintf$813^(0+128),w
  2652  06F8  0020               	movlb	0	; select bank0
  2653  06F9  00AB               	movwf	___ftmul@f2
  2654  06FA  0021               	movlb	1	; select bank1
  2655  06FB  0821               	movf	(_sprintf$813+1)^(0+128),w
  2656  06FC  0020               	movlb	0	; select bank0
  2657  06FD  00AC               	movwf	___ftmul@f2+1
  2658  06FE  0021               	movlb	1	; select bank1
  2659  06FF  0822               	movf	(_sprintf$813+2)^(0+128),w
  2660  0700  0020               	movlb	0	; select bank0
  2661  0701  00AD               	movwf	___ftmul@f2+2
  2662  0702  0021               	movlb	1	; select bank1
  2663  0703  083E               	movf	sprintf@fval^(0+128),w
  2664  0704  0020               	movlb	0	; select bank0
  2665  0705  00A8               	movwf	___ftmul@f1
  2666  0706  0021               	movlb	1	; select bank1
  2667  0707  083F               	movf	(sprintf@fval+1)^(0+128),w
  2668  0708  0020               	movlb	0	; select bank0
  2669  0709  00A9               	movwf	___ftmul@f1+1
  2670  070A  0021               	movlb	1	; select bank1
  2671  070B  0840               	movf	(sprintf@fval+2)^(0+128),w
  2672  070C  0020               	movlb	0	; select bank0
  2673  070D  00AA               	movwf	___ftmul@f1+2
  2674  070E  318C  2435  3183   	fcall	___ftmul
  2675  0711  0020               	movlb	0	; select bank0
  2676  0712  0828               	movf	?___ftmul,w
  2677  0713  00C1               	movwf	___fttol@f1
  2678  0714  0829               	movf	?___ftmul+1,w
  2679  0715  00C2               	movwf	___fttol@f1+1
  2680  0716  082A               	movf	?___ftmul+2,w
  2681  0717  00C3               	movwf	___fttol@f1+2
  2682  0718  3188  20B8  3183   	fcall	___fttol
  2683  071B  0020               	movlb	0	; select bank0
  2684  071C  0844               	movf	?___fttol+3,w
  2685  071D  0021               	movlb	1	; select bank1
  2686  071E  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2687  071F  0020               	movlb	0	; select bank0
  2688  0720  0843               	movf	?___fttol+2,w
  2689  0721  0021               	movlb	1	; select bank1
  2690  0722  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2691  0723  0020               	movlb	0	; select bank0
  2692  0724  0842               	movf	?___fttol+1,w
  2693  0725  0021               	movlb	1	; select bank1
  2694  0726  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2695  0727  0020               	movlb	0	; select bank0
  2696  0728  0841               	movf	?___fttol,w
  2697  0729  0021               	movlb	1	; select bank1
  2698  072A                     L4:	
  2699  072A  00B4               	movwf	sprintf@_val^(0+128)
  2700  072B  30FF               	movlw	-1
  2701  072C  0020               	movlb	0	; select bank0
  2702  072D  00DE               	movwf	??_sprintf
  2703  072E  085E               	movf	??_sprintf,w
  2704  072F  0021               	movlb	1	; select bank1
  2705  0730  07C1               	addwf	sprintf@c^(0+128),f
  2706  0731  0841               	movf	sprintf@c^(0+128),w
  2707  0732  3AFF               	xorlw	255
  2708  0733  1903               	btfsc	3,2
  2709  0734  2FCA               	goto	l2517
  2710                           
  2711                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2712                           
  2713                           ;doprnt.c: 1237: while(c--) {
  2714  0735  0841               	movf	sprintf@c^(0+128),w
  2715  0736  0020               	movlb	0	; select bank0
  2716  0737  00DE               	movwf	??_sprintf
  2717  0738  01DF               	clrf	??_sprintf+1
  2718  0739  35DE               	lslf	??_sprintf,f
  2719  073A  0DDF               	rlf	??_sprintf+1,f
  2720  073B  35DE               	lslf	??_sprintf,f
  2721  073C  0DDF               	rlf	??_sprintf+1,f
  2722  073D  3000               	movlw	low (_dpowers| (0+32768))
  2723  073E  075E               	addwf	??_sprintf,w
  2724  073F  0084               	movwf	4
  2725  0740  3090               	movlw	high (_dpowers| (0+32768))
  2726  0741  3D5F               	addwfc	??_sprintf+1,w
  2727  0742  0085               	movwf	5
  2728  0743  3F00               	moviw [0]fsr0
  2729  0744  00F0               	movwf	___lldiv@divisor
  2730  0745  3F01               	moviw [1]fsr0
  2731  0746  00F1               	movwf	___lldiv@divisor+1
  2732  0747  3F02               	moviw [2]fsr0
  2733  0748  00F2               	movwf	___lldiv@divisor+2
  2734  0749  3F03               	moviw [3]fsr0
  2735  074A  00F3               	movwf	___lldiv@divisor+3
  2736  074B  0021               	movlb	1	; select bank1
  2737  074C  0837               	movf	(sprintf@_val+3)^(0+128),w
  2738  074D  00F7               	movwf	___lldiv@dividend+3
  2739  074E  0836               	movf	(sprintf@_val+2)^(0+128),w
  2740  074F  00F6               	movwf	___lldiv@dividend+2
  2741  0750  0835               	movf	(sprintf@_val+1)^(0+128),w
  2742  0751  00F5               	movwf	___lldiv@dividend+1
  2743  0752  0834               	movf	sprintf@_val^(0+128),w
  2744  0753  00F4               	movwf	___lldiv@dividend
  2745  0754  3197  27AE  3183   	fcall	___lldiv
  2746  0757  0873               	movf	?___lldiv+3,w
  2747  0758  0021               	movlb	1	; select bank1
  2748  0759  00AF               	movwf	(sprintf@vd_400+3)^(0+128)
  2749  075A  0872               	movf	?___lldiv+2,w
  2750  075B  00AE               	movwf	(sprintf@vd_400+2)^(0+128)
  2751  075C  0871               	movf	?___lldiv+1,w
  2752  075D  00AD               	movwf	(sprintf@vd_400+1)^(0+128)
  2753  075E  0870               	movf	?___lldiv,w
  2754  075F  00AC               	movwf	sprintf@vd_400^(0+128)
  2755                           
  2756                           ;doprnt.c: 1239: vd %= 10;
  2757  0760  3000               	movlw	0
  2758  0761  00F3               	movwf	___llmod@divisor+3
  2759  0762  3000               	movlw	0
  2760  0763  00F2               	movwf	___llmod@divisor+2
  2761  0764  3000               	movlw	0
  2762  0765  00F1               	movwf	___llmod@divisor+1
  2763  0766  300A               	movlw	10
  2764  0767  00F0               	movwf	___llmod@divisor
  2765  0768  082F               	movf	(sprintf@vd_400+3)^(0+128),w
  2766  0769  00F7               	movwf	___llmod@dividend+3
  2767  076A  082E               	movf	(sprintf@vd_400+2)^(0+128),w
  2768  076B  00F6               	movwf	___llmod@dividend+2
  2769  076C  082D               	movf	(sprintf@vd_400+1)^(0+128),w
  2770  076D  00F5               	movwf	___llmod@dividend+1
  2771  076E  082C               	movf	sprintf@vd_400^(0+128),w
  2772  076F  00F4               	movwf	___llmod@dividend
  2773  0770  3197  2725  3183   	fcall	___llmod
  2774  0773  0873               	movf	?___llmod+3,w
  2775  0774  0021               	movlb	1	; select bank1
  2776  0775  00AF               	movwf	(sprintf@vd_400+3)^(0+128)
  2777  0776  0872               	movf	?___llmod+2,w
  2778  0777  00AE               	movwf	(sprintf@vd_400+2)^(0+128)
  2779  0778  0871               	movf	?___llmod+1,w
  2780  0779  00AD               	movwf	(sprintf@vd_400+1)^(0+128)
  2781  077A  0870               	movf	?___llmod,w
  2782  077B  00AC               	movwf	sprintf@vd_400^(0+128)
  2783                           
  2784                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  2785  077C  082C               	movf	sprintf@vd_400^(0+128),w
  2786  077D  3E30               	addlw	48
  2787  077E  0020               	movlb	0	; select bank0
  2788  077F  00DE               	movwf	??_sprintf
  2789  0780  0021               	movlb	1	; select bank1
  2790  0781  083D               	movf	sprintf@sp^(0+128),w
  2791  0782  0086               	movwf	6
  2792  0783  0187               	clrf	7
  2793  0784  0020               	movlb	0	; select bank0
  2794  0785  085E               	movf	??_sprintf,w
  2795  0786  0081               	movwf	1
  2796  0787  3001               	movlw	1
  2797  0788  00DE               	movwf	??_sprintf
  2798  0789  085E               	movf	??_sprintf,w
  2799  078A  0021               	movlb	1	; select bank1
  2800  078B  07BD               	addwf	sprintf@sp^(0+128),f
  2801                           
  2802                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2803  078C  0841               	movf	sprintf@c^(0+128),w
  2804  078D  0020               	movlb	0	; select bank0
  2805  078E  00DE               	movwf	??_sprintf
  2806  078F  01DF               	clrf	??_sprintf+1
  2807  0790  35DE               	lslf	??_sprintf,f
  2808  0791  0DDF               	rlf	??_sprintf+1,f
  2809  0792  35DE               	lslf	??_sprintf,f
  2810  0793  0DDF               	rlf	??_sprintf+1,f
  2811  0794  3000               	movlw	low (_dpowers| (0+32768))
  2812  0795  075E               	addwf	??_sprintf,w
  2813  0796  0084               	movwf	4
  2814  0797  3090               	movlw	high (_dpowers| (0+32768))
  2815  0798  3D5F               	addwfc	??_sprintf+1,w
  2816  0799  0085               	movwf	5
  2817  079A  3F00               	moviw [0]fsr0
  2818  079B  00F0               	movwf	___llmod@divisor
  2819  079C  3F01               	moviw [1]fsr0
  2820  079D  00F1               	movwf	___llmod@divisor+1
  2821  079E  3F02               	moviw [2]fsr0
  2822  079F  00F2               	movwf	___llmod@divisor+2
  2823  07A0  3F03               	moviw [3]fsr0
  2824  07A1  00F3               	movwf	___llmod@divisor+3
  2825  07A2  0021               	movlb	1	; select bank1
  2826  07A3  0837               	movf	(sprintf@_val+3)^(0+128),w
  2827  07A4  00F7               	movwf	___llmod@dividend+3
  2828  07A5  0836               	movf	(sprintf@_val+2)^(0+128),w
  2829  07A6  00F6               	movwf	___llmod@dividend+2
  2830  07A7  0835               	movf	(sprintf@_val+1)^(0+128),w
  2831  07A8  00F5               	movwf	___llmod@dividend+1
  2832  07A9  0834               	movf	sprintf@_val^(0+128),w
  2833  07AA  00F4               	movwf	___llmod@dividend
  2834  07AB  3197  2725  3183   	fcall	___llmod
  2835  07AE  0873               	movf	?___llmod+3,w
  2836  07AF  0021               	movlb	1	; select bank1
  2837  07B0  00B7               	movwf	(sprintf@_val+3)^(0+128)
  2838  07B1  0872               	movf	?___llmod+2,w
  2839  07B2  00B6               	movwf	(sprintf@_val+2)^(0+128)
  2840  07B3  0871               	movf	?___llmod+1,w
  2841  07B4  00B5               	movwf	(sprintf@_val+1)^(0+128)
  2842  07B5  0870               	movf	?___llmod,w
  2843  07B6  2F2A               	goto	L4
  2844  07B7                     l2511:	
  2845                           ;doprnt.c: 1242: }
  2846                           ;doprnt.c: 1244: while(prec) {
  2847                           
  2848                           
  2849                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  2850  07B7  3030               	movlw	48
  2851  07B8  0020               	movlb	0	; select bank0
  2852  07B9  00DE               	movwf	??_sprintf
  2853  07BA  0021               	movlb	1	; select bank1
  2854  07BB  083D               	movf	sprintf@sp^(0+128),w
  2855  07BC  0086               	movwf	6
  2856  07BD  0187               	clrf	7
  2857  07BE  0020               	movlb	0	; select bank0
  2858  07BF  085E               	movf	??_sprintf,w
  2859  07C0  0081               	movwf	1
  2860  07C1  3001               	movlw	1
  2861  07C2  00DE               	movwf	??_sprintf
  2862  07C3  085E               	movf	??_sprintf,w
  2863  07C4  0021               	movlb	1	; select bank1
  2864  07C5  07BD               	addwf	sprintf@sp^(0+128),f
  2865                           
  2866                           ;doprnt.c: 1246: prec--;
  2867  07C6  30FF               	movlw	255
  2868  07C7  07B2               	addwf	sprintf@prec^(0+128),f
  2869  07C8  30FF               	movlw	255
  2870  07C9  3DB3               	addwfc	(sprintf@prec+1)^(0+128),f
  2871  07CA                     l2517:	
  2872  07CA  0833               	movf	(sprintf@prec+1)^(0+128),w
  2873  07CB  0432               	iorwf	sprintf@prec^(0+128),w
  2874  07CC  1903               	btfsc	3,2
  2875  07CD  2B95               	goto	l2525
  2876  07CE  2FB7               	goto	l2511
  2877  07CF                     l2519:	
  2878                           ;doprnt.c: 1247: }
  2879                           ;doprnt.c: 1254: continue;
  2880                           
  2881                           
  2882                           ;doprnt.c: 1255: }
  2883                           ;doprnt.c: 1431: {
  2884                           ;doprnt.c: 1447: if(flag & 0x03)
  2885  07CF  3003               	movlw	3
  2886  07D0  0021               	movlb	1	; select bank1
  2887  07D1  0530               	andwf	sprintf@flag^(0+128),w
  2888  07D2  0020               	movlb	0	; select bank0
  2889  07D3  00DE               	movwf	??_sprintf
  2890  07D4  3000               	movlw	0
  2891  07D5  0021               	movlb	1	; select bank1
  2892  07D6  0531               	andwf	(sprintf@flag+1)^(0+128),w
  2893  07D7  0020               	movlb	0	; select bank0
  2894  07D8  00DF               	movwf	??_sprintf+1
  2895  07D9  085F               	movf	??_sprintf+1,w
  2896  07DA  045E               	iorwf	??_sprintf,w
  2897  07DB  1903               	skipnz
  2898  07DC  2B95               	goto	l2525
  2899                           
  2900                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2901  07DD  302D               	movlw	45
  2902  07DE                     L5:	
  2903  07DE  00DE               	movwf	??_sprintf
  2904  07DF  0021               	movlb	1	; select bank1
  2905  07E0  083D               	movf	sprintf@sp^(0+128),w
  2906  07E1  0086               	movwf	6
  2907  07E2  0187               	clrf	7
  2908  07E3  0020               	movlb	0	; select bank0
  2909  07E4  085E               	movf	??_sprintf,w
  2910  07E5  0081               	movwf	1
  2911  07E6  3001               	movlw	1
  2912  07E7  00DE               	movwf	??_sprintf
  2913  07E8  085E               	movf	??_sprintf,w
  2914  07E9  0021               	movlb	1	; select bank1
  2915  07EA  07BD               	addwf	sprintf@sp^(0+128),f
  2916  07EB  2B95               	goto	l2525
  2917  07EC                     l2527:	
  2918                           ;doprnt.c: 1478: }
  2919                           ;doprnt.c: 1542: }
  2920                           ;doprnt.c: 1544: alldone:
  2921                           
  2922                           
  2923                           ;doprnt.c: 1547: *sp = 0;
  2924  07EC  083D               	movf	sprintf@sp^(0+128),w
  2925  07ED  0086               	movwf	6
  2926  07EE  0187               	clrf	7
  2927  07EF  0181               	clrf	1
  2928  07F0  0008               	return
  2929  07F1                     __end_of_sprintf:	
  2930                           ;doprnt.c: 1549: return 0;
  2931                           ;	Return value of _sprintf is never used
  2932                           
  2933                           
  2934                           	psect	text5
  2935  013D                     __ptext5:	
  2936 ;; *************** function _scale *****************
  2937 ;; Defined at:
  2938 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  scl             1    wreg     char 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  scl             1   32[BANK0 ] char 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  3   24[BANK0 ] char 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2952 ;;      Params:         0       3       0       0       0       0       0       0
  2953 ;;      Locals:         0       4       0       0       0       0       0       0
  2954 ;;      Temps:          0       2       0       0       0       0       0       0
  2955 ;;      Totals:         0       9       0       0       0       0       0       0
  2956 ;;Total ram usage:        9 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    2
  2959 ;; This function calls:
  2960 ;;		___awdiv
  2961 ;;		___awmod
  2962 ;;		___ftmul
  2963 ;;		___wmul
  2964 ;; This function is called by:
  2965 ;;		_sprintf
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           
  2970                           ;psect for function _scale
  2971  013D                     _scale:	
  2972                           
  2973                           ;incstack = 0
  2974                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2975                           ;scale@scl stored from wreg
  2976  013D  0020               	movlb	0	; select bank0
  2977  013E  00C0               	movwf	scale@scl
  2978                           
  2979                           ;doprnt.c: 428: if(scl < 0) {
  2980  013F  1FC0               	btfss	scale@scl,7
  2981  0140  2A68               	goto	l2017
  2982                           
  2983                           ;doprnt.c: 429: scl = -scl;
  2984  0141  09C0               	comf	scale@scl,f
  2985  0142  0AC0               	incf	scale@scl,f
  2986                           
  2987                           ;doprnt.c: 430: if(scl>=110)
  2988  0143  0840               	movf	scale@scl,w
  2989  0144  3A80               	xorlw	128
  2990  0145  3E12               	addlw	-238
  2991  0146  1C03               	skipc
  2992  0147  29EA               	goto	l2007
  2993                           
  2994                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2995  0148  300A               	movlw	10
  2996  0149  00F7               	movwf	___awdiv@divisor
  2997  014A  3000               	movlw	0
  2998  014B  00F8               	movwf	___awdiv@divisor+1
  2999  014C  0840               	movf	scale@scl,w
  3000  014D  00F2               	movwf	___awmod@dividend
  3001  014E  01F3               	clrf	___awmod@dividend+1
  3002  014F  1BF2               	btfsc	___awmod@dividend,7
  3003  0150  03F3               	decf	___awmod@dividend+1,f
  3004  0151  3064               	movlw	100
  3005  0152  00F0               	movwf	___awmod@divisor
  3006  0153  3000               	movlw	0
  3007  0154  00F1               	movwf	___awmod@divisor+1
  3008  0155  3197  2767  3181   	fcall	___awmod
  3009  0158  0871               	movf	?___awmod+1,w
  3010  0159  01FA               	clrf	___awdiv@dividend+1
  3011  015A  07FA               	addwf	___awdiv@dividend+1,f
  3012  015B  0870               	movf	?___awmod,w
  3013  015C  01F9               	clrf	___awdiv@dividend
  3014  015D  07F9               	addwf	___awdiv@dividend,f
  3015  015E  3188  2004  3181   	fcall	___awdiv
  3016  0161  0877               	movf	?___awdiv,w
  3017  0162  3E09               	addlw	9
  3018  0163  0020               	movlb	0	; select bank0
  3019  0164  00A4               	movwf	___wmul@multiplier
  3020  0165  3000               	movlw	0
  3021  0166  3D78               	addwfc	?___awdiv+1,w
  3022  0167  00A5               	movwf	___wmul@multiplier+1
  3023  0168  3003               	movlw	3
  3024  0169  00A6               	movwf	___wmul@multiplicand
  3025  016A  3000               	movlw	0
  3026  016B  00A7               	movwf	___wmul@multiplicand+1
  3027  016C  3196  264B  3181   	fcall	___wmul
  3028  016F  0020               	movlb	0	; select bank0
  3029  0170  0825               	movf	?___wmul+1,w
  3030  0171  0085               	movwf	5
  3031  0172  0824               	movf	?___wmul,w
  3032  0173  0084               	movwf	4
  3033  0174  3028               	movlw	low (__npowers_| (0+32768))
  3034  0175  0784               	addwf	4,f
  3035  0176  3090               	movlw	high (__npowers_| (0+32768))
  3036  0177  3D85               	addwfc	5,f
  3037  0178  3F00               	moviw [0]fsr0
  3038  0179  00A8               	movwf	___ftmul@f1
  3039  017A  3F01               	moviw [1]fsr0
  3040  017B  00A9               	movwf	___ftmul@f1+1
  3041  017C  3F02               	moviw [2]fsr0
  3042  017D  00AA               	movwf	___ftmul@f1+2
  3043  017E  3064               	movlw	100
  3044  017F  00F7               	movwf	___awdiv@divisor
  3045  0180  3000               	movlw	0
  3046  0181  00F8               	movwf	___awdiv@divisor+1
  3047  0182  0840               	movf	scale@scl,w
  3048  0183  00F9               	movwf	___awdiv@dividend
  3049  0184  01FA               	clrf	___awdiv@dividend+1
  3050  0185  1BF9               	btfsc	___awdiv@dividend,7
  3051  0186  03FA               	decf	___awdiv@dividend+1,f
  3052  0187  3188  2004  3181   	fcall	___awdiv
  3053  018A  0877               	movf	?___awdiv,w
  3054  018B  3E12               	addlw	18
  3055  018C  0020               	movlb	0	; select bank0
  3056  018D  00A4               	movwf	___wmul@multiplier
  3057  018E  3000               	movlw	0
  3058  018F  3D78               	addwfc	?___awdiv+1,w
  3059  0190  00A5               	movwf	___wmul@multiplier+1
  3060  0191  3003               	movlw	3
  3061  0192  00A6               	movwf	___wmul@multiplicand
  3062  0193  3000               	movlw	0
  3063  0194  00A7               	movwf	___wmul@multiplicand+1
  3064  0195  3196  264B  3181   	fcall	___wmul
  3065  0198  0020               	movlb	0	; select bank0
  3066  0199  0825               	movf	?___wmul+1,w
  3067  019A  0085               	movwf	5
  3068  019B  0824               	movf	?___wmul,w
  3069  019C  0084               	movwf	4
  3070  019D  3028               	movlw	low (__npowers_| (0+32768))
  3071  019E  0784               	addwf	4,f
  3072  019F  3090               	movlw	high (__npowers_| (0+32768))
  3073  01A0  3D85               	addwfc	5,f
  3074  01A1  3F00               	moviw [0]fsr0
  3075  01A2  00AB               	movwf	___ftmul@f2
  3076  01A3  3F01               	moviw [1]fsr0
  3077  01A4  00AC               	movwf	___ftmul@f2+1
  3078  01A5  3F02               	moviw [2]fsr0
  3079  01A6  00AD               	movwf	___ftmul@f2+2
  3080  01A7  318C  2435  3181   	fcall	___ftmul
  3081  01AA  0020               	movlb	0	; select bank0
  3082  01AB  0828               	movf	?___ftmul,w
  3083  01AC  00BD               	movwf	_scale$812
  3084  01AD  0829               	movf	?___ftmul+1,w
  3085  01AE  00BE               	movwf	_scale$812+1
  3086  01AF  082A               	movf	?___ftmul+2,w
  3087  01B0  00BF               	movwf	_scale$812+2
  3088                           
  3089                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3090  01B1  0840               	movf	scale@scl,w
  3091  01B2  00F2               	movwf	___awmod@dividend
  3092  01B3  01F3               	clrf	___awmod@dividend+1
  3093  01B4  1BF2               	btfsc	___awmod@dividend,7
  3094  01B5  03F3               	decf	___awmod@dividend+1,f
  3095  01B6  300A               	movlw	10
  3096  01B7  00F0               	movwf	___awmod@divisor
  3097  01B8  3000               	movlw	0
  3098  01B9  00F1               	movwf	___awmod@divisor+1
  3099  01BA  3197  2767  3181   	fcall	___awmod
  3100  01BD  0871               	movf	?___awmod+1,w
  3101  01BE  0020               	movlb	0	; select bank0
  3102  01BF  01A5               	clrf	___wmul@multiplier+1
  3103  01C0  07A5               	addwf	___wmul@multiplier+1,f
  3104  01C1  0870               	movf	?___awmod,w
  3105  01C2  01A4               	clrf	___wmul@multiplier
  3106  01C3  07A4               	addwf	___wmul@multiplier,f
  3107  01C4  3003               	movlw	3
  3108  01C5  00A6               	movwf	___wmul@multiplicand
  3109  01C6  3000               	movlw	0
  3110  01C7  00A7               	movwf	___wmul@multiplicand+1
  3111  01C8  3196  264B  3181   	fcall	___wmul
  3112  01CB  0020               	movlb	0	; select bank0
  3113  01CC  0825               	movf	?___wmul+1,w
  3114  01CD  0085               	movwf	5
  3115  01CE  0824               	movf	?___wmul,w
  3116  01CF  0084               	movwf	4
  3117  01D0  3028               	movlw	low (__npowers_| (0+32768))
  3118  01D1  0784               	addwf	4,f
  3119  01D2  3090               	movlw	high (__npowers_| (0+32768))
  3120  01D3  3D85               	addwfc	5,f
  3121  01D4  3F00               	moviw [0]fsr0
  3122  01D5  00A8               	movwf	___ftmul@f1
  3123  01D6  3F01               	moviw [1]fsr0
  3124  01D7  00A9               	movwf	___ftmul@f1+1
  3125  01D8  3F02               	moviw [2]fsr0
  3126  01D9  00AA               	movwf	___ftmul@f1+2
  3127  01DA  083D               	movf	_scale$812,w
  3128  01DB  00AB               	movwf	___ftmul@f2
  3129  01DC  083E               	movf	_scale$812+1,w
  3130  01DD  00AC               	movwf	___ftmul@f2+1
  3131  01DE  083F               	movf	_scale$812+2,w
  3132  01DF  00AD               	movwf	___ftmul@f2+2
  3133  01E0  318C  2435         	fcall	___ftmul
  3134  01E2  0020               	movlb	0	; select bank0
  3135  01E3  0828               	movf	?___ftmul,w
  3136  01E4  00B8               	movwf	?_scale
  3137  01E5  0829               	movf	?___ftmul+1,w
  3138  01E6  00B9               	movwf	?_scale+1
  3139  01E7  082A               	movf	?___ftmul+2,w
  3140  01E8  00BA               	movwf	?_scale+2
  3141  01E9  0008               	return
  3142  01EA                     l2007:	
  3143                           
  3144                           ;doprnt.c: 432: else if(scl > 10)
  3145  01EA  0840               	movf	scale@scl,w
  3146  01EB  3A80               	xorlw	128
  3147  01EC  3E75               	addlw	-139
  3148  01ED  1C03               	skipc
  3149  01EE  2A4B               	goto	l2013
  3150                           
  3151                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3152  01EF  0840               	movf	scale@scl,w
  3153  01F0  00F2               	movwf	___awmod@dividend
  3154  01F1  01F3               	clrf	___awmod@dividend+1
  3155  01F2  1BF2               	btfsc	___awmod@dividend,7
  3156  01F3  03F3               	decf	___awmod@dividend+1,f
  3157  01F4  300A               	movlw	10
  3158  01F5  00F0               	movwf	___awmod@divisor
  3159  01F6  3000               	movlw	0
  3160  01F7  00F1               	movwf	___awmod@divisor+1
  3161  01F8  3197  2767  3181   	fcall	___awmod
  3162  01FB  0871               	movf	?___awmod+1,w
  3163  01FC  0020               	movlb	0	; select bank0
  3164  01FD  01A5               	clrf	___wmul@multiplier+1
  3165  01FE  07A5               	addwf	___wmul@multiplier+1,f
  3166  01FF  0870               	movf	?___awmod,w
  3167  0200  01A4               	clrf	___wmul@multiplier
  3168  0201  07A4               	addwf	___wmul@multiplier,f
  3169  0202  3003               	movlw	3
  3170  0203  00A6               	movwf	___wmul@multiplicand
  3171  0204  3000               	movlw	0
  3172  0205  00A7               	movwf	___wmul@multiplicand+1
  3173  0206  3196  264B  3181   	fcall	___wmul
  3174  0209  0020               	movlb	0	; select bank0
  3175  020A  0825               	movf	?___wmul+1,w
  3176  020B  0085               	movwf	5
  3177  020C  0824               	movf	?___wmul,w
  3178  020D  0084               	movwf	4
  3179  020E  3028               	movlw	low (__npowers_| (0+32768))
  3180  020F  0784               	addwf	4,f
  3181  0210  3090               	movlw	high (__npowers_| (0+32768))
  3182  0211  3D85               	addwfc	5,f
  3183  0212  3F00               	moviw [0]fsr0
  3184  0213  00A8               	movwf	___ftmul@f1
  3185  0214  3F01               	moviw [1]fsr0
  3186  0215  00A9               	movwf	___ftmul@f1+1
  3187  0216  3F02               	moviw [2]fsr0
  3188  0217  00AA               	movwf	___ftmul@f1+2
  3189  0218  300A               	movlw	10
  3190  0219  00F7               	movwf	___awdiv@divisor
  3191  021A  3000               	movlw	0
  3192  021B  00F8               	movwf	___awdiv@divisor+1
  3193  021C  0840               	movf	scale@scl,w
  3194  021D  00F9               	movwf	___awdiv@dividend
  3195  021E  01FA               	clrf	___awdiv@dividend+1
  3196  021F  1BF9               	btfsc	___awdiv@dividend,7
  3197  0220  03FA               	decf	___awdiv@dividend+1,f
  3198  0221  3188  2004  3181   	fcall	___awdiv
  3199  0224  0877               	movf	?___awdiv,w
  3200  0225  3E09               	addlw	9
  3201  0226  0020               	movlb	0	; select bank0
  3202  0227  00A4               	movwf	___wmul@multiplier
  3203  0228  3000               	movlw	0
  3204  0229  3D78               	addwfc	?___awdiv+1,w
  3205  022A  00A5               	movwf	___wmul@multiplier+1
  3206  022B  3003               	movlw	3
  3207  022C  00A6               	movwf	___wmul@multiplicand
  3208  022D  3000               	movlw	0
  3209  022E  00A7               	movwf	___wmul@multiplicand+1
  3210  022F  3196  264B  3181   	fcall	___wmul
  3211  0232  0020               	movlb	0	; select bank0
  3212  0233  0825               	movf	?___wmul+1,w
  3213  0234  0085               	movwf	5
  3214  0235  0824               	movf	?___wmul,w
  3215  0236  0084               	movwf	4
  3216  0237  3028               	movlw	low (__npowers_| (0+32768))
  3217  0238  0784               	addwf	4,f
  3218  0239  3090               	movlw	high (__npowers_| (0+32768))
  3219  023A  3D85               	addwfc	5,f
  3220  023B  3F00               	moviw [0]fsr0
  3221  023C  00AB               	movwf	___ftmul@f2
  3222  023D  3F01               	moviw [1]fsr0
  3223  023E  00AC               	movwf	___ftmul@f2+1
  3224  023F  3F02               	moviw [2]fsr0
  3225  0240  00AD               	movwf	___ftmul@f2+2
  3226  0241  318C  2435         	fcall	___ftmul
  3227  0243  0020               	movlb	0	; select bank0
  3228  0244  0828               	movf	?___ftmul,w
  3229  0245  00B8               	movwf	?_scale
  3230  0246  0829               	movf	?___ftmul+1,w
  3231  0247  00B9               	movwf	?_scale+1
  3232  0248  082A               	movf	?___ftmul+2,w
  3233  0249  00BA               	movwf	?_scale+2
  3234  024A  0008               	return
  3235  024B                     l2013:	
  3236                           
  3237                           ;doprnt.c: 434: return _npowers_[scl];
  3238  024B  0840               	movf	scale@scl,w
  3239  024C  00BB               	movwf	??_scale
  3240  024D  01BC               	clrf	??_scale+1
  3241  024E  083B               	movf	??_scale,w
  3242  024F  00A4               	movwf	___wmul@multiplier
  3243  0250  083C               	movf	??_scale+1,w
  3244  0251  00A5               	movwf	___wmul@multiplier+1
  3245  0252  3003               	movlw	3
  3246  0253  00A6               	movwf	___wmul@multiplicand
  3247  0254  3000               	movlw	0
  3248  0255  00A7               	movwf	___wmul@multiplicand+1
  3249  0256  3196  264B         	fcall	___wmul
  3250  0258  0020               	movlb	0	; select bank0
  3251  0259  0825               	movf	?___wmul+1,w
  3252  025A  0085               	movwf	5
  3253  025B  0824               	movf	?___wmul,w
  3254  025C  0084               	movwf	4
  3255  025D  3028               	movlw	low (__npowers_| (0+32768))
  3256  025E  0784               	addwf	4,f
  3257  025F  3090               	movlw	high (__npowers_| (0+32768))
  3258  0260  3D85               	addwfc	5,f
  3259  0261  3F00               	moviw [0]fsr0
  3260  0262  00B8               	movwf	?_scale
  3261  0263  3F01               	moviw [1]fsr0
  3262  0264  00B9               	movwf	?_scale+1
  3263  0265  3F02               	moviw [2]fsr0
  3264  0266  00BA               	movwf	?_scale+2
  3265  0267  0008               	return
  3266  0268                     l2017:	
  3267                           
  3268                           ;doprnt.c: 435: }
  3269                           ;doprnt.c: 436: if(scl>=110)
  3270  0268  0840               	movf	scale@scl,w
  3271  0269  3A80               	xorlw	128
  3272  026A  3E12               	addlw	-238
  3273  026B  1C03               	skipc
  3274  026C  2B0F               	goto	l2025
  3275                           
  3276                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3277  026D  300A               	movlw	10
  3278  026E  00F7               	movwf	___awdiv@divisor
  3279  026F  3000               	movlw	0
  3280  0270  00F8               	movwf	___awdiv@divisor+1
  3281  0271  0840               	movf	scale@scl,w
  3282  0272  00F2               	movwf	___awmod@dividend
  3283  0273  01F3               	clrf	___awmod@dividend+1
  3284  0274  1BF2               	btfsc	___awmod@dividend,7
  3285  0275  03F3               	decf	___awmod@dividend+1,f
  3286  0276  3064               	movlw	100
  3287  0277  00F0               	movwf	___awmod@divisor
  3288  0278  3000               	movlw	0
  3289  0279  00F1               	movwf	___awmod@divisor+1
  3290  027A  3197  2767  3181   	fcall	___awmod
  3291  027D  0871               	movf	?___awmod+1,w
  3292  027E  01FA               	clrf	___awdiv@dividend+1
  3293  027F  07FA               	addwf	___awdiv@dividend+1,f
  3294  0280  0870               	movf	?___awmod,w
  3295  0281  01F9               	clrf	___awdiv@dividend
  3296  0282  07F9               	addwf	___awdiv@dividend,f
  3297  0283  3188  2004  3181   	fcall	___awdiv
  3298  0286  0877               	movf	?___awdiv,w
  3299  0287  3E09               	addlw	9
  3300  0288  0020               	movlb	0	; select bank0
  3301  0289  00A4               	movwf	___wmul@multiplier
  3302  028A  3000               	movlw	0
  3303  028B  3D78               	addwfc	?___awdiv+1,w
  3304  028C  00A5               	movwf	___wmul@multiplier+1
  3305  028D  3003               	movlw	3
  3306  028E  00A6               	movwf	___wmul@multiplicand
  3307  028F  3000               	movlw	0
  3308  0290  00A7               	movwf	___wmul@multiplicand+1
  3309  0291  3196  264B  3181   	fcall	___wmul
  3310  0294  0020               	movlb	0	; select bank0
  3311  0295  0825               	movf	?___wmul+1,w
  3312  0296  0085               	movwf	5
  3313  0297  0824               	movf	?___wmul,w
  3314  0298  0084               	movwf	4
  3315  0299  304F               	movlw	low (__powers_| (0+32768))
  3316  029A  0784               	addwf	4,f
  3317  029B  3090               	movlw	high (__powers_| (0+32768))
  3318  029C  3D85               	addwfc	5,f
  3319  029D  3F00               	moviw [0]fsr0
  3320  029E  00A8               	movwf	___ftmul@f1
  3321  029F  3F01               	moviw [1]fsr0
  3322  02A0  00A9               	movwf	___ftmul@f1+1
  3323  02A1  3F02               	moviw [2]fsr0
  3324  02A2  00AA               	movwf	___ftmul@f1+2
  3325  02A3  3064               	movlw	100
  3326  02A4  00F7               	movwf	___awdiv@divisor
  3327  02A5  3000               	movlw	0
  3328  02A6  00F8               	movwf	___awdiv@divisor+1
  3329  02A7  0840               	movf	scale@scl,w
  3330  02A8  00F9               	movwf	___awdiv@dividend
  3331  02A9  01FA               	clrf	___awdiv@dividend+1
  3332  02AA  1BF9               	btfsc	___awdiv@dividend,7
  3333  02AB  03FA               	decf	___awdiv@dividend+1,f
  3334  02AC  3188  2004  3181   	fcall	___awdiv
  3335  02AF  0877               	movf	?___awdiv,w
  3336  02B0  3E12               	addlw	18
  3337  02B1  0020               	movlb	0	; select bank0
  3338  02B2  00A4               	movwf	___wmul@multiplier
  3339  02B3  3000               	movlw	0
  3340  02B4  3D78               	addwfc	?___awdiv+1,w
  3341  02B5  00A5               	movwf	___wmul@multiplier+1
  3342  02B6  3003               	movlw	3
  3343  02B7  00A6               	movwf	___wmul@multiplicand
  3344  02B8  3000               	movlw	0
  3345  02B9  00A7               	movwf	___wmul@multiplicand+1
  3346  02BA  3196  264B  3181   	fcall	___wmul
  3347  02BD  0020               	movlb	0	; select bank0
  3348  02BE  0825               	movf	?___wmul+1,w
  3349  02BF  0085               	movwf	5
  3350  02C0  0824               	movf	?___wmul,w
  3351  02C1  0084               	movwf	4
  3352  02C2  304F               	movlw	low (__powers_| (0+32768))
  3353  02C3  0784               	addwf	4,f
  3354  02C4  3090               	movlw	high (__powers_| (0+32768))
  3355  02C5  3D85               	addwfc	5,f
  3356  02C6  3F00               	moviw [0]fsr0
  3357  02C7  00AB               	movwf	___ftmul@f2
  3358  02C8  3F01               	moviw [1]fsr0
  3359  02C9  00AC               	movwf	___ftmul@f2+1
  3360  02CA  3F02               	moviw [2]fsr0
  3361  02CB  00AD               	movwf	___ftmul@f2+2
  3362  02CC  318C  2435  3181   	fcall	___ftmul
  3363  02CF  0020               	movlb	0	; select bank0
  3364  02D0  0828               	movf	?___ftmul,w
  3365  02D1  00BD               	movwf	_scale$812
  3366  02D2  0829               	movf	?___ftmul+1,w
  3367  02D3  00BE               	movwf	_scale$812+1
  3368  02D4  082A               	movf	?___ftmul+2,w
  3369  02D5  00BF               	movwf	_scale$812+2
  3370                           
  3371                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3372  02D6  0840               	movf	scale@scl,w
  3373  02D7  00F2               	movwf	___awmod@dividend
  3374  02D8  01F3               	clrf	___awmod@dividend+1
  3375  02D9  1BF2               	btfsc	___awmod@dividend,7
  3376  02DA  03F3               	decf	___awmod@dividend+1,f
  3377  02DB  300A               	movlw	10
  3378  02DC  00F0               	movwf	___awmod@divisor
  3379  02DD  3000               	movlw	0
  3380  02DE  00F1               	movwf	___awmod@divisor+1
  3381  02DF  3197  2767  3181   	fcall	___awmod
  3382  02E2  0871               	movf	?___awmod+1,w
  3383  02E3  0020               	movlb	0	; select bank0
  3384  02E4  01A5               	clrf	___wmul@multiplier+1
  3385  02E5  07A5               	addwf	___wmul@multiplier+1,f
  3386  02E6  0870               	movf	?___awmod,w
  3387  02E7  01A4               	clrf	___wmul@multiplier
  3388  02E8  07A4               	addwf	___wmul@multiplier,f
  3389  02E9  3003               	movlw	3
  3390  02EA  00A6               	movwf	___wmul@multiplicand
  3391  02EB  3000               	movlw	0
  3392  02EC  00A7               	movwf	___wmul@multiplicand+1
  3393  02ED  3196  264B  3181   	fcall	___wmul
  3394  02F0  0020               	movlb	0	; select bank0
  3395  02F1  0825               	movf	?___wmul+1,w
  3396  02F2  0085               	movwf	5
  3397  02F3  0824               	movf	?___wmul,w
  3398  02F4  0084               	movwf	4
  3399  02F5  304F               	movlw	low (__powers_| (0+32768))
  3400  02F6  0784               	addwf	4,f
  3401  02F7  3090               	movlw	high (__powers_| (0+32768))
  3402  02F8  3D85               	addwfc	5,f
  3403  02F9  3F00               	moviw [0]fsr0
  3404  02FA  00A8               	movwf	___ftmul@f1
  3405  02FB  3F01               	moviw [1]fsr0
  3406  02FC  00A9               	movwf	___ftmul@f1+1
  3407  02FD  3F02               	moviw [2]fsr0
  3408  02FE  00AA               	movwf	___ftmul@f1+2
  3409  02FF  083D               	movf	_scale$812,w
  3410  0300  00AB               	movwf	___ftmul@f2
  3411  0301  083E               	movf	_scale$812+1,w
  3412  0302  00AC               	movwf	___ftmul@f2+1
  3413  0303  083F               	movf	_scale$812+2,w
  3414  0304  00AD               	movwf	___ftmul@f2+2
  3415  0305  318C  2435         	fcall	___ftmul
  3416  0307  0020               	movlb	0	; select bank0
  3417  0308  0828               	movf	?___ftmul,w
  3418  0309  00B8               	movwf	?_scale
  3419  030A  0829               	movf	?___ftmul+1,w
  3420  030B  00B9               	movwf	?_scale+1
  3421  030C  082A               	movf	?___ftmul+2,w
  3422  030D  00BA               	movwf	?_scale+2
  3423  030E  0008               	return
  3424  030F                     l2025:	
  3425                           
  3426                           ;doprnt.c: 438: else if(scl > 10)
  3427  030F  0840               	movf	scale@scl,w
  3428  0310  3A80               	xorlw	128
  3429  0311  3E75               	addlw	-139
  3430  0312  1C03               	skipc
  3431  0313  2B70               	goto	l2031
  3432                           
  3433                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3434  0314  0840               	movf	scale@scl,w
  3435  0315  00F2               	movwf	___awmod@dividend
  3436  0316  01F3               	clrf	___awmod@dividend+1
  3437  0317  1BF2               	btfsc	___awmod@dividend,7
  3438  0318  03F3               	decf	___awmod@dividend+1,f
  3439  0319  300A               	movlw	10
  3440  031A  00F0               	movwf	___awmod@divisor
  3441  031B  3000               	movlw	0
  3442  031C  00F1               	movwf	___awmod@divisor+1
  3443  031D  3197  2767  3181   	fcall	___awmod
  3444  0320  0871               	movf	?___awmod+1,w
  3445  0321  0020               	movlb	0	; select bank0
  3446  0322  01A5               	clrf	___wmul@multiplier+1
  3447  0323  07A5               	addwf	___wmul@multiplier+1,f
  3448  0324  0870               	movf	?___awmod,w
  3449  0325  01A4               	clrf	___wmul@multiplier
  3450  0326  07A4               	addwf	___wmul@multiplier,f
  3451  0327  3003               	movlw	3
  3452  0328  00A6               	movwf	___wmul@multiplicand
  3453  0329  3000               	movlw	0
  3454  032A  00A7               	movwf	___wmul@multiplicand+1
  3455  032B  3196  264B  3181   	fcall	___wmul
  3456  032E  0020               	movlb	0	; select bank0
  3457  032F  0825               	movf	?___wmul+1,w
  3458  0330  0085               	movwf	5
  3459  0331  0824               	movf	?___wmul,w
  3460  0332  0084               	movwf	4
  3461  0333  304F               	movlw	low (__powers_| (0+32768))
  3462  0334  0784               	addwf	4,f
  3463  0335  3090               	movlw	high (__powers_| (0+32768))
  3464  0336  3D85               	addwfc	5,f
  3465  0337  3F00               	moviw [0]fsr0
  3466  0338  00A8               	movwf	___ftmul@f1
  3467  0339  3F01               	moviw [1]fsr0
  3468  033A  00A9               	movwf	___ftmul@f1+1
  3469  033B  3F02               	moviw [2]fsr0
  3470  033C  00AA               	movwf	___ftmul@f1+2
  3471  033D  300A               	movlw	10
  3472  033E  00F7               	movwf	___awdiv@divisor
  3473  033F  3000               	movlw	0
  3474  0340  00F8               	movwf	___awdiv@divisor+1
  3475  0341  0840               	movf	scale@scl,w
  3476  0342  00F9               	movwf	___awdiv@dividend
  3477  0343  01FA               	clrf	___awdiv@dividend+1
  3478  0344  1BF9               	btfsc	___awdiv@dividend,7
  3479  0345  03FA               	decf	___awdiv@dividend+1,f
  3480  0346  3188  2004  3181   	fcall	___awdiv
  3481  0349  0877               	movf	?___awdiv,w
  3482  034A  3E09               	addlw	9
  3483  034B  0020               	movlb	0	; select bank0
  3484  034C  00A4               	movwf	___wmul@multiplier
  3485  034D  3000               	movlw	0
  3486  034E  3D78               	addwfc	?___awdiv+1,w
  3487  034F  00A5               	movwf	___wmul@multiplier+1
  3488  0350  3003               	movlw	3
  3489  0351  00A6               	movwf	___wmul@multiplicand
  3490  0352  3000               	movlw	0
  3491  0353  00A7               	movwf	___wmul@multiplicand+1
  3492  0354  3196  264B  3181   	fcall	___wmul
  3493  0357  0020               	movlb	0	; select bank0
  3494  0358  0825               	movf	?___wmul+1,w
  3495  0359  0085               	movwf	5
  3496  035A  0824               	movf	?___wmul,w
  3497  035B  0084               	movwf	4
  3498  035C  304F               	movlw	low (__powers_| (0+32768))
  3499  035D  0784               	addwf	4,f
  3500  035E  3090               	movlw	high (__powers_| (0+32768))
  3501  035F  3D85               	addwfc	5,f
  3502  0360  3F00               	moviw [0]fsr0
  3503  0361  00AB               	movwf	___ftmul@f2
  3504  0362  3F01               	moviw [1]fsr0
  3505  0363  00AC               	movwf	___ftmul@f2+1
  3506  0364  3F02               	moviw [2]fsr0
  3507  0365  00AD               	movwf	___ftmul@f2+2
  3508  0366  318C  2435         	fcall	___ftmul
  3509  0368  0020               	movlb	0	; select bank0
  3510  0369  0828               	movf	?___ftmul,w
  3511  036A  00B8               	movwf	?_scale
  3512  036B  0829               	movf	?___ftmul+1,w
  3513  036C  00B9               	movwf	?_scale+1
  3514  036D  082A               	movf	?___ftmul+2,w
  3515  036E  00BA               	movwf	?_scale+2
  3516  036F  0008               	return
  3517  0370                     l2031:	
  3518                           
  3519                           ;doprnt.c: 440: return _powers_[scl];
  3520  0370  0840               	movf	scale@scl,w
  3521  0371  00BB               	movwf	??_scale
  3522  0372  01BC               	clrf	??_scale+1
  3523  0373  083B               	movf	??_scale,w
  3524  0374  00A4               	movwf	___wmul@multiplier
  3525  0375  083C               	movf	??_scale+1,w
  3526  0376  00A5               	movwf	___wmul@multiplier+1
  3527  0377  3003               	movlw	3
  3528  0378  00A6               	movwf	___wmul@multiplicand
  3529  0379  3000               	movlw	0
  3530  037A  00A7               	movwf	___wmul@multiplicand+1
  3531  037B  3196  264B         	fcall	___wmul
  3532  037D  0020               	movlb	0	; select bank0
  3533  037E  0825               	movf	?___wmul+1,w
  3534  037F  0085               	movwf	5
  3535  0380  0824               	movf	?___wmul,w
  3536  0381  0084               	movwf	4
  3537  0382  304F               	movlw	low (__powers_| (0+32768))
  3538  0383  0784               	addwf	4,f
  3539  0384  3090               	movlw	high (__powers_| (0+32768))
  3540  0385  3D85               	addwfc	5,f
  3541  0386  3F00               	moviw [0]fsr0
  3542  0387  00B8               	movwf	?_scale
  3543  0388  3F01               	moviw [1]fsr0
  3544  0389  00B9               	movwf	?_scale+1
  3545  038A  3F02               	moviw [2]fsr0
  3546  038B  00BA               	movwf	?_scale+2
  3547  038C  0008               	return
  3548  038D                     __end_of_scale:	
  3549                           
  3550                           	psect	text6
  3551  0E95                     __ptext6:	
  3552 ;; *************** function _fround *****************
  3553 ;; Defined at:
  3554 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  prec            1    wreg     unsigned char 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  prec            1   37[BANK0 ] unsigned char 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  3   24[BANK0 ] unsigned char 
  3561 ;; Registers used:
  3562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3568 ;;      Params:         0       3       0       0       0       0       0       0
  3569 ;;      Locals:         0       7       0       0       0       0       0       0
  3570 ;;      Temps:          0       4       0       0       0       0       0       0
  3571 ;;      Totals:         0      14       0       0       0       0       0       0
  3572 ;;Total ram usage:       14 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    2
  3575 ;; This function calls:
  3576 ;;		___awdiv
  3577 ;;		___awmod
  3578 ;;		___ftmul
  3579 ;;		___wmul
  3580 ;; This function is called by:
  3581 ;;		_sprintf
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           
  3586                           ;psect for function _fround
  3587  0E95                     _fround:	
  3588                           
  3589                           ;incstack = 0
  3590                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3591                           ;fround@prec stored from wreg
  3592  0E95  0020               	movlb	0	; select bank0
  3593  0E96  00C5               	movwf	fround@prec
  3594                           
  3595                           ;doprnt.c: 413: if(prec>=110)
  3596  0E97  306E               	movlw	110
  3597  0E98  0245               	subwf	fround@prec,w
  3598  0E99  1C03               	skipc
  3599  0E9A  2F59               	goto	l1983
  3600                           
  3601                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3602  0E9B  300A               	movlw	10
  3603  0E9C  00F7               	movwf	___awdiv@divisor
  3604  0E9D  3000               	movlw	0
  3605  0E9E  00F8               	movwf	___awdiv@divisor+1
  3606  0E9F  0845               	movf	fround@prec,w
  3607  0EA0  00BB               	movwf	??_fround
  3608  0EA1  01BC               	clrf	??_fround+1
  3609  0EA2  083B               	movf	??_fround,w
  3610  0EA3  00F2               	movwf	___awmod@dividend
  3611  0EA4  083C               	movf	??_fround+1,w
  3612  0EA5  00F3               	movwf	___awmod@dividend+1
  3613  0EA6  3064               	movlw	100
  3614  0EA7  00F0               	movwf	___awmod@divisor
  3615  0EA8  3000               	movlw	0
  3616  0EA9  00F1               	movwf	___awmod@divisor+1
  3617  0EAA  3197  2767  318E   	fcall	___awmod
  3618  0EAD  0871               	movf	?___awmod+1,w
  3619  0EAE  01FA               	clrf	___awdiv@dividend+1
  3620  0EAF  07FA               	addwf	___awdiv@dividend+1,f
  3621  0EB0  0870               	movf	?___awmod,w
  3622  0EB1  01F9               	clrf	___awdiv@dividend
  3623  0EB2  07F9               	addwf	___awdiv@dividend,f
  3624  0EB3  3188  2004  318E   	fcall	___awdiv
  3625  0EB6  0877               	movf	?___awdiv,w
  3626  0EB7  3E09               	addlw	9
  3627  0EB8  0020               	movlb	0	; select bank0
  3628  0EB9  00A4               	movwf	___wmul@multiplier
  3629  0EBA  3000               	movlw	0
  3630  0EBB  3D78               	addwfc	?___awdiv+1,w
  3631  0EBC  00A5               	movwf	___wmul@multiplier+1
  3632  0EBD  3003               	movlw	3
  3633  0EBE  00A6               	movwf	___wmul@multiplicand
  3634  0EBF  3000               	movlw	0
  3635  0EC0  00A7               	movwf	___wmul@multiplicand+1
  3636  0EC1  3196  264B  318E   	fcall	___wmul
  3637  0EC4  0020               	movlb	0	; select bank0
  3638  0EC5  0825               	movf	?___wmul+1,w
  3639  0EC6  0085               	movwf	5
  3640  0EC7  0824               	movf	?___wmul,w
  3641  0EC8  0084               	movwf	4
  3642  0EC9  3028               	movlw	low (__npowers_| (0+32768))
  3643  0ECA  0784               	addwf	4,f
  3644  0ECB  3090               	movlw	high (__npowers_| (0+32768))
  3645  0ECC  3D85               	addwfc	5,f
  3646  0ECD  3F00               	moviw [0]fsr0
  3647  0ECE  00A8               	movwf	___ftmul@f1
  3648  0ECF  3F01               	moviw [1]fsr0
  3649  0ED0  00A9               	movwf	___ftmul@f1+1
  3650  0ED1  3F02               	moviw [2]fsr0
  3651  0ED2  00AA               	movwf	___ftmul@f1+2
  3652  0ED3  3064               	movlw	100
  3653  0ED4  00F7               	movwf	___awdiv@divisor
  3654  0ED5  3000               	movlw	0
  3655  0ED6  00F8               	movwf	___awdiv@divisor+1
  3656  0ED7  0845               	movf	fround@prec,w
  3657  0ED8  00BD               	movwf	??_fround+2
  3658  0ED9  01BE               	clrf	??_fround+3
  3659  0EDA  083D               	movf	??_fround+2,w
  3660  0EDB  00F9               	movwf	___awdiv@dividend
  3661  0EDC  083E               	movf	??_fround+3,w
  3662  0EDD  00FA               	movwf	___awdiv@dividend+1
  3663  0EDE  3188  2004  318E   	fcall	___awdiv
  3664  0EE1  0877               	movf	?___awdiv,w
  3665  0EE2  3E12               	addlw	18
  3666  0EE3  0020               	movlb	0	; select bank0
  3667  0EE4  00A4               	movwf	___wmul@multiplier
  3668  0EE5  3000               	movlw	0
  3669  0EE6  3D78               	addwfc	?___awdiv+1,w
  3670  0EE7  00A5               	movwf	___wmul@multiplier+1
  3671  0EE8  3003               	movlw	3
  3672  0EE9  00A6               	movwf	___wmul@multiplicand
  3673  0EEA  3000               	movlw	0
  3674  0EEB  00A7               	movwf	___wmul@multiplicand+1
  3675  0EEC  3196  264B  318E   	fcall	___wmul
  3676  0EEF  0020               	movlb	0	; select bank0
  3677  0EF0  0825               	movf	?___wmul+1,w
  3678  0EF1  0085               	movwf	5
  3679  0EF2  0824               	movf	?___wmul,w
  3680  0EF3  0084               	movwf	4
  3681  0EF4  3028               	movlw	low (__npowers_| (0+32768))
  3682  0EF5  0784               	addwf	4,f
  3683  0EF6  3090               	movlw	high (__npowers_| (0+32768))
  3684  0EF7  3D85               	addwfc	5,f
  3685  0EF8  3F00               	moviw [0]fsr0
  3686  0EF9  00AB               	movwf	___ftmul@f2
  3687  0EFA  3F01               	moviw [1]fsr0
  3688  0EFB  00AC               	movwf	___ftmul@f2+1
  3689  0EFC  3F02               	moviw [2]fsr0
  3690  0EFD  00AD               	movwf	___ftmul@f2+2
  3691  0EFE  318C  2435  318E   	fcall	___ftmul
  3692  0F01  0020               	movlb	0	; select bank0
  3693  0F02  0828               	movf	?___ftmul,w
  3694  0F03  00C2               	movwf	_fround$810
  3695  0F04  0829               	movf	?___ftmul+1,w
  3696  0F05  00C3               	movwf	_fround$810+1
  3697  0F06  082A               	movf	?___ftmul+2,w
  3698  0F07  00C4               	movwf	_fround$810+2
  3699                           
  3700                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3701  0F08  0845               	movf	fround@prec,w
  3702  0F09  00BB               	movwf	??_fround
  3703  0F0A  01BC               	clrf	??_fround+1
  3704  0F0B  083B               	movf	??_fround,w
  3705  0F0C  00F2               	movwf	___awmod@dividend
  3706  0F0D  083C               	movf	??_fround+1,w
  3707  0F0E  00F3               	movwf	___awmod@dividend+1
  3708  0F0F  300A               	movlw	10
  3709  0F10  00F0               	movwf	___awmod@divisor
  3710  0F11  3000               	movlw	0
  3711  0F12  00F1               	movwf	___awmod@divisor+1
  3712  0F13  3197  2767  318E   	fcall	___awmod
  3713  0F16  0871               	movf	?___awmod+1,w
  3714  0F17  0020               	movlb	0	; select bank0
  3715  0F18  01A5               	clrf	___wmul@multiplier+1
  3716  0F19  07A5               	addwf	___wmul@multiplier+1,f
  3717  0F1A  0870               	movf	?___awmod,w
  3718  0F1B  01A4               	clrf	___wmul@multiplier
  3719  0F1C  07A4               	addwf	___wmul@multiplier,f
  3720  0F1D  3003               	movlw	3
  3721  0F1E  00A6               	movwf	___wmul@multiplicand
  3722  0F1F  3000               	movlw	0
  3723  0F20  00A7               	movwf	___wmul@multiplicand+1
  3724  0F21  3196  264B  318E   	fcall	___wmul
  3725  0F24  0020               	movlb	0	; select bank0
  3726  0F25  0825               	movf	?___wmul+1,w
  3727  0F26  0085               	movwf	5
  3728  0F27  0824               	movf	?___wmul,w
  3729  0F28  0084               	movwf	4
  3730  0F29  3028               	movlw	low (__npowers_| (0+32768))
  3731  0F2A  0784               	addwf	4,f
  3732  0F2B  3090               	movlw	high (__npowers_| (0+32768))
  3733  0F2C  3D85               	addwfc	5,f
  3734  0F2D  3F00               	moviw [0]fsr0
  3735  0F2E  00A8               	movwf	___ftmul@f1
  3736  0F2F  3F01               	moviw [1]fsr0
  3737  0F30  00A9               	movwf	___ftmul@f1+1
  3738  0F31  3F02               	moviw [2]fsr0
  3739  0F32  00AA               	movwf	___ftmul@f1+2
  3740  0F33  0842               	movf	_fround$810,w
  3741  0F34  00AB               	movwf	___ftmul@f2
  3742  0F35  0843               	movf	_fround$810+1,w
  3743  0F36  00AC               	movwf	___ftmul@f2+1
  3744  0F37  0844               	movf	_fround$810+2,w
  3745  0F38  00AD               	movwf	___ftmul@f2+2
  3746  0F39  318C  2435  318E   	fcall	___ftmul
  3747  0F3C  0020               	movlb	0	; select bank0
  3748  0F3D  0828               	movf	?___ftmul,w
  3749  0F3E  00BF               	movwf	_fround$811
  3750  0F3F  0829               	movf	?___ftmul+1,w
  3751  0F40  00C0               	movwf	_fround$811+1
  3752  0F41  082A               	movf	?___ftmul+2,w
  3753  0F42  00C1               	movwf	_fround$811+2
  3754                           
  3755                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3756  0F43  3000               	movlw	0
  3757  0F44  00A8               	movwf	___ftmul@f1
  3758  0F45  3000               	movlw	0
  3759  0F46  00A9               	movwf	___ftmul@f1+1
  3760  0F47  303F               	movlw	63
  3761  0F48  00AA               	movwf	___ftmul@f1+2
  3762  0F49  083F               	movf	_fround$811,w
  3763  0F4A  00AB               	movwf	___ftmul@f2
  3764  0F4B  0840               	movf	_fround$811+1,w
  3765  0F4C  00AC               	movwf	___ftmul@f2+1
  3766  0F4D  0841               	movf	_fround$811+2,w
  3767  0F4E  00AD               	movwf	___ftmul@f2+2
  3768  0F4F  318C  2435         	fcall	___ftmul
  3769  0F51  0020               	movlb	0	; select bank0
  3770  0F52  0828               	movf	?___ftmul,w
  3771  0F53  00B8               	movwf	?_fround
  3772  0F54  0829               	movf	?___ftmul+1,w
  3773  0F55  00B9               	movwf	?_fround+1
  3774  0F56  082A               	movf	?___ftmul+2,w
  3775  0F57  00BA               	movwf	?_fround+2
  3776  0F58  0008               	return
  3777  0F59                     l1983:	
  3778                           
  3779                           ;doprnt.c: 415: else if(prec > 10)
  3780  0F59  300B               	movlw	11
  3781  0F5A  0245               	subwf	fround@prec,w
  3782  0F5B  1C03               	skipc
  3783  0F5C  2FD3               	goto	l1991
  3784                           
  3785                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3786  0F5D  0845               	movf	fround@prec,w
  3787  0F5E  00BB               	movwf	??_fround
  3788  0F5F  01BC               	clrf	??_fround+1
  3789  0F60  083B               	movf	??_fround,w
  3790  0F61  00F2               	movwf	___awmod@dividend
  3791  0F62  083C               	movf	??_fround+1,w
  3792  0F63  00F3               	movwf	___awmod@dividend+1
  3793  0F64  300A               	movlw	10
  3794  0F65  00F0               	movwf	___awmod@divisor
  3795  0F66  3000               	movlw	0
  3796  0F67  00F1               	movwf	___awmod@divisor+1
  3797  0F68  3197  2767  318E   	fcall	___awmod
  3798  0F6B  0871               	movf	?___awmod+1,w
  3799  0F6C  0020               	movlb	0	; select bank0
  3800  0F6D  01A5               	clrf	___wmul@multiplier+1
  3801  0F6E  07A5               	addwf	___wmul@multiplier+1,f
  3802  0F6F  0870               	movf	?___awmod,w
  3803  0F70  01A4               	clrf	___wmul@multiplier
  3804  0F71  07A4               	addwf	___wmul@multiplier,f
  3805  0F72  3003               	movlw	3
  3806  0F73  00A6               	movwf	___wmul@multiplicand
  3807  0F74  3000               	movlw	0
  3808  0F75  00A7               	movwf	___wmul@multiplicand+1
  3809  0F76  3196  264B  318E   	fcall	___wmul
  3810  0F79  0020               	movlb	0	; select bank0
  3811  0F7A  0825               	movf	?___wmul+1,w
  3812  0F7B  0085               	movwf	5
  3813  0F7C  0824               	movf	?___wmul,w
  3814  0F7D  0084               	movwf	4
  3815  0F7E  3028               	movlw	low (__npowers_| (0+32768))
  3816  0F7F  0784               	addwf	4,f
  3817  0F80  3090               	movlw	high (__npowers_| (0+32768))
  3818  0F81  3D85               	addwfc	5,f
  3819  0F82  3F00               	moviw [0]fsr0
  3820  0F83  00A8               	movwf	___ftmul@f1
  3821  0F84  3F01               	moviw [1]fsr0
  3822  0F85  00A9               	movwf	___ftmul@f1+1
  3823  0F86  3F02               	moviw [2]fsr0
  3824  0F87  00AA               	movwf	___ftmul@f1+2
  3825  0F88  300A               	movlw	10
  3826  0F89  00F7               	movwf	___awdiv@divisor
  3827  0F8A  3000               	movlw	0
  3828  0F8B  00F8               	movwf	___awdiv@divisor+1
  3829  0F8C  0845               	movf	fround@prec,w
  3830  0F8D  00BD               	movwf	??_fround+2
  3831  0F8E  01BE               	clrf	??_fround+3
  3832  0F8F  083D               	movf	??_fround+2,w
  3833  0F90  00F9               	movwf	___awdiv@dividend
  3834  0F91  083E               	movf	??_fround+3,w
  3835  0F92  00FA               	movwf	___awdiv@dividend+1
  3836  0F93  3188  2004  318E   	fcall	___awdiv
  3837  0F96  0877               	movf	?___awdiv,w
  3838  0F97  3E09               	addlw	9
  3839  0F98  0020               	movlb	0	; select bank0
  3840  0F99  00A4               	movwf	___wmul@multiplier
  3841  0F9A  3000               	movlw	0
  3842  0F9B  3D78               	addwfc	?___awdiv+1,w
  3843  0F9C  00A5               	movwf	___wmul@multiplier+1
  3844  0F9D  3003               	movlw	3
  3845  0F9E  00A6               	movwf	___wmul@multiplicand
  3846  0F9F  3000               	movlw	0
  3847  0FA0  00A7               	movwf	___wmul@multiplicand+1
  3848  0FA1  3196  264B  318E   	fcall	___wmul
  3849  0FA4  0020               	movlb	0	; select bank0
  3850  0FA5  0825               	movf	?___wmul+1,w
  3851  0FA6  0085               	movwf	5
  3852  0FA7  0824               	movf	?___wmul,w
  3853  0FA8  0084               	movwf	4
  3854  0FA9  3028               	movlw	low (__npowers_| (0+32768))
  3855  0FAA  0784               	addwf	4,f
  3856  0FAB  3090               	movlw	high (__npowers_| (0+32768))
  3857  0FAC  3D85               	addwfc	5,f
  3858  0FAD  3F00               	moviw [0]fsr0
  3859  0FAE  00AB               	movwf	___ftmul@f2
  3860  0FAF  3F01               	moviw [1]fsr0
  3861  0FB0  00AC               	movwf	___ftmul@f2+1
  3862  0FB1  3F02               	moviw [2]fsr0
  3863  0FB2  00AD               	movwf	___ftmul@f2+2
  3864  0FB3  318C  2435  318E   	fcall	___ftmul
  3865  0FB6  0020               	movlb	0	; select bank0
  3866  0FB7  0828               	movf	?___ftmul,w
  3867  0FB8  00C2               	movwf	_fround$810
  3868  0FB9  0829               	movf	?___ftmul+1,w
  3869  0FBA  00C3               	movwf	_fround$810+1
  3870  0FBB  082A               	movf	?___ftmul+2,w
  3871  0FBC  00C4               	movwf	_fround$810+2
  3872                           
  3873                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3874  0FBD  3000               	movlw	0
  3875  0FBE  00A8               	movwf	___ftmul@f1
  3876  0FBF  3000               	movlw	0
  3877  0FC0  00A9               	movwf	___ftmul@f1+1
  3878  0FC1  303F               	movlw	63
  3879  0FC2  00AA               	movwf	___ftmul@f1+2
  3880  0FC3  0842               	movf	_fround$810,w
  3881  0FC4  00AB               	movwf	___ftmul@f2
  3882  0FC5  0843               	movf	_fround$810+1,w
  3883  0FC6  00AC               	movwf	___ftmul@f2+1
  3884  0FC7  0844               	movf	_fround$810+2,w
  3885  0FC8  00AD               	movwf	___ftmul@f2+2
  3886  0FC9  318C  2435         	fcall	___ftmul
  3887  0FCB  0020               	movlb	0	; select bank0
  3888  0FCC  0828               	movf	?___ftmul,w
  3889  0FCD  00B8               	movwf	?_fround
  3890  0FCE  0829               	movf	?___ftmul+1,w
  3891  0FCF  00B9               	movwf	?_fround+1
  3892  0FD0  082A               	movf	?___ftmul+2,w
  3893  0FD1  00BA               	movwf	?_fround+2
  3894  0FD2  0008               	return
  3895  0FD3                     l1991:	
  3896                           
  3897                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3898  0FD3  3000               	movlw	0
  3899  0FD4  00A8               	movwf	___ftmul@f1
  3900  0FD5  3000               	movlw	0
  3901  0FD6  00A9               	movwf	___ftmul@f1+1
  3902  0FD7  303F               	movlw	63
  3903  0FD8  00AA               	movwf	___ftmul@f1+2
  3904  0FD9  0845               	movf	fround@prec,w
  3905  0FDA  00BB               	movwf	??_fround
  3906  0FDB  01BC               	clrf	??_fround+1
  3907  0FDC  083B               	movf	??_fround,w
  3908  0FDD  00A4               	movwf	___wmul@multiplier
  3909  0FDE  083C               	movf	??_fround+1,w
  3910  0FDF  00A5               	movwf	___wmul@multiplier+1
  3911  0FE0  3003               	movlw	3
  3912  0FE1  00A6               	movwf	___wmul@multiplicand
  3913  0FE2  3000               	movlw	0
  3914  0FE3  00A7               	movwf	___wmul@multiplicand+1
  3915  0FE4  3196  264B  318E   	fcall	___wmul
  3916  0FE7  0020               	movlb	0	; select bank0
  3917  0FE8  0825               	movf	?___wmul+1,w
  3918  0FE9  0085               	movwf	5
  3919  0FEA  0824               	movf	?___wmul,w
  3920  0FEB  0084               	movwf	4
  3921  0FEC  3028               	movlw	low (__npowers_| (0+32768))
  3922  0FED  0784               	addwf	4,f
  3923  0FEE  3090               	movlw	high (__npowers_| (0+32768))
  3924  0FEF  3D85               	addwfc	5,f
  3925  0FF0  3F00               	moviw [0]fsr0
  3926  0FF1  00AB               	movwf	___ftmul@f2
  3927  0FF2  3F01               	moviw [1]fsr0
  3928  0FF3  00AC               	movwf	___ftmul@f2+1
  3929  0FF4  3F02               	moviw [2]fsr0
  3930  0FF5  00AD               	movwf	___ftmul@f2+2
  3931  0FF6  318C  2435         	fcall	___ftmul
  3932  0FF8  0020               	movlb	0	; select bank0
  3933  0FF9  0828               	movf	?___ftmul,w
  3934  0FFA  00B8               	movwf	?_fround
  3935  0FFB  0829               	movf	?___ftmul+1,w
  3936  0FFC  00B9               	movwf	?_fround+1
  3937  0FFD  082A               	movf	?___ftmul+2,w
  3938  0FFE  00BA               	movwf	?_fround+2
  3939  0FFF  0008               	return
  3940  1000                     __end_of_fround:	
  3941                           
  3942                           	psect	text7
  3943  164B                     __ptext7:	
  3944 ;; *************** function ___wmul *****************
  3945 ;; Defined at:
  3946 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  multiplier      2    4[BANK0 ] unsigned int 
  3949 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  product         2   12[COMMON] unsigned int 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  2    4[BANK0 ] unsigned int 
  3954 ;; Registers used:
  3955 ;;		wreg, status,2, status,0
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3961 ;;      Params:         0       4       0       0       0       0       0       0
  3962 ;;      Locals:         2       0       0       0       0       0       0       0
  3963 ;;      Temps:          0       0       0       0       0       0       0       0
  3964 ;;      Totals:         2       4       0       0       0       0       0       0
  3965 ;;Total ram usage:        6 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; This function calls:
  3968 ;;		Nothing
  3969 ;; This function is called by:
  3970 ;;		_fround
  3971 ;;		_scale
  3972 ;;		_sprintf
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           
  3977                           ;psect for function ___wmul
  3978  164B                     ___wmul:	
  3979                           
  3980                           ;incstack = 0
  3981                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3982  164B  01FC               	clrf	___wmul@product
  3983  164C  01FD               	clrf	___wmul@product+1
  3984  164D                     l1697:	
  3985  164D  0020               	movlb	0	; select bank0
  3986  164E  1C24               	btfss	___wmul@multiplier,0
  3987  164F  2E54               	goto	l256
  3988  1650  0826               	movf	___wmul@multiplicand,w
  3989  1651  07FC               	addwf	___wmul@product,f
  3990  1652  0827               	movf	___wmul@multiplicand+1,w
  3991  1653  3DFD               	addwfc	___wmul@product+1,f
  3992  1654                     l256:	
  3993  1654  3001               	movlw	1
  3994  1655                     u1955:	
  3995  1655  35A6               	lslf	___wmul@multiplicand,f
  3996  1656  0DA7               	rlf	___wmul@multiplicand+1,f
  3997  1657  0B89               	decfsz	9,f
  3998  1658  2E55               	goto	u1955
  3999  1659  3001               	movlw	1
  4000  165A                     u1965:	
  4001  165A  36A5               	lsrf	___wmul@multiplier+1,f
  4002  165B  0CA4               	rrf	___wmul@multiplier,f
  4003  165C  0B89               	decfsz	9,f
  4004  165D  2E5A               	goto	u1965
  4005  165E  0825               	movf	___wmul@multiplier+1,w
  4006  165F  0424               	iorwf	___wmul@multiplier,w
  4007  1660  1D03               	skipz
  4008  1661  2E4D               	goto	l1697
  4009  1662  087D               	movf	___wmul@product+1,w
  4010  1663  01A5               	clrf	?___wmul+1
  4011  1664  07A5               	addwf	?___wmul+1,f
  4012  1665  087C               	movf	___wmul@product,w
  4013  1666  01A4               	clrf	?___wmul
  4014  1667  07A4               	addwf	?___wmul,f
  4015  1668  0008               	return
  4016  1669                     __end_of___wmul:	
  4017                           
  4018                           	psect	text8
  4019  0C35                     __ptext8:	
  4020 ;; *************** function ___ftmul *****************
  4021 ;; Defined at:
  4022 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;  f1              3    8[BANK0 ] float 
  4025 ;;  f2              3   11[BANK0 ] float 
  4026 ;; Auto vars:     Size  Location     Type
  4027 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  4028 ;;  sign            1   23[BANK0 ] unsigned char 
  4029 ;;  cntr            1   22[BANK0 ] unsigned char 
  4030 ;;  exp             1   18[BANK0 ] unsigned char 
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  3    8[BANK0 ] float 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0, pclath, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4040 ;;      Params:         0       6       0       0       0       0       0       0
  4041 ;;      Locals:         0       6       0       0       0       0       0       0
  4042 ;;      Temps:          0       4       0       0       0       0       0       0
  4043 ;;      Totals:         0      16       0       0       0       0       0       0
  4044 ;;Total ram usage:       16 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    1
  4047 ;; This function calls:
  4048 ;;		___ftpack
  4049 ;; This function is called by:
  4050 ;;		_loop
  4051 ;;		_fround
  4052 ;;		_scale
  4053 ;;		_sprintf
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           
  4058                           ;psect for function ___ftmul
  4059  0C35                     ___ftmul:	
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4063  0C35  0020               	movlb	0	; select bank0
  4064  0C36  0828               	movf	___ftmul@f1,w
  4065  0C37  00AE               	movwf	??___ftmul
  4066  0C38  0829               	movf	___ftmul@f1+1,w
  4067  0C39  00AF               	movwf	??___ftmul+1
  4068  0C3A  082A               	movf	___ftmul@f1+2,w
  4069  0C3B  00B0               	movwf	??___ftmul+2
  4070  0C3C  1003               	clrc
  4071  0C3D  0D2F               	rlf	??___ftmul+1,w
  4072  0C3E  0D30               	rlf	??___ftmul+2,w
  4073  0C3F  00B1               	movwf	??___ftmul+3
  4074  0C40  0831               	movf	??___ftmul+3,w
  4075  0C41  00B2               	movwf	___ftmul@exp
  4076  0C42  08B2               	movf	___ftmul@exp,f
  4077  0C43  1D03               	skipz
  4078  0C44  2C4C               	goto	l1867
  4079  0C45  3000               	movlw	0
  4080  0C46  00A8               	movwf	?___ftmul
  4081  0C47  3000               	movlw	0
  4082  0C48  00A9               	movwf	?___ftmul+1
  4083  0C49  3000               	movlw	0
  4084  0C4A  00AA               	movwf	?___ftmul+2
  4085  0C4B  0008               	return
  4086  0C4C                     l1867:	
  4087  0C4C  082B               	movf	___ftmul@f2,w
  4088  0C4D  00AE               	movwf	??___ftmul
  4089  0C4E  082C               	movf	___ftmul@f2+1,w
  4090  0C4F  00AF               	movwf	??___ftmul+1
  4091  0C50  082D               	movf	___ftmul@f2+2,w
  4092  0C51  00B0               	movwf	??___ftmul+2
  4093  0C52  1003               	clrc
  4094  0C53  0D2F               	rlf	??___ftmul+1,w
  4095  0C54  0D30               	rlf	??___ftmul+2,w
  4096  0C55  00B1               	movwf	??___ftmul+3
  4097  0C56  0831               	movf	??___ftmul+3,w
  4098  0C57  00B7               	movwf	___ftmul@sign
  4099  0C58  08B7               	movf	___ftmul@sign,f
  4100  0C59  1D03               	skipz
  4101  0C5A  2C62               	goto	l1873
  4102  0C5B  3000               	movlw	0
  4103  0C5C  00A8               	movwf	?___ftmul
  4104  0C5D  3000               	movlw	0
  4105  0C5E  00A9               	movwf	?___ftmul+1
  4106  0C5F  3000               	movlw	0
  4107  0C60  00AA               	movwf	?___ftmul+2
  4108  0C61  0008               	return
  4109  0C62                     l1873:	
  4110  0C62  0837               	movf	___ftmul@sign,w
  4111  0C63  3E7B               	addlw	123
  4112  0C64  00AE               	movwf	??___ftmul
  4113  0C65  082E               	movf	??___ftmul,w
  4114  0C66  07B2               	addwf	___ftmul@exp,f
  4115  0C67  0828               	movf	___ftmul@f1,w
  4116  0C68  00AE               	movwf	??___ftmul
  4117  0C69  0829               	movf	___ftmul@f1+1,w
  4118  0C6A  00AF               	movwf	??___ftmul+1
  4119  0C6B  082A               	movf	___ftmul@f1+2,w
  4120  0C6C  00B0               	movwf	??___ftmul+2
  4121  0C6D  3010               	movlw	16
  4122  0C6E                     u2425:	
  4123  0C6E  36B0               	lsrf	??___ftmul+2,f
  4124  0C6F  0CAF               	rrf	??___ftmul+1,f
  4125  0C70  0CAE               	rrf	??___ftmul,f
  4126  0C71  0B89               	decfsz	9,f
  4127  0C72  2C6E               	goto	u2425
  4128  0C73  082E               	movf	??___ftmul,w
  4129  0C74  00B1               	movwf	??___ftmul+3
  4130  0C75  0831               	movf	??___ftmul+3,w
  4131  0C76  00B7               	movwf	___ftmul@sign
  4132  0C77  082B               	movf	___ftmul@f2,w
  4133  0C78  00AE               	movwf	??___ftmul
  4134  0C79  082C               	movf	___ftmul@f2+1,w
  4135  0C7A  00AF               	movwf	??___ftmul+1
  4136  0C7B  082D               	movf	___ftmul@f2+2,w
  4137  0C7C  00B0               	movwf	??___ftmul+2
  4138  0C7D  3010               	movlw	16
  4139  0C7E                     u2435:	
  4140  0C7E  36B0               	lsrf	??___ftmul+2,f
  4141  0C7F  0CAF               	rrf	??___ftmul+1,f
  4142  0C80  0CAE               	rrf	??___ftmul,f
  4143  0C81  0B89               	decfsz	9,f
  4144  0C82  2C7E               	goto	u2435
  4145  0C83  082E               	movf	??___ftmul,w
  4146  0C84  00B1               	movwf	??___ftmul+3
  4147  0C85  0831               	movf	??___ftmul+3,w
  4148  0C86  06B7               	xorwf	___ftmul@sign,f
  4149  0C87  3080               	movlw	128
  4150  0C88  00AE               	movwf	??___ftmul
  4151  0C89  082E               	movf	??___ftmul,w
  4152  0C8A  05B7               	andwf	___ftmul@sign,f
  4153  0C8B  17A9               	bsf	___ftmul@f1+1,7
  4154  0C8C  17AC               	bsf	___ftmul@f2+1,7
  4155  0C8D  30FF               	movlw	255
  4156  0C8E  05AB               	andwf	___ftmul@f2,f
  4157  0C8F  30FF               	movlw	255
  4158  0C90  05AC               	andwf	___ftmul@f2+1,f
  4159  0C91  3000               	movlw	0
  4160  0C92  05AD               	andwf	___ftmul@f2+2,f
  4161  0C93  3000               	movlw	0
  4162  0C94  00B3               	movwf	___ftmul@f3_as_product
  4163  0C95  3000               	movlw	0
  4164  0C96  00B4               	movwf	___ftmul@f3_as_product+1
  4165  0C97  3000               	movlw	0
  4166  0C98  00B5               	movwf	___ftmul@f3_as_product+2
  4167  0C99  3007               	movlw	7
  4168  0C9A  00AE               	movwf	??___ftmul
  4169  0C9B  082E               	movf	??___ftmul,w
  4170  0C9C  00B6               	movwf	___ftmul@cntr
  4171  0C9D                     l1885:	
  4172  0C9D  1C28               	btfss	___ftmul@f1,0
  4173  0C9E  2CA5               	goto	l1889
  4174  0C9F  082B               	movf	___ftmul@f2,w
  4175  0CA0  07B3               	addwf	___ftmul@f3_as_product,f
  4176  0CA1  082C               	movf	___ftmul@f2+1,w
  4177  0CA2  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  4178  0CA3  082D               	movf	___ftmul@f2+2,w
  4179  0CA4  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  4180  0CA5                     l1889:	
  4181  0CA5  3001               	movlw	1
  4182  0CA6                     u2455:	
  4183  0CA6  36AA               	lsrf	___ftmul@f1+2,f
  4184  0CA7  0CA9               	rrf	___ftmul@f1+1,f
  4185  0CA8  0CA8               	rrf	___ftmul@f1,f
  4186  0CA9  0B89               	decfsz	9,f
  4187  0CAA  2CA6               	goto	u2455
  4188  0CAB  3001               	movlw	1
  4189  0CAC                     u2465:	
  4190  0CAC  35AB               	lslf	___ftmul@f2,f
  4191  0CAD  0DAC               	rlf	___ftmul@f2+1,f
  4192  0CAE  0DAD               	rlf	___ftmul@f2+2,f
  4193  0CAF  0B89               	decfsz	9,f
  4194  0CB0  2CAC               	goto	u2465
  4195  0CB1  3001               	movlw	1
  4196  0CB2  02B6               	subwf	___ftmul@cntr,f
  4197  0CB3  1D03               	btfss	3,2
  4198  0CB4  2C9D               	goto	l1885
  4199  0CB5  3009               	movlw	9
  4200  0CB6  00AE               	movwf	??___ftmul
  4201  0CB7  082E               	movf	??___ftmul,w
  4202  0CB8  00B6               	movwf	___ftmul@cntr
  4203  0CB9                     l1897:	
  4204  0CB9  1C28               	btfss	___ftmul@f1,0
  4205  0CBA  2CC1               	goto	l1901
  4206  0CBB  082B               	movf	___ftmul@f2,w
  4207  0CBC  07B3               	addwf	___ftmul@f3_as_product,f
  4208  0CBD  082C               	movf	___ftmul@f2+1,w
  4209  0CBE  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  4210  0CBF  082D               	movf	___ftmul@f2+2,w
  4211  0CC0  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  4212  0CC1                     l1901:	
  4213  0CC1  3001               	movlw	1
  4214  0CC2                     u2495:	
  4215  0CC2  36AA               	lsrf	___ftmul@f1+2,f
  4216  0CC3  0CA9               	rrf	___ftmul@f1+1,f
  4217  0CC4  0CA8               	rrf	___ftmul@f1,f
  4218  0CC5  0B89               	decfsz	9,f
  4219  0CC6  2CC2               	goto	u2495
  4220  0CC7  3001               	movlw	1
  4221  0CC8                     u2505:	
  4222  0CC8  36B5               	lsrf	___ftmul@f3_as_product+2,f
  4223  0CC9  0CB4               	rrf	___ftmul@f3_as_product+1,f
  4224  0CCA  0CB3               	rrf	___ftmul@f3_as_product,f
  4225  0CCB  0B89               	decfsz	9,f
  4226  0CCC  2CC8               	goto	u2505
  4227  0CCD  3001               	movlw	1
  4228  0CCE  02B6               	subwf	___ftmul@cntr,f
  4229  0CCF  1D03               	btfss	3,2
  4230  0CD0  2CB9               	goto	l1897
  4231  0CD1  0833               	movf	___ftmul@f3_as_product,w
  4232  0CD2  00F0               	movwf	___ftpack@arg
  4233  0CD3  0834               	movf	___ftmul@f3_as_product+1,w
  4234  0CD4  00F1               	movwf	___ftpack@arg+1
  4235  0CD5  0835               	movf	___ftmul@f3_as_product+2,w
  4236  0CD6  00F2               	movwf	___ftpack@arg+2
  4237  0CD7  0832               	movf	___ftmul@exp,w
  4238  0CD8  00AE               	movwf	??___ftmul
  4239  0CD9  082E               	movf	??___ftmul,w
  4240  0CDA  00F3               	movwf	___ftpack@exp
  4241  0CDB  0837               	movf	___ftmul@sign,w
  4242  0CDC  00AF               	movwf	??___ftmul+1
  4243  0CDD  082F               	movf	??___ftmul+1,w
  4244  0CDE  00F4               	movwf	___ftpack@sign
  4245  0CDF  3188  2058         	fcall	___ftpack
  4246  0CE1  0870               	movf	?___ftpack,w
  4247  0CE2  0020               	movlb	0	; select bank0
  4248  0CE3  00A8               	movwf	?___ftmul
  4249  0CE4  0871               	movf	?___ftpack+1,w
  4250  0CE5  00A9               	movwf	?___ftmul+1
  4251  0CE6  0872               	movf	?___ftpack+2,w
  4252  0CE7  00AA               	movwf	?___ftmul+2
  4253  0CE8  0008               	return
  4254  0CE9                     __end_of___ftmul:	
  4255                           
  4256                           	psect	text9
  4257  1767                     __ptext9:	
  4258 ;; *************** function ___awmod *****************
  4259 ;; Defined at:
  4260 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  divisor         2    0[COMMON] int 
  4263 ;;  dividend        2    2[COMMON] int 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  sign            1    6[COMMON] unsigned char 
  4266 ;;  counter         1    5[COMMON] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  2    0[COMMON] int 
  4269 ;; Registers used:
  4270 ;;		wreg, status,2, status,0
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4276 ;;      Params:         4       0       0       0       0       0       0       0
  4277 ;;      Locals:         2       0       0       0       0       0       0       0
  4278 ;;      Temps:          1       0       0       0       0       0       0       0
  4279 ;;      Totals:         7       0       0       0       0       0       0       0
  4280 ;;Total ram usage:        7 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_fround
  4286 ;;		_scale
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           
  4291                           ;psect for function ___awmod
  4292  1767                     ___awmod:	
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4296  1767  01F6               	clrf	___awmod@sign
  4297  1768  1FF3               	btfss	___awmod@dividend+1,7
  4298  1769  2F71               	goto	l1759
  4299  176A  09F2               	comf	___awmod@dividend,f
  4300  176B  09F3               	comf	___awmod@dividend+1,f
  4301  176C  0AF2               	incf	___awmod@dividend,f
  4302  176D  1903               	skipnz
  4303  176E  0AF3               	incf	___awmod@dividend+1,f
  4304  176F  01F6               	clrf	___awmod@sign
  4305  1770  0AF6               	incf	___awmod@sign,f
  4306  1771                     l1759:	
  4307  1771  1FF1               	btfss	___awmod@divisor+1,7
  4308  1772  2F78               	goto	l1763
  4309  1773  09F0               	comf	___awmod@divisor,f
  4310  1774  09F1               	comf	___awmod@divisor+1,f
  4311  1775  0AF0               	incf	___awmod@divisor,f
  4312  1776  1903               	skipnz
  4313  1777  0AF1               	incf	___awmod@divisor+1,f
  4314  1778                     l1763:	
  4315  1778  0871               	movf	___awmod@divisor+1,w
  4316  1779  0470               	iorwf	___awmod@divisor,w
  4317  177A  1903               	skipnz
  4318  177B  2F9F               	goto	l1781
  4319  177C  01F5               	clrf	___awmod@counter
  4320  177D  0AF5               	incf	___awmod@counter,f
  4321  177E                     l1771:	
  4322  177E  1BF1               	btfsc	___awmod@divisor+1,7
  4323  177F  2F8A               	goto	l1773
  4324  1780  3001               	movlw	1
  4325  1781                     u2115:	
  4326  1781  35F0               	lslf	___awmod@divisor,f
  4327  1782  0DF1               	rlf	___awmod@divisor+1,f
  4328  1783  0B89               	decfsz	9,f
  4329  1784  2F81               	goto	u2115
  4330  1785  3001               	movlw	1
  4331  1786  00F4               	movwf	??___awmod
  4332  1787  0874               	movf	??___awmod,w
  4333  1788  07F5               	addwf	___awmod@counter,f
  4334  1789  2F7E               	goto	l1771
  4335  178A                     l1773:	
  4336  178A  0871               	movf	___awmod@divisor+1,w
  4337  178B  0273               	subwf	___awmod@dividend+1,w
  4338  178C  1D03               	skipz
  4339  178D  2F90               	goto	u2135
  4340  178E  0870               	movf	___awmod@divisor,w
  4341  178F  0272               	subwf	___awmod@dividend,w
  4342  1790                     u2135:	
  4343  1790  1C03               	skipc
  4344  1791  2F96               	goto	l1777
  4345  1792  0870               	movf	___awmod@divisor,w
  4346  1793  02F2               	subwf	___awmod@dividend,f
  4347  1794  0871               	movf	___awmod@divisor+1,w
  4348  1795  3BF3               	subwfb	___awmod@dividend+1,f
  4349  1796                     l1777:	
  4350  1796  3001               	movlw	1
  4351  1797                     u2145:	
  4352  1797  36F1               	lsrf	___awmod@divisor+1,f
  4353  1798  0CF0               	rrf	___awmod@divisor,f
  4354  1799  0B89               	decfsz	9,f
  4355  179A  2F97               	goto	u2145
  4356  179B  3001               	movlw	1
  4357  179C  02F5               	subwf	___awmod@counter,f
  4358  179D  1D03               	btfss	3,2
  4359  179E  2F8A               	goto	l1773
  4360  179F                     l1781:	
  4361  179F  0876               	movf	___awmod@sign,w
  4362  17A0  1903               	btfsc	3,2
  4363  17A1  2FA7               	goto	l1785
  4364  17A2  09F2               	comf	___awmod@dividend,f
  4365  17A3  09F3               	comf	___awmod@dividend+1,f
  4366  17A4  0AF2               	incf	___awmod@dividend,f
  4367  17A5  1903               	skipnz
  4368  17A6  0AF3               	incf	___awmod@dividend+1,f
  4369  17A7                     l1785:	
  4370  17A7  0873               	movf	___awmod@dividend+1,w
  4371  17A8  01F1               	clrf	?___awmod+1
  4372  17A9  07F1               	addwf	?___awmod+1,f
  4373  17AA  0872               	movf	___awmod@dividend,w
  4374  17AB  01F0               	clrf	?___awmod
  4375  17AC  07F0               	addwf	?___awmod,f
  4376  17AD  0008               	return
  4377  17AE                     __end_of___awmod:	
  4378                           
  4379                           	psect	text10
  4380  0804                     __ptext10:	
  4381 ;; *************** function ___awdiv *****************
  4382 ;; Defined at:
  4383 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;  divisor         2    7[COMMON] int 
  4386 ;;  dividend        2    9[COMMON] int 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  quotient        2    2[BANK0 ] int 
  4389 ;;  sign            1    1[BANK0 ] unsigned char 
  4390 ;;  counter         1    0[BANK0 ] unsigned char 
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  2    7[COMMON] int 
  4393 ;; Registers used:
  4394 ;;		wreg, status,2, status,0
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4400 ;;      Params:         4       0       0       0       0       0       0       0
  4401 ;;      Locals:         0       4       0       0       0       0       0       0
  4402 ;;      Temps:          1       0       0       0       0       0       0       0
  4403 ;;      Totals:         5       4       0       0       0       0       0       0
  4404 ;;Total ram usage:        9 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_fround
  4410 ;;		_scale
  4411 ;;		_sprintf
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           
  4416                           ;psect for function ___awdiv
  4417  0804                     ___awdiv:	
  4418                           
  4419                           ;incstack = 0
  4420                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4421  0804  0020               	movlb	0	; select bank0
  4422  0805  01A1               	clrf	___awdiv@sign
  4423  0806  1FF8               	btfss	___awdiv@divisor+1,7
  4424  0807  280F               	goto	l1715
  4425  0808  09F7               	comf	___awdiv@divisor,f
  4426  0809  09F8               	comf	___awdiv@divisor+1,f
  4427  080A  0AF7               	incf	___awdiv@divisor,f
  4428  080B  1903               	skipnz
  4429  080C  0AF8               	incf	___awdiv@divisor+1,f
  4430  080D  01A1               	clrf	___awdiv@sign
  4431  080E  0AA1               	incf	___awdiv@sign,f
  4432  080F                     l1715:	
  4433  080F  1FFA               	btfss	___awdiv@dividend+1,7
  4434  0810  281A               	goto	l1721
  4435  0811  09F9               	comf	___awdiv@dividend,f
  4436  0812  09FA               	comf	___awdiv@dividend+1,f
  4437  0813  0AF9               	incf	___awdiv@dividend,f
  4438  0814  1903               	skipnz
  4439  0815  0AFA               	incf	___awdiv@dividend+1,f
  4440  0816  3001               	movlw	1
  4441  0817  00FB               	movwf	??___awdiv
  4442  0818  087B               	movf	??___awdiv,w
  4443  0819  06A1               	xorwf	___awdiv@sign,f
  4444  081A                     l1721:	
  4445  081A  01A2               	clrf	___awdiv@quotient
  4446  081B  01A3               	clrf	___awdiv@quotient+1
  4447  081C  0878               	movf	___awdiv@divisor+1,w
  4448  081D  0477               	iorwf	___awdiv@divisor,w
  4449  081E  1903               	skipnz
  4450  081F  2849               	goto	l1743
  4451  0820  01A0               	clrf	___awdiv@counter
  4452  0821  0AA0               	incf	___awdiv@counter,f
  4453  0822                     l1731:	
  4454  0822  1BF8               	btfsc	___awdiv@divisor+1,7
  4455  0823  282E               	goto	l1733
  4456  0824  3001               	movlw	1
  4457  0825                     u2015:	
  4458  0825  35F7               	lslf	___awdiv@divisor,f
  4459  0826  0DF8               	rlf	___awdiv@divisor+1,f
  4460  0827  0B89               	decfsz	9,f
  4461  0828  2825               	goto	u2015
  4462  0829  3001               	movlw	1
  4463  082A  00FB               	movwf	??___awdiv
  4464  082B  087B               	movf	??___awdiv,w
  4465  082C  07A0               	addwf	___awdiv@counter,f
  4466  082D  2822               	goto	l1731
  4467  082E                     l1733:	
  4468  082E  3001               	movlw	1
  4469  082F                     u2035:	
  4470  082F  35A2               	lslf	___awdiv@quotient,f
  4471  0830  0DA3               	rlf	___awdiv@quotient+1,f
  4472  0831  0B89               	decfsz	9,f
  4473  0832  282F               	goto	u2035
  4474  0833  0878               	movf	___awdiv@divisor+1,w
  4475  0834  027A               	subwf	___awdiv@dividend+1,w
  4476  0835  1D03               	skipz
  4477  0836  2839               	goto	u2045
  4478  0837  0877               	movf	___awdiv@divisor,w
  4479  0838  0279               	subwf	___awdiv@dividend,w
  4480  0839                     u2045:	
  4481  0839  1C03               	skipc
  4482  083A  2840               	goto	l1739
  4483  083B  0877               	movf	___awdiv@divisor,w
  4484  083C  02F9               	subwf	___awdiv@dividend,f
  4485  083D  0878               	movf	___awdiv@divisor+1,w
  4486  083E  3BFA               	subwfb	___awdiv@dividend+1,f
  4487  083F  1422               	bsf	___awdiv@quotient,0
  4488  0840                     l1739:	
  4489  0840  3001               	movlw	1
  4490  0841                     u2055:	
  4491  0841  36F8               	lsrf	___awdiv@divisor+1,f
  4492  0842  0CF7               	rrf	___awdiv@divisor,f
  4493  0843  0B89               	decfsz	9,f
  4494  0844  2841               	goto	u2055
  4495  0845  3001               	movlw	1
  4496  0846  02A0               	subwf	___awdiv@counter,f
  4497  0847  1D03               	btfss	3,2
  4498  0848  282E               	goto	l1733
  4499  0849                     l1743:	
  4500  0849  0821               	movf	___awdiv@sign,w
  4501  084A  1903               	btfsc	3,2
  4502  084B  2851               	goto	l1747
  4503  084C  09A2               	comf	___awdiv@quotient,f
  4504  084D  09A3               	comf	___awdiv@quotient+1,f
  4505  084E  0AA2               	incf	___awdiv@quotient,f
  4506  084F  1903               	skipnz
  4507  0850  0AA3               	incf	___awdiv@quotient+1,f
  4508  0851                     l1747:	
  4509  0851  0823               	movf	___awdiv@quotient+1,w
  4510  0852  01F8               	clrf	?___awdiv+1
  4511  0853  07F8               	addwf	?___awdiv+1,f
  4512  0854  0822               	movf	___awdiv@quotient,w
  4513  0855  01F7               	clrf	?___awdiv
  4514  0856  07F7               	addwf	?___awdiv,f
  4515  0857  0008               	return
  4516  0858                     __end_of___awdiv:	
  4517                           
  4518                           	psect	text11
  4519  0CE9                     __ptext11:	
  4520 ;; *************** function __tdiv_to_l_ *****************
  4521 ;; Defined at:
  4522 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  f1              3    0[COMMON] float 
  4525 ;;  f2              3    3[COMMON] float 
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  quot            4    0[BANK0 ] unsigned long 
  4528 ;;  exp1            1    5[BANK0 ] unsigned char 
  4529 ;;  cntr            1    4[BANK0 ] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  4    0[COMMON] unsigned long 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4539 ;;      Params:         6       0       0       0       0       0       0       0
  4540 ;;      Locals:         0       6       0       0       0       0       0       0
  4541 ;;      Temps:          4       0       0       0       0       0       0       0
  4542 ;;      Totals:        10       6       0       0       0       0       0       0
  4543 ;;Total ram usage:       16 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		_sprintf
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           
  4553                           ;psect for function __tdiv_to_l_
  4554  0CE9                     __tdiv_to_l_:	
  4555                           
  4556                           ;incstack = 0
  4557                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  4558  0CE9  0870               	movf	__tdiv_to_l_@f1,w
  4559  0CEA  00F6               	movwf	??__tdiv_to_l_
  4560  0CEB  0871               	movf	__tdiv_to_l_@f1+1,w
  4561  0CEC  00F7               	movwf	??__tdiv_to_l_+1
  4562  0CED  0872               	movf	__tdiv_to_l_@f1+2,w
  4563  0CEE  00F8               	movwf	??__tdiv_to_l_+2
  4564  0CEF  1003               	clrc
  4565  0CF0  0D77               	rlf	??__tdiv_to_l_+1,w
  4566  0CF1  0D78               	rlf	??__tdiv_to_l_+2,w
  4567  0CF2  00F9               	movwf	??__tdiv_to_l_+3
  4568  0CF3  0879               	movf	??__tdiv_to_l_+3,w
  4569  0CF4  0020               	movlb	0	; select bank0
  4570  0CF5  00A5               	movwf	__tdiv_to_l_@exp1
  4571  0CF6  08A5               	movf	__tdiv_to_l_@exp1,f
  4572  0CF7  1D03               	skipz
  4573  0CF8  2D02               	goto	l2041
  4574  0CF9  3000               	movlw	0
  4575  0CFA  00F3               	movwf	?__tdiv_to_l_+3
  4576  0CFB  3000               	movlw	0
  4577  0CFC  00F2               	movwf	?__tdiv_to_l_+2
  4578  0CFD  3000               	movlw	0
  4579  0CFE  00F1               	movwf	?__tdiv_to_l_+1
  4580  0CFF  3000               	movlw	0
  4581  0D00  00F0               	movwf	?__tdiv_to_l_
  4582  0D01  0008               	return
  4583  0D02                     l2041:	
  4584  0D02  0873               	movf	__tdiv_to_l_@f2,w
  4585  0D03  00F6               	movwf	??__tdiv_to_l_
  4586  0D04  0874               	movf	__tdiv_to_l_@f2+1,w
  4587  0D05  00F7               	movwf	??__tdiv_to_l_+1
  4588  0D06  0875               	movf	__tdiv_to_l_@f2+2,w
  4589  0D07  00F8               	movwf	??__tdiv_to_l_+2
  4590  0D08  1003               	clrc
  4591  0D09  0D77               	rlf	??__tdiv_to_l_+1,w
  4592  0D0A  0D78               	rlf	??__tdiv_to_l_+2,w
  4593  0D0B  00F9               	movwf	??__tdiv_to_l_+3
  4594  0D0C  0879               	movf	??__tdiv_to_l_+3,w
  4595  0D0D  00A4               	movwf	__tdiv_to_l_@cntr
  4596  0D0E  08A4               	movf	__tdiv_to_l_@cntr,f
  4597  0D0F  1D03               	skipz
  4598  0D10  2D1A               	goto	l489
  4599  0D11  3000               	movlw	0
  4600  0D12  00F3               	movwf	?__tdiv_to_l_+3
  4601  0D13  3000               	movlw	0
  4602  0D14  00F2               	movwf	?__tdiv_to_l_+2
  4603  0D15  3000               	movlw	0
  4604  0D16  00F1               	movwf	?__tdiv_to_l_+1
  4605  0D17  3000               	movlw	0
  4606  0D18  00F0               	movwf	?__tdiv_to_l_
  4607  0D19  0008               	return
  4608  0D1A                     l489:	
  4609  0D1A  17F1               	bsf	__tdiv_to_l_@f1+1,7
  4610  0D1B  30FF               	movlw	255
  4611  0D1C  05F0               	andwf	__tdiv_to_l_@f1,f
  4612  0D1D  30FF               	movlw	255
  4613  0D1E  05F1               	andwf	__tdiv_to_l_@f1+1,f
  4614  0D1F  3000               	movlw	0
  4615  0D20  05F2               	andwf	__tdiv_to_l_@f1+2,f
  4616  0D21  17F4               	bsf	__tdiv_to_l_@f2+1,7
  4617  0D22  30FF               	movlw	255
  4618  0D23  05F3               	andwf	__tdiv_to_l_@f2,f
  4619  0D24  30FF               	movlw	255
  4620  0D25  05F4               	andwf	__tdiv_to_l_@f2+1,f
  4621  0D26  3000               	movlw	0
  4622  0D27  05F5               	andwf	__tdiv_to_l_@f2+2,f
  4623  0D28  3000               	movlw	0
  4624  0D29  00A3               	movwf	__tdiv_to_l_@quot+3
  4625  0D2A  3000               	movlw	0
  4626  0D2B  00A2               	movwf	__tdiv_to_l_@quot+2
  4627  0D2C  3000               	movlw	0
  4628  0D2D  00A1               	movwf	__tdiv_to_l_@quot+1
  4629  0D2E  3000               	movlw	0
  4630  0D2F  00A0               	movwf	__tdiv_to_l_@quot
  4631  0D30  307F               	movlw	127
  4632  0D31  02A5               	subwf	__tdiv_to_l_@exp1,f
  4633  0D32  3098               	movlw	152
  4634  0D33  0724               	addwf	__tdiv_to_l_@cntr,w
  4635  0D34  00F6               	movwf	??__tdiv_to_l_
  4636  0D35  0876               	movf	??__tdiv_to_l_,w
  4637  0D36  02A5               	subwf	__tdiv_to_l_@exp1,f
  4638  0D37  3018               	movlw	24
  4639  0D38  00F6               	movwf	??__tdiv_to_l_
  4640  0D39  0876               	movf	??__tdiv_to_l_,w
  4641  0D3A  00A4               	movwf	__tdiv_to_l_@cntr
  4642  0D3B                     l2055:	
  4643  0D3B  3001               	movlw	1
  4644  0D3C                     u2735:	
  4645  0D3C  35A0               	lslf	__tdiv_to_l_@quot,f
  4646  0D3D  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4647  0D3E  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4648  0D3F  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4649  0D40  0B89               	decfsz	9,f
  4650  0D41  2D3C               	goto	u2735
  4651  0D42  0875               	movf	__tdiv_to_l_@f2+2,w
  4652  0D43  0272               	subwf	__tdiv_to_l_@f1+2,w
  4653  0D44  1D03               	skipz
  4654  0D45  2D4C               	goto	u2745
  4655  0D46  0874               	movf	__tdiv_to_l_@f2+1,w
  4656  0D47  0271               	subwf	__tdiv_to_l_@f1+1,w
  4657  0D48  1D03               	skipz
  4658  0D49  2D4C               	goto	u2745
  4659  0D4A  0873               	movf	__tdiv_to_l_@f2,w
  4660  0D4B  0270               	subwf	__tdiv_to_l_@f1,w
  4661  0D4C                     u2745:	
  4662  0D4C  1C03               	skipc
  4663  0D4D  2D55               	goto	l2063
  4664  0D4E  0873               	movf	__tdiv_to_l_@f2,w
  4665  0D4F  02F0               	subwf	__tdiv_to_l_@f1,f
  4666  0D50  0874               	movf	__tdiv_to_l_@f2+1,w
  4667  0D51  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  4668  0D52  0875               	movf	__tdiv_to_l_@f2+2,w
  4669  0D53  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  4670  0D54  1420               	bsf	__tdiv_to_l_@quot,0
  4671  0D55                     l2063:	
  4672  0D55  3001               	movlw	1
  4673  0D56                     u2755:	
  4674  0D56  35F0               	lslf	__tdiv_to_l_@f1,f
  4675  0D57  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  4676  0D58  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  4677  0D59  0B89               	decfsz	9,f
  4678  0D5A  2D56               	goto	u2755
  4679  0D5B  3001               	movlw	1
  4680  0D5C  02A4               	subwf	__tdiv_to_l_@cntr,f
  4681  0D5D  1D03               	btfss	3,2
  4682  0D5E  2D3B               	goto	l2055
  4683  0D5F  1FA5               	btfss	__tdiv_to_l_@exp1,7
  4684  0D60  2D7D               	goto	l2075
  4685  0D61  0825               	movf	__tdiv_to_l_@exp1,w
  4686  0D62  3A80               	xorlw	128
  4687  0D63  3E97               	addlw	151
  4688  0D64  1803               	skipnc
  4689  0D65  2D6F               	goto	l2073
  4690  0D66  3000               	movlw	0
  4691  0D67  00F3               	movwf	?__tdiv_to_l_+3
  4692  0D68  3000               	movlw	0
  4693  0D69  00F2               	movwf	?__tdiv_to_l_+2
  4694  0D6A  3000               	movlw	0
  4695  0D6B  00F1               	movwf	?__tdiv_to_l_+1
  4696  0D6C  3000               	movlw	0
  4697  0D6D  00F0               	movwf	?__tdiv_to_l_
  4698  0D6E  0008               	return
  4699  0D6F                     l2073:	
  4700  0D6F  3001               	movlw	1
  4701  0D70                     u2795:	
  4702  0D70  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  4703  0D71  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  4704  0D72  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  4705  0D73  0CA0               	rrf	__tdiv_to_l_@quot,f
  4706  0D74  0B89               	decfsz	9,f
  4707  0D75  2D70               	goto	u2795
  4708  0D76  3001               	movlw	1
  4709  0D77  00F6               	movwf	??__tdiv_to_l_
  4710  0D78  0876               	movf	??__tdiv_to_l_,w
  4711  0D79  07A5               	addwf	__tdiv_to_l_@exp1,f
  4712  0D7A  1903               	btfsc	3,2
  4713  0D7B  2D96               	goto	l2085
  4714  0D7C  2D6F               	goto	l2073
  4715  0D7D                     l2075:	
  4716  0D7D  3018               	movlw	24
  4717  0D7E  0225               	subwf	__tdiv_to_l_@exp1,w
  4718  0D7F  1C03               	skipc
  4719  0D80  2D93               	goto	l2083
  4720  0D81  3000               	movlw	0
  4721  0D82  00F3               	movwf	?__tdiv_to_l_+3
  4722  0D83  3000               	movlw	0
  4723  0D84  00F2               	movwf	?__tdiv_to_l_+2
  4724  0D85  3000               	movlw	0
  4725  0D86  00F1               	movwf	?__tdiv_to_l_+1
  4726  0D87  3000               	movlw	0
  4727  0D88  00F0               	movwf	?__tdiv_to_l_
  4728  0D89  0008               	return
  4729  0D8A                     l2081:	
  4730  0D8A  3001               	movlw	1
  4731  0D8B                     u2825:	
  4732  0D8B  35A0               	lslf	__tdiv_to_l_@quot,f
  4733  0D8C  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4734  0D8D  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4735  0D8E  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4736  0D8F  0B89               	decfsz	9,f
  4737  0D90  2D8B               	goto	u2825
  4738  0D91  3001               	movlw	1
  4739  0D92  02A5               	subwf	__tdiv_to_l_@exp1,f
  4740  0D93                     l2083:	
  4741  0D93  08A5               	movf	__tdiv_to_l_@exp1,f
  4742  0D94  1D03               	skipz
  4743  0D95  2D8A               	goto	l2081
  4744  0D96                     l2085:	
  4745  0D96  0823               	movf	__tdiv_to_l_@quot+3,w
  4746  0D97  00F3               	movwf	?__tdiv_to_l_+3
  4747  0D98  0822               	movf	__tdiv_to_l_@quot+2,w
  4748  0D99  00F2               	movwf	?__tdiv_to_l_+2
  4749  0D9A  0821               	movf	__tdiv_to_l_@quot+1,w
  4750  0D9B  00F1               	movwf	?__tdiv_to_l_+1
  4751  0D9C  0820               	movf	__tdiv_to_l_@quot,w
  4752  0D9D  00F0               	movwf	?__tdiv_to_l_
  4753  0D9E  0008               	return
  4754  0D9F                     __end_of__tdiv_to_l_:	
  4755                           
  4756                           	psect	text12
  4757  0020                     __ptext12:	
  4758 ;; *************** function __div_to_l_ *****************
  4759 ;; Defined at:
  4760 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  f1              3    0[COMMON] unsigned long 
  4763 ;;  f2              3    3[COMMON] unsigned long 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  quot            4    0[BANK0 ] unsigned long 
  4766 ;;  exp1            1    5[BANK0 ] unsigned char 
  4767 ;;  cntr            1    4[BANK0 ] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  4    0[COMMON] unsigned long 
  4770 ;; Registers used:
  4771 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4777 ;;      Params:         6       0       0       0       0       0       0       0
  4778 ;;      Locals:         0       6       0       0       0       0       0       0
  4779 ;;      Temps:          8       0       0       0       0       0       0       0
  4780 ;;      Totals:        14       6       0       0       0       0       0       0
  4781 ;;Total ram usage:       20 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_sprintf
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function __div_to_l_
  4792  0020                     __div_to_l_:	
  4793                           
  4794                           ;incstack = 0
  4795                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  4796  0020  3070               	movlw	low __div_to_l_@f1
  4797  0021  0086               	movwf	6
  4798  0022  0187               	clrf	7
  4799  0023  3F40               	moviw [0]fsr1
  4800  0024  00F6               	movwf	??__div_to_l_
  4801  0025  3F41               	moviw [1]fsr1
  4802  0026  00F7               	movwf	??__div_to_l_+1
  4803  0027  3F42               	moviw [2]fsr1
  4804  0028  00F8               	movwf	??__div_to_l_+2
  4805  0029  3F43               	moviw [3]fsr1
  4806  002A  00F9               	movwf	??__div_to_l_+3
  4807  002B  1003               	clrc
  4808  002C  0D78               	rlf	??__div_to_l_+2,w
  4809  002D  0D79               	rlf	??__div_to_l_+3,w
  4810  002E  00FA               	movwf	??__div_to_l_+4
  4811  002F  087A               	movf	??__div_to_l_+4,w
  4812  0030  0020               	movlb	0	; select bank0
  4813  0031  00A5               	movwf	__div_to_l_@exp1
  4814  0032  08A5               	movf	__div_to_l_@exp1,f
  4815  0033  1D03               	skipz
  4816  0034  283E               	goto	l2095
  4817  0035  3000               	movlw	0
  4818  0036  00F3               	movwf	?__div_to_l_+3
  4819  0037  3000               	movlw	0
  4820  0038  00F2               	movwf	?__div_to_l_+2
  4821  0039  3000               	movlw	0
  4822  003A  00F1               	movwf	?__div_to_l_+1
  4823  003B  3000               	movlw	0
  4824  003C  00F0               	movwf	?__div_to_l_
  4825  003D  0008               	return
  4826  003E                     l2095:	
  4827  003E  3073               	movlw	low __div_to_l_@f2
  4828  003F  0086               	movwf	6
  4829  0040  0187               	clrf	7
  4830  0041  3F40               	moviw [0]fsr1
  4831  0042  00F6               	movwf	??__div_to_l_
  4832  0043  3F41               	moviw [1]fsr1
  4833  0044  00F7               	movwf	??__div_to_l_+1
  4834  0045  3F42               	moviw [2]fsr1
  4835  0046  00F8               	movwf	??__div_to_l_+2
  4836  0047  3F43               	moviw [3]fsr1
  4837  0048  00F9               	movwf	??__div_to_l_+3
  4838  0049  1003               	clrc
  4839  004A  0D78               	rlf	??__div_to_l_+2,w
  4840  004B  0D79               	rlf	??__div_to_l_+3,w
  4841  004C  00FA               	movwf	??__div_to_l_+4
  4842  004D  087A               	movf	??__div_to_l_+4,w
  4843  004E  00A4               	movwf	__div_to_l_@cntr
  4844  004F  08A4               	movf	__div_to_l_@cntr,f
  4845  0050  1D03               	skipz
  4846  0051  285B               	goto	l2101
  4847  0052  3000               	movlw	0
  4848  0053  00F3               	movwf	?__div_to_l_+3
  4849  0054  3000               	movlw	0
  4850  0055  00F2               	movwf	?__div_to_l_+2
  4851  0056  3000               	movlw	0
  4852  0057  00F1               	movwf	?__div_to_l_+1
  4853  0058  3000               	movlw	0
  4854  0059  00F0               	movwf	?__div_to_l_
  4855  005A  0008               	return
  4856  005B                     l2101:	
  4857  005B  3070               	movlw	low __div_to_l_@f1
  4858  005C  0086               	movwf	6
  4859  005D  0187               	clrf	7
  4860  005E  3000               	movlw	0
  4861  005F  0481               	iorwf	1,f
  4862  0060  3141               	addfsr 1,1
  4863  0061  3000               	movlw	0
  4864  0062  0481               	iorwf	1,f
  4865  0063  3141               	addfsr 1,1
  4866  0064  3080               	movlw	128
  4867  0065  0481               	iorwf	1,f
  4868  0066  3141               	addfsr 1,1
  4869  0067  3000               	movlw	0
  4870  0068  0481               	iorwf	1,f
  4871  0069  3070               	movlw	low __div_to_l_@f1
  4872  006A  0086               	movwf	6
  4873  006B  0187               	clrf	7
  4874  006C  30FF               	movlw	255
  4875  006D  0581               	andwf	1,f
  4876  006E  3141               	addfsr 1,1
  4877  006F  30FF               	movlw	255
  4878  0070  0581               	andwf	1,f
  4879  0071  3141               	addfsr 1,1
  4880  0072  30FF               	movlw	255
  4881  0073  0581               	andwf	1,f
  4882  0074  3141               	addfsr 1,1
  4883  0075  3000               	movlw	0
  4884  0076  0581               	andwf	1,f
  4885  0077  3073               	movlw	low __div_to_l_@f2
  4886  0078  0086               	movwf	6
  4887  0079  0187               	clrf	7
  4888  007A  3000               	movlw	0
  4889  007B  0481               	iorwf	1,f
  4890  007C  3141               	addfsr 1,1
  4891  007D  3000               	movlw	0
  4892  007E  0481               	iorwf	1,f
  4893  007F  3141               	addfsr 1,1
  4894  0080  3080               	movlw	128
  4895  0081  0481               	iorwf	1,f
  4896  0082  3141               	addfsr 1,1
  4897  0083  3000               	movlw	0
  4898  0084  0481               	iorwf	1,f
  4899  0085  3073               	movlw	low __div_to_l_@f2
  4900  0086  0086               	movwf	6
  4901  0087  0187               	clrf	7
  4902  0088  30FF               	movlw	255
  4903  0089  0581               	andwf	1,f
  4904  008A  3141               	addfsr 1,1
  4905  008B  30FF               	movlw	255
  4906  008C  0581               	andwf	1,f
  4907  008D  3141               	addfsr 1,1
  4908  008E  30FF               	movlw	255
  4909  008F  0581               	andwf	1,f
  4910  0090  3141               	addfsr 1,1
  4911  0091  3000               	movlw	0
  4912  0092  0581               	andwf	1,f
  4913  0093  3000               	movlw	0
  4914  0094  00A3               	movwf	__div_to_l_@quot+3
  4915  0095  3000               	movlw	0
  4916  0096  00A2               	movwf	__div_to_l_@quot+2
  4917  0097  3000               	movlw	0
  4918  0098  00A1               	movwf	__div_to_l_@quot+1
  4919  0099  3000               	movlw	0
  4920  009A  00A0               	movwf	__div_to_l_@quot
  4921  009B  307F               	movlw	127
  4922  009C  02A5               	subwf	__div_to_l_@exp1,f
  4923  009D  30A0               	movlw	160
  4924  009E  0724               	addwf	__div_to_l_@cntr,w
  4925  009F  00F6               	movwf	??__div_to_l_
  4926  00A0  0876               	movf	??__div_to_l_,w
  4927  00A1  02A5               	subwf	__div_to_l_@exp1,f
  4928  00A2  3020               	movlw	32
  4929  00A3  00F6               	movwf	??__div_to_l_
  4930  00A4  0876               	movf	??__div_to_l_,w
  4931  00A5  00A4               	movwf	__div_to_l_@cntr
  4932  00A6                     l2111:	
  4933  00A6  3001               	movlw	1
  4934  00A7                     u2865:	
  4935  00A7  35A0               	lslf	__div_to_l_@quot,f
  4936  00A8  0DA1               	rlf	__div_to_l_@quot+1,f
  4937  00A9  0DA2               	rlf	__div_to_l_@quot+2,f
  4938  00AA  0DA3               	rlf	__div_to_l_@quot+3,f
  4939  00AB  0B89               	decfsz	9,f
  4940  00AC  28A7               	goto	u2865
  4941  00AD  3073               	movlw	low __div_to_l_@f2
  4942  00AE  0086               	movwf	6
  4943  00AF  0187               	clrf	7
  4944  00B0  3F40               	moviw [0]fsr1
  4945  00B1  00F6               	movwf	??__div_to_l_
  4946  00B2  3F41               	moviw [1]fsr1
  4947  00B3  00F7               	movwf	??__div_to_l_+1
  4948  00B4  3F42               	moviw [2]fsr1
  4949  00B5  00F8               	movwf	??__div_to_l_+2
  4950  00B6  3F43               	moviw [3]fsr1
  4951  00B7  00F9               	movwf	??__div_to_l_+3
  4952  00B8  3070               	movlw	low __div_to_l_@f1
  4953  00B9  0086               	movwf	6
  4954  00BA  0187               	clrf	7
  4955  00BB  3F40               	moviw [0]fsr1
  4956  00BC  00FA               	movwf	??__div_to_l_+4
  4957  00BD  3F41               	moviw [1]fsr1
  4958  00BE  00FB               	movwf	??__div_to_l_+5
  4959  00BF  3F42               	moviw [2]fsr1
  4960  00C0  00FC               	movwf	??__div_to_l_+6
  4961  00C1  3F43               	moviw [3]fsr1
  4962  00C2  00FD               	movwf	??__div_to_l_+7
  4963  00C3  0879               	movf	??__div_to_l_+3,w
  4964  00C4  027D               	subwf	??__div_to_l_+7,w
  4965  00C5  1D03               	skipz
  4966  00C6  28D1               	goto	u2875
  4967  00C7  0878               	movf	??__div_to_l_+2,w
  4968  00C8  027C               	subwf	??__div_to_l_+6,w
  4969  00C9  1D03               	skipz
  4970  00CA  28D1               	goto	u2875
  4971  00CB  0877               	movf	??__div_to_l_+1,w
  4972  00CC  027B               	subwf	??__div_to_l_+5,w
  4973  00CD  1D03               	skipz
  4974  00CE  28D1               	goto	u2875
  4975  00CF  0876               	movf	??__div_to_l_,w
  4976  00D0  027A               	subwf	??__div_to_l_+4,w
  4977  00D1                     u2875:	
  4978  00D1  1C03               	skipc
  4979  00D2  28EE               	goto	l2119
  4980  00D3  3073               	movlw	low __div_to_l_@f2
  4981  00D4  0086               	movwf	6
  4982  00D5  0187               	clrf	7
  4983  00D6  3F40               	moviw [0]fsr1
  4984  00D7  00F6               	movwf	??__div_to_l_
  4985  00D8  3F41               	moviw [1]fsr1
  4986  00D9  00F7               	movwf	??__div_to_l_+1
  4987  00DA  3F42               	moviw [2]fsr1
  4988  00DB  00F8               	movwf	??__div_to_l_+2
  4989  00DC  3F43               	moviw [3]fsr1
  4990  00DD  00F9               	movwf	??__div_to_l_+3
  4991  00DE  3070               	movlw	low __div_to_l_@f1
  4992  00DF  0086               	movwf	6
  4993  00E0  0187               	clrf	7
  4994  00E1  0876               	movf	??__div_to_l_,w
  4995  00E2  0281               	subwf	1,f
  4996  00E3  3141               	addfsr 1,1
  4997  00E4  0877               	movf	??__div_to_l_+1,w
  4998  00E5  3B81               	subwfb	1,f
  4999  00E6  3141               	addfsr 1,1
  5000  00E7  0878               	movf	??__div_to_l_+2,w
  5001  00E8  3B81               	subwfb	1,f
  5002  00E9  3141               	addfsr 1,1
  5003  00EA  0879               	movf	??__div_to_l_+3,w
  5004  00EB  3B81               	subwfb	1,f
  5005  00EC  317D               	addfsr 1,-3
  5006  00ED  1420               	bsf	__div_to_l_@quot,0
  5007  00EE                     l2119:	
  5008  00EE  3070               	movlw	low __div_to_l_@f1
  5009  00EF  0086               	movwf	6
  5010  00F0  0187               	clrf	7
  5011  00F1  3581               	lslf	1,f
  5012  00F2  3141               	addfsr 1,1
  5013  00F3  0D81               	rlf	1,f
  5014  00F4  3141               	addfsr 1,1
  5015  00F5  0D81               	rlf	1,f
  5016  00F6  3141               	addfsr 1,1
  5017  00F7  0D81               	rlf	1,f
  5018  00F8  317D               	addfsr 1,-3
  5019  00F9  3001               	movlw	1
  5020  00FA  02A4               	subwf	__div_to_l_@cntr,f
  5021  00FB  1D03               	btfss	3,2
  5022  00FC  28A6               	goto	l2111
  5023  00FD  1FA5               	btfss	__div_to_l_@exp1,7
  5024  00FE  291B               	goto	l2131
  5025  00FF  0825               	movf	__div_to_l_@exp1,w
  5026  0100  3A80               	xorlw	128
  5027  0101  3E9F               	addlw	159
  5028  0102  1803               	skipnc
  5029  0103  290D               	goto	l2129
  5030  0104  3000               	movlw	0
  5031  0105  00F3               	movwf	?__div_to_l_+3
  5032  0106  3000               	movlw	0
  5033  0107  00F2               	movwf	?__div_to_l_+2
  5034  0108  3000               	movlw	0
  5035  0109  00F1               	movwf	?__div_to_l_+1
  5036  010A  3000               	movlw	0
  5037  010B  00F0               	movwf	?__div_to_l_
  5038  010C  0008               	return
  5039  010D                     l2129:	
  5040  010D  3001               	movlw	1
  5041  010E                     u2915:	
  5042  010E  36A3               	lsrf	__div_to_l_@quot+3,f
  5043  010F  0CA2               	rrf	__div_to_l_@quot+2,f
  5044  0110  0CA1               	rrf	__div_to_l_@quot+1,f
  5045  0111  0CA0               	rrf	__div_to_l_@quot,f
  5046  0112  0B89               	decfsz	9,f
  5047  0113  290E               	goto	u2915
  5048  0114  3001               	movlw	1
  5049  0115  00F6               	movwf	??__div_to_l_
  5050  0116  0876               	movf	??__div_to_l_,w
  5051  0117  07A5               	addwf	__div_to_l_@exp1,f
  5052  0118  1903               	btfsc	3,2
  5053  0119  2934               	goto	l2141
  5054  011A  290D               	goto	l2129
  5055  011B                     l2131:	
  5056  011B  3020               	movlw	32
  5057  011C  0225               	subwf	__div_to_l_@exp1,w
  5058  011D  1C03               	skipc
  5059  011E  2931               	goto	l2139
  5060  011F  3000               	movlw	0
  5061  0120  00F3               	movwf	?__div_to_l_+3
  5062  0121  3000               	movlw	0
  5063  0122  00F2               	movwf	?__div_to_l_+2
  5064  0123  3000               	movlw	0
  5065  0124  00F1               	movwf	?__div_to_l_+1
  5066  0125  3000               	movlw	0
  5067  0126  00F0               	movwf	?__div_to_l_
  5068  0127  0008               	return
  5069  0128                     l2137:	
  5070  0128  3001               	movlw	1
  5071  0129                     u2945:	
  5072  0129  35A0               	lslf	__div_to_l_@quot,f
  5073  012A  0DA1               	rlf	__div_to_l_@quot+1,f
  5074  012B  0DA2               	rlf	__div_to_l_@quot+2,f
  5075  012C  0DA3               	rlf	__div_to_l_@quot+3,f
  5076  012D  0B89               	decfsz	9,f
  5077  012E  2929               	goto	u2945
  5078  012F  3001               	movlw	1
  5079  0130  02A5               	subwf	__div_to_l_@exp1,f
  5080  0131                     l2139:	
  5081  0131  08A5               	movf	__div_to_l_@exp1,f
  5082  0132  1D03               	skipz
  5083  0133  2928               	goto	l2137
  5084  0134                     l2141:	
  5085  0134  0823               	movf	__div_to_l_@quot+3,w
  5086  0135  00F3               	movwf	?__div_to_l_+3
  5087  0136  0822               	movf	__div_to_l_@quot+2,w
  5088  0137  00F2               	movwf	?__div_to_l_+2
  5089  0138  0821               	movf	__div_to_l_@quot+1,w
  5090  0139  00F1               	movwf	?__div_to_l_+1
  5091  013A  0820               	movf	__div_to_l_@quot,w
  5092  013B  00F0               	movwf	?__div_to_l_
  5093  013C  0008               	return
  5094  013D                     __end_of__div_to_l_:	
  5095                           
  5096                           	psect	text13
  5097  168D                     __ptext13:	
  5098 ;; *************** function ___lltoft *****************
  5099 ;; Defined at:
  5100 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  c               4    8[COMMON] unsigned long 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  exp             1   13[COMMON] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  3    8[COMMON] float 
  5107 ;; Registers used:
  5108 ;;		wreg, status,2, status,0, pclath, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5114 ;;      Params:         4       0       0       0       0       0       0       0
  5115 ;;      Locals:         1       0       0       0       0       0       0       0
  5116 ;;      Temps:          1       0       0       0       0       0       0       0
  5117 ;;      Totals:         6       0       0       0       0       0       0       0
  5118 ;;Total ram usage:        6 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    1
  5121 ;; This function calls:
  5122 ;;		___ftpack
  5123 ;; This function is called by:
  5124 ;;		_sprintf
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           
  5129                           ;psect for function ___lltoft
  5130  168D                     ___lltoft:	
  5131                           
  5132                           ;incstack = 0
  5133                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5134  168D  308E               	movlw	142
  5135  168E  00FC               	movwf	??___lltoft
  5136  168F  087C               	movf	??___lltoft,w
  5137  1690  00FD               	movwf	___lltoft@exp
  5138  1691                     l2271:	
  5139  1691  30FF               	movlw	255
  5140  1692  057B               	andwf	___lltoft@c+3,w
  5141  1693  1903               	btfsc	3,2
  5142  1694  2EA1               	goto	l2273
  5143  1695  3001               	movlw	1
  5144  1696                     u3235:	
  5145  1696  36FB               	lsrf	___lltoft@c+3,f
  5146  1697  0CFA               	rrf	___lltoft@c+2,f
  5147  1698  0CF9               	rrf	___lltoft@c+1,f
  5148  1699  0CF8               	rrf	___lltoft@c,f
  5149  169A  0B89               	decfsz	9,f
  5150  169B  2E96               	goto	u3235
  5151  169C  3001               	movlw	1
  5152  169D  00FC               	movwf	??___lltoft
  5153  169E  087C               	movf	??___lltoft,w
  5154  169F  07FD               	addwf	___lltoft@exp,f
  5155  16A0  2E91               	goto	l2271
  5156  16A1                     l2273:	
  5157  16A1  0878               	movf	___lltoft@c,w
  5158  16A2  00F0               	movwf	___ftpack@arg
  5159  16A3  0879               	movf	___lltoft@c+1,w
  5160  16A4  00F1               	movwf	___ftpack@arg+1
  5161  16A5  087A               	movf	___lltoft@c+2,w
  5162  16A6  00F2               	movwf	___ftpack@arg+2
  5163  16A7  087D               	movf	___lltoft@exp,w
  5164  16A8  00FC               	movwf	??___lltoft
  5165  16A9  087C               	movf	??___lltoft,w
  5166  16AA  00F3               	movwf	___ftpack@exp
  5167  16AB  01F4               	clrf	___ftpack@sign
  5168  16AC  3188  2058         	fcall	___ftpack
  5169  16AE  0870               	movf	?___ftpack,w
  5170  16AF  00F8               	movwf	?___lltoft
  5171  16B0  0871               	movf	?___ftpack+1,w
  5172  16B1  00F9               	movwf	?___lltoft+1
  5173  16B2  0872               	movf	?___ftpack+2,w
  5174  16B3  00FA               	movwf	?___lltoft+2
  5175  16B4  0008               	return
  5176  16B5                     __end_of___lltoft:	
  5177                           
  5178                           	psect	text14
  5179  1725                     __ptext14:	
  5180 ;; *************** function ___llmod *****************
  5181 ;; Defined at:
  5182 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;  divisor         4    0[COMMON] unsigned long 
  5185 ;;  dividend        4    4[COMMON] unsigned long 
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;  counter         1    9[COMMON] unsigned char 
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  4    0[COMMON] unsigned long 
  5190 ;; Registers used:
  5191 ;;		wreg, status,2, status,0
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5197 ;;      Params:         8       0       0       0       0       0       0       0
  5198 ;;      Locals:         1       0       0       0       0       0       0       0
  5199 ;;      Temps:          1       0       0       0       0       0       0       0
  5200 ;;      Totals:        10       0       0       0       0       0       0       0
  5201 ;;Total ram usage:       10 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; This function calls:
  5204 ;;		Nothing
  5205 ;; This function is called by:
  5206 ;;		_sprintf
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           
  5211                           ;psect for function ___llmod
  5212  1725                     ___llmod:	
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5216  1725  0873               	movf	___llmod@divisor+3,w
  5217  1726  0472               	iorwf	___llmod@divisor+2,w
  5218  1727  0471               	iorwf	___llmod@divisor+1,w
  5219  1728  0470               	iorwf	___llmod@divisor,w
  5220  1729  1903               	skipnz
  5221  172A  2F5E               	goto	l2263
  5222  172B  01F9               	clrf	___llmod@counter
  5223  172C  0AF9               	incf	___llmod@counter,f
  5224  172D                     l2253:	
  5225  172D  1BF3               	btfsc	___llmod@divisor+3,7
  5226  172E  2F3B               	goto	l2255
  5227  172F  3001               	movlw	1
  5228  1730                     u3185:	
  5229  1730  35F0               	lslf	___llmod@divisor,f
  5230  1731  0DF1               	rlf	___llmod@divisor+1,f
  5231  1732  0DF2               	rlf	___llmod@divisor+2,f
  5232  1733  0DF3               	rlf	___llmod@divisor+3,f
  5233  1734  0B89               	decfsz	9,f
  5234  1735  2F30               	goto	u3185
  5235  1736  3001               	movlw	1
  5236  1737  00F8               	movwf	??___llmod
  5237  1738  0878               	movf	??___llmod,w
  5238  1739  07F9               	addwf	___llmod@counter,f
  5239  173A  2F2D               	goto	l2253
  5240  173B                     l2255:	
  5241  173B  0873               	movf	___llmod@divisor+3,w
  5242  173C  0277               	subwf	___llmod@dividend+3,w
  5243  173D  1D03               	skipz
  5244  173E  2F49               	goto	u3205
  5245  173F  0872               	movf	___llmod@divisor+2,w
  5246  1740  0276               	subwf	___llmod@dividend+2,w
  5247  1741  1D03               	skipz
  5248  1742  2F49               	goto	u3205
  5249  1743  0871               	movf	___llmod@divisor+1,w
  5250  1744  0275               	subwf	___llmod@dividend+1,w
  5251  1745  1D03               	skipz
  5252  1746  2F49               	goto	u3205
  5253  1747  0870               	movf	___llmod@divisor,w
  5254  1748  0274               	subwf	___llmod@dividend,w
  5255  1749                     u3205:	
  5256  1749  1C03               	skipc
  5257  174A  2F53               	goto	l2259
  5258  174B  0870               	movf	___llmod@divisor,w
  5259  174C  02F4               	subwf	___llmod@dividend,f
  5260  174D  0871               	movf	___llmod@divisor+1,w
  5261  174E  3BF5               	subwfb	___llmod@dividend+1,f
  5262  174F  0872               	movf	___llmod@divisor+2,w
  5263  1750  3BF6               	subwfb	___llmod@dividend+2,f
  5264  1751  0873               	movf	___llmod@divisor+3,w
  5265  1752  3BF7               	subwfb	___llmod@dividend+3,f
  5266  1753                     l2259:	
  5267  1753  3001               	movlw	1
  5268  1754                     u3215:	
  5269  1754  36F3               	lsrf	___llmod@divisor+3,f
  5270  1755  0CF2               	rrf	___llmod@divisor+2,f
  5271  1756  0CF1               	rrf	___llmod@divisor+1,f
  5272  1757  0CF0               	rrf	___llmod@divisor,f
  5273  1758  0B89               	decfsz	9,f
  5274  1759  2F54               	goto	u3215
  5275  175A  3001               	movlw	1
  5276  175B  02F9               	subwf	___llmod@counter,f
  5277  175C  1D03               	btfss	3,2
  5278  175D  2F3B               	goto	l2255
  5279  175E                     l2263:	
  5280  175E  0877               	movf	___llmod@dividend+3,w
  5281  175F  00F3               	movwf	?___llmod+3
  5282  1760  0876               	movf	___llmod@dividend+2,w
  5283  1761  00F2               	movwf	?___llmod+2
  5284  1762  0875               	movf	___llmod@dividend+1,w
  5285  1763  00F1               	movwf	?___llmod+1
  5286  1764  0874               	movf	___llmod@dividend,w
  5287  1765  00F0               	movwf	?___llmod
  5288  1766  0008               	return
  5289  1767                     __end_of___llmod:	
  5290                           
  5291                           	psect	text15
  5292  17AE                     __ptext15:	
  5293 ;; *************** function ___lldiv *****************
  5294 ;; Defined at:
  5295 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;  divisor         4    0[COMMON] unsigned long 
  5298 ;;  dividend        4    4[COMMON] unsigned long 
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;  quotient        4    9[COMMON] unsigned long 
  5301 ;;  counter         1   13[COMMON] unsigned char 
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  4    0[COMMON] unsigned long 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5311 ;;      Params:         8       0       0       0       0       0       0       0
  5312 ;;      Locals:         5       0       0       0       0       0       0       0
  5313 ;;      Temps:          1       0       0       0       0       0       0       0
  5314 ;;      Totals:        14       0       0       0       0       0       0       0
  5315 ;;Total ram usage:       14 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; This function calls:
  5318 ;;		Nothing
  5319 ;; This function is called by:
  5320 ;;		_sprintf
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function ___lldiv
  5326  17AE                     ___lldiv:	
  5327                           
  5328                           ;incstack = 0
  5329                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5330  17AE  3000               	movlw	0
  5331  17AF  00FC               	movwf	___lldiv@quotient+3
  5332  17B0  3000               	movlw	0
  5333  17B1  00FB               	movwf	___lldiv@quotient+2
  5334  17B2  3000               	movlw	0
  5335  17B3  00FA               	movwf	___lldiv@quotient+1
  5336  17B4  3000               	movlw	0
  5337  17B5  00F9               	movwf	___lldiv@quotient
  5338  17B6  0873               	movf	___lldiv@divisor+3,w
  5339  17B7  0472               	iorwf	___lldiv@divisor+2,w
  5340  17B8  0471               	iorwf	___lldiv@divisor+1,w
  5341  17B9  0470               	iorwf	___lldiv@divisor,w
  5342  17BA  1903               	skipnz
  5343  17BB  2FF7               	goto	l2243
  5344  17BC  01FD               	clrf	___lldiv@counter
  5345  17BD  0AFD               	incf	___lldiv@counter,f
  5346  17BE                     l2229:	
  5347  17BE  1BF3               	btfsc	___lldiv@divisor+3,7
  5348  17BF  2FCC               	goto	l2231
  5349  17C0  3001               	movlw	1
  5350  17C1                     u3115:	
  5351  17C1  35F0               	lslf	___lldiv@divisor,f
  5352  17C2  0DF1               	rlf	___lldiv@divisor+1,f
  5353  17C3  0DF2               	rlf	___lldiv@divisor+2,f
  5354  17C4  0DF3               	rlf	___lldiv@divisor+3,f
  5355  17C5  0B89               	decfsz	9,f
  5356  17C6  2FC1               	goto	u3115
  5357  17C7  3001               	movlw	1
  5358  17C8  00F8               	movwf	??___lldiv
  5359  17C9  0878               	movf	??___lldiv,w
  5360  17CA  07FD               	addwf	___lldiv@counter,f
  5361  17CB  2FBE               	goto	l2229
  5362  17CC                     l2231:	
  5363  17CC  3001               	movlw	1
  5364  17CD                     u3135:	
  5365  17CD  35F9               	lslf	___lldiv@quotient,f
  5366  17CE  0DFA               	rlf	___lldiv@quotient+1,f
  5367  17CF  0DFB               	rlf	___lldiv@quotient+2,f
  5368  17D0  0DFC               	rlf	___lldiv@quotient+3,f
  5369  17D1  0B89               	decfsz	9,f
  5370  17D2  2FCD               	goto	u3135
  5371  17D3  0873               	movf	___lldiv@divisor+3,w
  5372  17D4  0277               	subwf	___lldiv@dividend+3,w
  5373  17D5  1D03               	skipz
  5374  17D6  2FE1               	goto	u3145
  5375  17D7  0872               	movf	___lldiv@divisor+2,w
  5376  17D8  0276               	subwf	___lldiv@dividend+2,w
  5377  17D9  1D03               	skipz
  5378  17DA  2FE1               	goto	u3145
  5379  17DB  0871               	movf	___lldiv@divisor+1,w
  5380  17DC  0275               	subwf	___lldiv@dividend+1,w
  5381  17DD  1D03               	skipz
  5382  17DE  2FE1               	goto	u3145
  5383  17DF  0870               	movf	___lldiv@divisor,w
  5384  17E0  0274               	subwf	___lldiv@dividend,w
  5385  17E1                     u3145:	
  5386  17E1  1C03               	skipc
  5387  17E2  2FEC               	goto	l2239
  5388  17E3  0870               	movf	___lldiv@divisor,w
  5389  17E4  02F4               	subwf	___lldiv@dividend,f
  5390  17E5  0871               	movf	___lldiv@divisor+1,w
  5391  17E6  3BF5               	subwfb	___lldiv@dividend+1,f
  5392  17E7  0872               	movf	___lldiv@divisor+2,w
  5393  17E8  3BF6               	subwfb	___lldiv@dividend+2,f
  5394  17E9  0873               	movf	___lldiv@divisor+3,w
  5395  17EA  3BF7               	subwfb	___lldiv@dividend+3,f
  5396  17EB  1479               	bsf	___lldiv@quotient,0
  5397  17EC                     l2239:	
  5398  17EC  3001               	movlw	1
  5399  17ED                     u3155:	
  5400  17ED  36F3               	lsrf	___lldiv@divisor+3,f
  5401  17EE  0CF2               	rrf	___lldiv@divisor+2,f
  5402  17EF  0CF1               	rrf	___lldiv@divisor+1,f
  5403  17F0  0CF0               	rrf	___lldiv@divisor,f
  5404  17F1  0B89               	decfsz	9,f
  5405  17F2  2FED               	goto	u3155
  5406  17F3  3001               	movlw	1
  5407  17F4  02FD               	subwf	___lldiv@counter,f
  5408  17F5  1D03               	btfss	3,2
  5409  17F6  2FCC               	goto	l2231
  5410  17F7                     l2243:	
  5411  17F7  087C               	movf	___lldiv@quotient+3,w
  5412  17F8  00F3               	movwf	?___lldiv+3
  5413  17F9  087B               	movf	___lldiv@quotient+2,w
  5414  17FA  00F2               	movwf	?___lldiv+2
  5415  17FB  087A               	movf	___lldiv@quotient+1,w
  5416  17FC  00F1               	movwf	?___lldiv+1
  5417  17FD  0879               	movf	___lldiv@quotient,w
  5418  17FE  00F0               	movwf	?___lldiv
  5419  17FF  0008               	return
  5420  1800                     __end_of___lldiv:	
  5421                           
  5422                           	psect	text16
  5423  08B8                     __ptext16:	
  5424 ;; *************** function ___fttol *****************
  5425 ;; Defined at:
  5426 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;  f1              3   33[BANK0 ] float 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  lval            4   42[BANK0 ] unsigned long 
  5431 ;;  exp1            1   46[BANK0 ] unsigned char 
  5432 ;;  sign1           1   41[BANK0 ] unsigned char 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  4   33[BANK0 ] long 
  5435 ;; Registers used:
  5436 ;;		wreg, status,2, status,0
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5442 ;;      Params:         0       4       0       0       0       0       0       0
  5443 ;;      Locals:         0       6       0       0       0       0       0       0
  5444 ;;      Temps:          0       4       0       0       0       0       0       0
  5445 ;;      Totals:         0      14       0       0       0       0       0       0
  5446 ;;Total ram usage:       14 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_sprintf
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           
  5456                           ;psect for function ___fttol
  5457  08B8                     ___fttol:	
  5458                           
  5459                           ;incstack = 0
  5460                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5461  08B8  0020               	movlb	0	; select bank0
  5462  08B9  0841               	movf	___fttol@f1,w
  5463  08BA  00C5               	movwf	??___fttol
  5464  08BB  0842               	movf	___fttol@f1+1,w
  5465  08BC  00C6               	movwf	??___fttol+1
  5466  08BD  0843               	movf	___fttol@f1+2,w
  5467  08BE  00C7               	movwf	??___fttol+2
  5468  08BF  1003               	clrc
  5469  08C0  0D46               	rlf	??___fttol+1,w
  5470  08C1  0D47               	rlf	??___fttol+2,w
  5471  08C2  00C8               	movwf	??___fttol+3
  5472  08C3  0848               	movf	??___fttol+3,w
  5473  08C4  00CE               	movwf	___fttol@exp1
  5474  08C5  08CE               	movf	___fttol@exp1,f
  5475  08C6  1D03               	skipz
  5476  08C7  28D1               	goto	l2185
  5477  08C8  3000               	movlw	0
  5478  08C9  00C4               	movwf	?___fttol+3
  5479  08CA  3000               	movlw	0
  5480  08CB  00C3               	movwf	?___fttol+2
  5481  08CC  3000               	movlw	0
  5482  08CD  00C2               	movwf	?___fttol+1
  5483  08CE  3000               	movlw	0
  5484  08CF  00C1               	movwf	?___fttol
  5485  08D0  0008               	return
  5486  08D1                     l2185:	
  5487  08D1  0841               	movf	___fttol@f1,w
  5488  08D2  00C5               	movwf	??___fttol
  5489  08D3  0842               	movf	___fttol@f1+1,w
  5490  08D4  00C6               	movwf	??___fttol+1
  5491  08D5  0843               	movf	___fttol@f1+2,w
  5492  08D6  00C7               	movwf	??___fttol+2
  5493  08D7  3017               	movlw	23
  5494  08D8                     u3015:	
  5495  08D8  36C7               	lsrf	??___fttol+2,f
  5496  08D9  0CC6               	rrf	??___fttol+1,f
  5497  08DA  0CC5               	rrf	??___fttol,f
  5498  08DB  0B89               	decfsz	9,f
  5499  08DC  28D8               	goto	u3015
  5500  08DD  0845               	movf	??___fttol,w
  5501  08DE  00C8               	movwf	??___fttol+3
  5502  08DF  0848               	movf	??___fttol+3,w
  5503  08E0  00C9               	movwf	___fttol@sign1
  5504  08E1  17C2               	bsf	___fttol@f1+1,7
  5505  08E2  30FF               	movlw	255
  5506  08E3  05C1               	andwf	___fttol@f1,f
  5507  08E4  30FF               	movlw	255
  5508  08E5  05C2               	andwf	___fttol@f1+1,f
  5509  08E6  3000               	movlw	0
  5510  08E7  05C3               	andwf	___fttol@f1+2,f
  5511  08E8  0841               	movf	___fttol@f1,w
  5512  08E9  00CA               	movwf	___fttol@lval
  5513  08EA  0842               	movf	___fttol@f1+1,w
  5514  08EB  00CB               	movwf	___fttol@lval+1
  5515  08EC  0843               	movf	___fttol@f1+2,w
  5516  08ED  00CC               	movwf	___fttol@lval+2
  5517  08EE  01CD               	clrf	___fttol@lval+3
  5518  08EF  308E               	movlw	142
  5519  08F0  02CE               	subwf	___fttol@exp1,f
  5520  08F1  1FCE               	btfss	___fttol@exp1,7
  5521  08F2  290F               	goto	l2205
  5522  08F3  084E               	movf	___fttol@exp1,w
  5523  08F4  3A80               	xorlw	128
  5524  08F5  3E8F               	addlw	143
  5525  08F6  1803               	skipnc
  5526  08F7  2901               	goto	l2203
  5527  08F8  3000               	movlw	0
  5528  08F9  00C4               	movwf	?___fttol+3
  5529  08FA  3000               	movlw	0
  5530  08FB  00C3               	movwf	?___fttol+2
  5531  08FC  3000               	movlw	0
  5532  08FD  00C2               	movwf	?___fttol+1
  5533  08FE  3000               	movlw	0
  5534  08FF  00C1               	movwf	?___fttol
  5535  0900  0008               	return
  5536  0901                     l2203:	
  5537  0901  3001               	movlw	1
  5538  0902                     u3045:	
  5539  0902  36CD               	lsrf	___fttol@lval+3,f
  5540  0903  0CCC               	rrf	___fttol@lval+2,f
  5541  0904  0CCB               	rrf	___fttol@lval+1,f
  5542  0905  0CCA               	rrf	___fttol@lval,f
  5543  0906  0B89               	decfsz	9,f
  5544  0907  2902               	goto	u3045
  5545  0908  3001               	movlw	1
  5546  0909  00C5               	movwf	??___fttol
  5547  090A  0845               	movf	??___fttol,w
  5548  090B  07CE               	addwf	___fttol@exp1,f
  5549  090C  1903               	btfsc	3,2
  5550  090D  2928               	goto	l2215
  5551  090E  2901               	goto	l2203
  5552  090F                     l2205:	
  5553  090F  3018               	movlw	24
  5554  0910  024E               	subwf	___fttol@exp1,w
  5555  0911  1C03               	skipc
  5556  0912  2925               	goto	l2213
  5557  0913  3000               	movlw	0
  5558  0914  00C4               	movwf	?___fttol+3
  5559  0915  3000               	movlw	0
  5560  0916  00C3               	movwf	?___fttol+2
  5561  0917  3000               	movlw	0
  5562  0918  00C2               	movwf	?___fttol+1
  5563  0919  3000               	movlw	0
  5564  091A  00C1               	movwf	?___fttol
  5565  091B  0008               	return
  5566  091C                     l2211:	
  5567  091C  3001               	movlw	1
  5568  091D                     u3075:	
  5569  091D  35CA               	lslf	___fttol@lval,f
  5570  091E  0DCB               	rlf	___fttol@lval+1,f
  5571  091F  0DCC               	rlf	___fttol@lval+2,f
  5572  0920  0DCD               	rlf	___fttol@lval+3,f
  5573  0921  0B89               	decfsz	9,f
  5574  0922  291D               	goto	u3075
  5575  0923  3001               	movlw	1
  5576  0924  02CE               	subwf	___fttol@exp1,f
  5577  0925                     l2213:	
  5578  0925  08CE               	movf	___fttol@exp1,f
  5579  0926  1D03               	skipz
  5580  0927  291C               	goto	l2211
  5581  0928                     l2215:	
  5582  0928  0849               	movf	___fttol@sign1,w
  5583  0929  1903               	btfsc	3,2
  5584  092A  2936               	goto	l2219
  5585  092B  09CA               	comf	___fttol@lval,f
  5586  092C  09CB               	comf	___fttol@lval+1,f
  5587  092D  09CC               	comf	___fttol@lval+2,f
  5588  092E  09CD               	comf	___fttol@lval+3,f
  5589  092F  0ACA               	incf	___fttol@lval,f
  5590  0930  1903               	skipnz
  5591  0931  0ACB               	incf	___fttol@lval+1,f
  5592  0932  1903               	skipnz
  5593  0933  0ACC               	incf	___fttol@lval+2,f
  5594  0934  1903               	skipnz
  5595  0935  0ACD               	incf	___fttol@lval+3,f
  5596  0936                     l2219:	
  5597  0936  084D               	movf	___fttol@lval+3,w
  5598  0937  00C4               	movwf	?___fttol+3
  5599  0938  084C               	movf	___fttol@lval+2,w
  5600  0939  00C3               	movwf	?___fttol+2
  5601  093A  084B               	movf	___fttol@lval+1,w
  5602  093B  00C2               	movwf	?___fttol+1
  5603  093C  084A               	movf	___fttol@lval,w
  5604  093D  00C1               	movwf	?___fttol
  5605  093E  0008               	return
  5606  093F                     __end_of___fttol:	
  5607                           
  5608                           	psect	text17
  5609  0007                     __ptext17:	
  5610 ;; *************** function ___ftsub *****************
  5611 ;; Defined at:
  5612 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  f2              3   51[BANK0 ] float 
  5615 ;;  f1              3   54[BANK0 ] float 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;		None
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  3   51[BANK0 ] float 
  5620 ;; Registers used:
  5621 ;;		wreg, status,2, status,0, pclath, cstack
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5627 ;;      Params:         0       6       0       0       0       0       0       0
  5628 ;;      Locals:         0       0       0       0       0       0       0       0
  5629 ;;      Temps:          0       0       0       0       0       0       0       0
  5630 ;;      Totals:         0       6       0       0       0       0       0       0
  5631 ;;Total ram usage:        6 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    2
  5634 ;; This function calls:
  5635 ;;		___ftadd
  5636 ;; This function is called by:
  5637 ;;		_sprintf
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           
  5642                           ;psect for function ___ftsub
  5643  0007                     ___ftsub:	
  5644                           
  5645                           ;incstack = 0
  5646                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5647  0007  3080               	movlw	128
  5648  0008  0020               	movlb	0	; select bank0
  5649  0009  06D5               	xorwf	___ftsub@f2+2,f
  5650  000A  0856               	movf	___ftsub@f1,w
  5651  000B  00C6               	movwf	___ftadd@f1
  5652  000C  0857               	movf	___ftsub@f1+1,w
  5653  000D  00C7               	movwf	___ftadd@f1+1
  5654  000E  0858               	movf	___ftsub@f1+2,w
  5655  000F  00C8               	movwf	___ftadd@f1+2
  5656  0010  0853               	movf	___ftsub@f2,w
  5657  0011  00C9               	movwf	___ftadd@f2
  5658  0012  0854               	movf	___ftsub@f2+1,w
  5659  0013  00CA               	movwf	___ftadd@f2+1
  5660  0014  0855               	movf	___ftsub@f2+2,w
  5661  0015  00CB               	movwf	___ftadd@f2+2
  5662  0016  318D  259F         	fcall	___ftadd
  5663  0018  0020               	movlb	0	; select bank0
  5664  0019  0846               	movf	?___ftadd,w
  5665  001A  00D3               	movwf	?___ftsub
  5666  001B  0847               	movf	?___ftadd+1,w
  5667  001C  00D4               	movwf	?___ftsub+1
  5668  001D  0848               	movf	?___ftadd+2,w
  5669  001E  00D5               	movwf	?___ftsub+2
  5670  001F  0008               	return
  5671  0020                     __end_of___ftsub:	
  5672                           
  5673                           	psect	text18
  5674  0D9F                     __ptext18:	
  5675 ;; *************** function ___ftadd *****************
  5676 ;; Defined at:
  5677 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  5678 ;; Parameters:    Size  Location     Type
  5679 ;;  f1              3   38[BANK0 ] float 
  5680 ;;  f2              3   41[BANK0 ] float 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  exp1            1   50[BANK0 ] unsigned char 
  5683 ;;  exp2            1   49[BANK0 ] unsigned char 
  5684 ;;  sign            1   48[BANK0 ] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  3   38[BANK0 ] float 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0, pclath, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5694 ;;      Params:         0       6       0       0       0       0       0       0
  5695 ;;      Locals:         0       3       0       0       0       0       0       0
  5696 ;;      Temps:          0       4       0       0       0       0       0       0
  5697 ;;      Totals:         0      13       0       0       0       0       0       0
  5698 ;;Total ram usage:       13 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    1
  5701 ;; This function calls:
  5702 ;;		___ftpack
  5703 ;; This function is called by:
  5704 ;;		_sprintf
  5705 ;;		___ftsub
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           
  5710                           ;psect for function ___ftadd
  5711  0D9F                     ___ftadd:	
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5715  0D9F  0020               	movlb	0	; select bank0
  5716  0DA0  0846               	movf	___ftadd@f1,w
  5717  0DA1  00CC               	movwf	??___ftadd
  5718  0DA2  0847               	movf	___ftadd@f1+1,w
  5719  0DA3  00CD               	movwf	??___ftadd+1
  5720  0DA4  0848               	movf	___ftadd@f1+2,w
  5721  0DA5  00CE               	movwf	??___ftadd+2
  5722  0DA6  1003               	clrc
  5723  0DA7  0D4D               	rlf	??___ftadd+1,w
  5724  0DA8  0D4E               	rlf	??___ftadd+2,w
  5725  0DA9  00CF               	movwf	??___ftadd+3
  5726  0DAA  084F               	movf	??___ftadd+3,w
  5727  0DAB  00D2               	movwf	___ftadd@exp1
  5728  0DAC  0849               	movf	___ftadd@f2,w
  5729  0DAD  00CC               	movwf	??___ftadd
  5730  0DAE  084A               	movf	___ftadd@f2+1,w
  5731  0DAF  00CD               	movwf	??___ftadd+1
  5732  0DB0  084B               	movf	___ftadd@f2+2,w
  5733  0DB1  00CE               	movwf	??___ftadd+2
  5734  0DB2  1003               	clrc
  5735  0DB3  0D4D               	rlf	??___ftadd+1,w
  5736  0DB4  0D4E               	rlf	??___ftadd+2,w
  5737  0DB5  00CF               	movwf	??___ftadd+3
  5738  0DB6  084F               	movf	??___ftadd+3,w
  5739  0DB7  00D1               	movwf	___ftadd@exp2
  5740  0DB8  0852               	movf	___ftadd@exp1,w
  5741  0DB9  1903               	btfsc	3,2
  5742  0DBA  2DC7               	goto	l1797
  5743  0DBB  0851               	movf	___ftadd@exp2,w
  5744  0DBC  0252               	subwf	___ftadd@exp1,w
  5745  0DBD  1803               	skipnc
  5746  0DBE  2DCE               	goto	l1801
  5747  0DBF  0352               	decf	___ftadd@exp1,w
  5748  0DC0  3AFF               	xorlw	255
  5749  0DC1  0751               	addwf	___ftadd@exp2,w
  5750  0DC2  00CC               	movwf	??___ftadd
  5751  0DC3  3019               	movlw	25
  5752  0DC4  024C               	subwf	??___ftadd,w
  5753  0DC5  1C03               	skipc
  5754  0DC6  2DCE               	goto	l1801
  5755  0DC7                     l1797:	
  5756  0DC7  0849               	movf	___ftadd@f2,w
  5757  0DC8  00C6               	movwf	?___ftadd
  5758  0DC9  084A               	movf	___ftadd@f2+1,w
  5759  0DCA  00C7               	movwf	?___ftadd+1
  5760  0DCB  084B               	movf	___ftadd@f2+2,w
  5761  0DCC  00C8               	movwf	?___ftadd+2
  5762  0DCD  0008               	return
  5763  0DCE                     l1801:	
  5764  0DCE  0851               	movf	___ftadd@exp2,w
  5765  0DCF  1903               	btfsc	3,2
  5766  0DD0  0008               	return
  5767  0DD1  0852               	movf	___ftadd@exp1,w
  5768  0DD2  0251               	subwf	___ftadd@exp2,w
  5769  0DD3  1803               	skipnc
  5770  0DD4  2DDD               	goto	l1807
  5771  0DD5  0351               	decf	___ftadd@exp2,w
  5772  0DD6  3AFF               	xorlw	255
  5773  0DD7  0752               	addwf	___ftadd@exp1,w
  5774  0DD8  00CC               	movwf	??___ftadd
  5775  0DD9  3019               	movlw	25
  5776  0DDA  024C               	subwf	??___ftadd,w
  5777  0DDB  1803               	btfsc	3,0
  5778  0DDC  0008               	return
  5779  0DDD                     l1807:	
  5780  0DDD  3006               	movlw	6
  5781  0DDE  00CC               	movwf	??___ftadd
  5782  0DDF  084C               	movf	??___ftadd,w
  5783  0DE0  00D0               	movwf	___ftadd@sign
  5784  0DE1  1BC8               	btfsc	___ftadd@f1+2,7
  5785  0DE2  17D0               	bsf	___ftadd@sign,7
  5786  0DE3  1BCB               	btfsc	___ftadd@f2+2,7
  5787  0DE4  1750               	bsf	___ftadd@sign,6
  5788  0DE5  17C7               	bsf	___ftadd@f1+1,7
  5789  0DE6  30FF               	movlw	255
  5790  0DE7  05C6               	andwf	___ftadd@f1,f
  5791  0DE8  30FF               	movlw	255
  5792  0DE9  05C7               	andwf	___ftadd@f1+1,f
  5793  0DEA  3000               	movlw	0
  5794  0DEB  05C8               	andwf	___ftadd@f1+2,f
  5795  0DEC  17CA               	bsf	___ftadd@f2+1,7
  5796  0DED  30FF               	movlw	255
  5797  0DEE  05C9               	andwf	___ftadd@f2,f
  5798  0DEF  30FF               	movlw	255
  5799  0DF0  05CA               	andwf	___ftadd@f2+1,f
  5800  0DF1  3000               	movlw	0
  5801  0DF2  05CB               	andwf	___ftadd@f2+2,f
  5802  0DF3  0851               	movf	___ftadd@exp2,w
  5803  0DF4  0252               	subwf	___ftadd@exp1,w
  5804  0DF5  1803               	skipnc
  5805  0DF6  2E19               	goto	l1829
  5806  0DF7                     l1819:	
  5807  0DF7  3001               	movlw	1
  5808  0DF8                     u2265:	
  5809  0DF8  35C9               	lslf	___ftadd@f2,f
  5810  0DF9  0DCA               	rlf	___ftadd@f2+1,f
  5811  0DFA  0DCB               	rlf	___ftadd@f2+2,f
  5812  0DFB  0B89               	decfsz	9,f
  5813  0DFC  2DF8               	goto	u2265
  5814  0DFD  3001               	movlw	1
  5815  0DFE  02D1               	subwf	___ftadd@exp2,f
  5816  0DFF  0851               	movf	___ftadd@exp2,w
  5817  0E00  0652               	xorwf	___ftadd@exp1,w
  5818  0E01  1903               	skipnz
  5819  0E02  2E14               	goto	l1827
  5820  0E03  3001               	movlw	1
  5821  0E04  02D0               	subwf	___ftadd@sign,f
  5822  0E05  0850               	movf	___ftadd@sign,w
  5823  0E06  3907               	andlw	7
  5824  0E07  1903               	btfsc	3,2
  5825  0E08  2E14               	goto	l1827
  5826  0E09  2DF7               	goto	l1819
  5827  0E0A                     l1825:	
  5828  0E0A  3001               	movlw	1
  5829  0E0B                     u2295:	
  5830  0E0B  36C8               	lsrf	___ftadd@f1+2,f
  5831  0E0C  0CC7               	rrf	___ftadd@f1+1,f
  5832  0E0D  0CC6               	rrf	___ftadd@f1,f
  5833  0E0E  0B89               	decfsz	9,f
  5834  0E0F  2E0B               	goto	u2295
  5835  0E10  3001               	movlw	1
  5836  0E11  00CC               	movwf	??___ftadd
  5837  0E12  084C               	movf	??___ftadd,w
  5838  0E13  07D2               	addwf	___ftadd@exp1,f
  5839  0E14                     l1827:	
  5840  0E14  0852               	movf	___ftadd@exp1,w
  5841  0E15  0651               	xorwf	___ftadd@exp2,w
  5842  0E16  1903               	btfsc	3,2
  5843  0E17  2E3E               	goto	l463
  5844  0E18  2E0A               	goto	l1825
  5845  0E19                     l1829:	
  5846  0E19  0852               	movf	___ftadd@exp1,w
  5847  0E1A  0251               	subwf	___ftadd@exp2,w
  5848  0E1B  1803               	skipnc
  5849  0E1C  2E3E               	goto	l463
  5850  0E1D                     l1831:	
  5851  0E1D  3001               	movlw	1
  5852  0E1E                     u2325:	
  5853  0E1E  35C6               	lslf	___ftadd@f1,f
  5854  0E1F  0DC7               	rlf	___ftadd@f1+1,f
  5855  0E20  0DC8               	rlf	___ftadd@f1+2,f
  5856  0E21  0B89               	decfsz	9,f
  5857  0E22  2E1E               	goto	u2325
  5858  0E23  3001               	movlw	1
  5859  0E24  02D2               	subwf	___ftadd@exp1,f
  5860  0E25  0851               	movf	___ftadd@exp2,w
  5861  0E26  0652               	xorwf	___ftadd@exp1,w
  5862  0E27  1903               	skipnz
  5863  0E28  2E3A               	goto	l1839
  5864  0E29  3001               	movlw	1
  5865  0E2A  02D0               	subwf	___ftadd@sign,f
  5866  0E2B  0850               	movf	___ftadd@sign,w
  5867  0E2C  3907               	andlw	7
  5868  0E2D  1903               	btfsc	3,2
  5869  0E2E  2E3A               	goto	l1839
  5870  0E2F  2E1D               	goto	l1831
  5871  0E30                     l1837:	
  5872  0E30  3001               	movlw	1
  5873  0E31                     u2355:	
  5874  0E31  36CB               	lsrf	___ftadd@f2+2,f
  5875  0E32  0CCA               	rrf	___ftadd@f2+1,f
  5876  0E33  0CC9               	rrf	___ftadd@f2,f
  5877  0E34  0B89               	decfsz	9,f
  5878  0E35  2E31               	goto	u2355
  5879  0E36  3001               	movlw	1
  5880  0E37  00CC               	movwf	??___ftadd
  5881  0E38  084C               	movf	??___ftadd,w
  5882  0E39  07D1               	addwf	___ftadd@exp2,f
  5883  0E3A                     l1839:	
  5884  0E3A  0852               	movf	___ftadd@exp1,w
  5885  0E3B  0651               	xorwf	___ftadd@exp2,w
  5886  0E3C  1D03               	skipz
  5887  0E3D  2E30               	goto	l1837
  5888  0E3E                     l463:	
  5889  0E3E  1FD0               	btfss	___ftadd@sign,7
  5890  0E3F  2E50               	goto	l1843
  5891  0E40  30FF               	movlw	255
  5892  0E41  06C6               	xorwf	___ftadd@f1,f
  5893  0E42  30FF               	movlw	255
  5894  0E43  06C7               	xorwf	___ftadd@f1+1,f
  5895  0E44  30FF               	movlw	255
  5896  0E45  06C8               	xorwf	___ftadd@f1+2,f
  5897  0E46  3001               	movlw	1
  5898  0E47  07C6               	addwf	___ftadd@f1,f
  5899  0E48  3000               	movlw	0
  5900  0E49  1803               	skipnc
  5901  0E4A  3001               	movlw	1
  5902  0E4B  07C7               	addwf	___ftadd@f1+1,f
  5903  0E4C  3000               	movlw	0
  5904  0E4D  1803               	skipnc
  5905  0E4E  3001               	movlw	1
  5906  0E4F  07C8               	addwf	___ftadd@f1+2,f
  5907  0E50                     l1843:	
  5908  0E50  1F50               	btfss	___ftadd@sign,6
  5909  0E51  2E62               	goto	l1847
  5910  0E52  30FF               	movlw	255
  5911  0E53  06C9               	xorwf	___ftadd@f2,f
  5912  0E54  30FF               	movlw	255
  5913  0E55  06CA               	xorwf	___ftadd@f2+1,f
  5914  0E56  30FF               	movlw	255
  5915  0E57  06CB               	xorwf	___ftadd@f2+2,f
  5916  0E58  3001               	movlw	1
  5917  0E59  07C9               	addwf	___ftadd@f2,f
  5918  0E5A  3000               	movlw	0
  5919  0E5B  1803               	skipnc
  5920  0E5C  3001               	movlw	1
  5921  0E5D  07CA               	addwf	___ftadd@f2+1,f
  5922  0E5E  3000               	movlw	0
  5923  0E5F  1803               	skipnc
  5924  0E60  3001               	movlw	1
  5925  0E61  07CB               	addwf	___ftadd@f2+2,f
  5926  0E62                     l1847:	
  5927  0E62  01D0               	clrf	___ftadd@sign
  5928  0E63  0846               	movf	___ftadd@f1,w
  5929  0E64  07C9               	addwf	___ftadd@f2,f
  5930  0E65  0847               	movf	___ftadd@f1+1,w
  5931  0E66  3DCA               	addwfc	___ftadd@f2+1,f
  5932  0E67  0848               	movf	___ftadd@f1+2,w
  5933  0E68  3DCB               	addwfc	___ftadd@f2+2,f
  5934  0E69  1FCB               	btfss	___ftadd@f2+2,7
  5935  0E6A  2E7D               	goto	l1857
  5936  0E6B  30FF               	movlw	255
  5937  0E6C  06C9               	xorwf	___ftadd@f2,f
  5938  0E6D  30FF               	movlw	255
  5939  0E6E  06CA               	xorwf	___ftadd@f2+1,f
  5940  0E6F  30FF               	movlw	255
  5941  0E70  06CB               	xorwf	___ftadd@f2+2,f
  5942  0E71  3001               	movlw	1
  5943  0E72  07C9               	addwf	___ftadd@f2,f
  5944  0E73  3000               	movlw	0
  5945  0E74  1803               	skipnc
  5946  0E75  3001               	movlw	1
  5947  0E76  07CA               	addwf	___ftadd@f2+1,f
  5948  0E77  3000               	movlw	0
  5949  0E78  1803               	skipnc
  5950  0E79  3001               	movlw	1
  5951  0E7A  07CB               	addwf	___ftadd@f2+2,f
  5952  0E7B  01D0               	clrf	___ftadd@sign
  5953  0E7C  0AD0               	incf	___ftadd@sign,f
  5954  0E7D                     l1857:	
  5955  0E7D  0849               	movf	___ftadd@f2,w
  5956  0E7E  00F0               	movwf	___ftpack@arg
  5957  0E7F  084A               	movf	___ftadd@f2+1,w
  5958  0E80  00F1               	movwf	___ftpack@arg+1
  5959  0E81  084B               	movf	___ftadd@f2+2,w
  5960  0E82  00F2               	movwf	___ftpack@arg+2
  5961  0E83  0852               	movf	___ftadd@exp1,w
  5962  0E84  00CC               	movwf	??___ftadd
  5963  0E85  084C               	movf	??___ftadd,w
  5964  0E86  00F3               	movwf	___ftpack@exp
  5965  0E87  0850               	movf	___ftadd@sign,w
  5966  0E88  00CD               	movwf	??___ftadd+1
  5967  0E89  084D               	movf	??___ftadd+1,w
  5968  0E8A  00F4               	movwf	___ftpack@sign
  5969  0E8B  3188  2058         	fcall	___ftpack
  5970  0E8D  0870               	movf	?___ftpack,w
  5971  0E8E  0020               	movlb	0	; select bank0
  5972  0E8F  00C6               	movwf	?___ftadd
  5973  0E90  0871               	movf	?___ftpack+1,w
  5974  0E91  00C7               	movwf	?___ftadd+1
  5975  0E92  0872               	movf	?___ftpack+2,w
  5976  0E93  00C8               	movwf	?___ftadd+2
  5977  0E94  0008               	return
  5978  0E95                     __end_of___ftadd:	
  5979                           
  5980                           	psect	text19
  5981  1630                     __ptext19:	
  5982 ;; *************** function ___ftneg *****************
  5983 ;; Defined at:
  5984 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  f1              3    0[COMMON] float 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  3    0[COMMON] float 
  5991 ;; Registers used:
  5992 ;;		wreg
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5998 ;;      Params:         3       0       0       0       0       0       0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0
  6001 ;;      Totals:         3       0       0       0       0       0       0       0
  6002 ;;Total ram usage:        3 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_sprintf
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           
  6012                           ;psect for function ___ftneg
  6013  1630                     ___ftneg:	
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in ___ftneg: [wreg]
  6017  1630  0872               	movf	___ftneg@f1+2,w
  6018  1631  0471               	iorwf	___ftneg@f1+1,w
  6019  1632  0470               	iorwf	___ftneg@f1,w
  6020  1633  1903               	skipnz
  6021  1634  0008               	return
  6022  1635  3080               	movlw	128
  6023  1636  06F2               	xorwf	___ftneg@f1+2,f
  6024  1637  0008               	return
  6025  1638                     __end_of___ftneg:	
  6026                           
  6027                           	psect	text20
  6028  16EA                     __ptext20:	
  6029 ;; *************** function ___ftge *****************
  6030 ;; Defined at:
  6031 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  ff1             3    0[COMMON] float 
  6034 ;;  ff2             3    3[COMMON] float 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;		None
  6037 ;; Return value:  Size  Location     Type
  6038 ;;		None               void
  6039 ;; Registers used:
  6040 ;;		wreg, status,2, status,0
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6046 ;;      Params:         6       0       0       0       0       0       0       0
  6047 ;;      Locals:         0       0       0       0       0       0       0       0
  6048 ;;      Temps:          3       0       0       0       0       0       0       0
  6049 ;;      Totals:         9       0       0       0       0       0       0       0
  6050 ;;Total ram usage:        9 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_sprintf
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           
  6060                           ;psect for function ___ftge
  6061  16EA                     ___ftge:	
  6062                           
  6063                           ;incstack = 0
  6064                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6065  16EA  1FF2               	btfss	___ftge@ff1+2,7
  6066  16EB  2F00               	goto	l2149
  6067  16EC  0970               	comf	___ftge@ff1,w
  6068  16ED  00F6               	movwf	??___ftge
  6069  16EE  0971               	comf	___ftge@ff1+1,w
  6070  16EF  00F7               	movwf	??___ftge+1
  6071  16F0  0972               	comf	___ftge@ff1+2,w
  6072  16F1  00F8               	movwf	??___ftge+2
  6073  16F2  0AF6               	incf	??___ftge,f
  6074  16F3  1903               	skipnz
  6075  16F4  0AF7               	incf	??___ftge+1,f
  6076  16F5  1903               	skipnz
  6077  16F6  0AF8               	incf	??___ftge+2,f
  6078  16F7  3000               	movlw	0
  6079  16F8  0776               	addwf	??___ftge,w
  6080  16F9  00F0               	movwf	___ftge@ff1
  6081  16FA  3000               	movlw	0
  6082  16FB  3D77               	addwfc	??___ftge+1,w
  6083  16FC  00F1               	movwf	___ftge@ff1+1
  6084  16FD  3080               	movlw	128
  6085  16FE  3D78               	addwfc	??___ftge+2,w
  6086  16FF  00F2               	movwf	___ftge@ff1+2
  6087  1700                     l2149:	
  6088  1700  1FF5               	btfss	___ftge@ff2+2,7
  6089  1701  2F16               	goto	l2153
  6090  1702  0973               	comf	___ftge@ff2,w
  6091  1703  00F6               	movwf	??___ftge
  6092  1704  0974               	comf	___ftge@ff2+1,w
  6093  1705  00F7               	movwf	??___ftge+1
  6094  1706  0975               	comf	___ftge@ff2+2,w
  6095  1707  00F8               	movwf	??___ftge+2
  6096  1708  0AF6               	incf	??___ftge,f
  6097  1709  1903               	skipnz
  6098  170A  0AF7               	incf	??___ftge+1,f
  6099  170B  1903               	skipnz
  6100  170C  0AF8               	incf	??___ftge+2,f
  6101  170D  3000               	movlw	0
  6102  170E  0776               	addwf	??___ftge,w
  6103  170F  00F3               	movwf	___ftge@ff2
  6104  1710  3000               	movlw	0
  6105  1711  3D77               	addwfc	??___ftge+1,w
  6106  1712  00F4               	movwf	___ftge@ff2+1
  6107  1713  3080               	movlw	128
  6108  1714  3D78               	addwfc	??___ftge+2,w
  6109  1715  00F5               	movwf	___ftge@ff2+2
  6110  1716                     l2153:	
  6111  1716  3080               	movlw	128
  6112  1717  06F2               	xorwf	___ftge@ff1+2,f
  6113  1718  3080               	movlw	128
  6114  1719  06F5               	xorwf	___ftge@ff2+2,f
  6115  171A  0875               	movf	___ftge@ff2+2,w
  6116  171B  0272               	subwf	___ftge@ff1+2,w
  6117  171C  1D03               	skipz
  6118  171D  0008               	return
  6119  171E  0874               	movf	___ftge@ff2+1,w
  6120  171F  0271               	subwf	___ftge@ff1+1,w
  6121  1720  1D03               	skipz
  6122  1721  0008               	return
  6123  1722  0873               	movf	___ftge@ff2,w
  6124  1723  0270               	subwf	___ftge@ff1,w
  6125  1724  0008               	return
  6126  1725                     __end_of___ftge:	
  6127                           
  6128                           	psect	text21
  6129  1638                     __ptext21:	
  6130 ;; *************** function ___lwtoft *****************
  6131 ;; Defined at:
  6132 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;  c               2    8[COMMON] unsigned int 
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;		None
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  3    8[COMMON] float 
  6139 ;; Registers used:
  6140 ;;		wreg, status,2, status,0, pclath, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6146 ;;      Params:         3       0       0       0       0       0       0       0
  6147 ;;      Locals:         0       0       0       0       0       0       0       0
  6148 ;;      Temps:          1       0       0       0       0       0       0       0
  6149 ;;      Totals:         4       0       0       0       0       0       0       0
  6150 ;;Total ram usage:        4 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    1
  6153 ;; This function calls:
  6154 ;;		___ftpack
  6155 ;; This function is called by:
  6156 ;;		_loop
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           
  6161                           ;psect for function ___lwtoft
  6162  1638                     ___lwtoft:	
  6163                           
  6164                           ;incstack = 0
  6165                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6166  1638  0878               	movf	___lwtoft@c,w
  6167  1639  00F0               	movwf	___ftpack@arg
  6168  163A  0879               	movf	___lwtoft@c+1,w
  6169  163B  00F1               	movwf	___ftpack@arg+1
  6170  163C  01F2               	clrf	___ftpack@arg+2
  6171  163D  308E               	movlw	142
  6172  163E  00FB               	movwf	??___lwtoft
  6173  163F  087B               	movf	??___lwtoft,w
  6174  1640  00F3               	movwf	___ftpack@exp
  6175  1641  01F4               	clrf	___ftpack@sign
  6176  1642  3188  2058         	fcall	___ftpack
  6177  1644  0870               	movf	?___ftpack,w
  6178  1645  00F8               	movwf	?___lwtoft
  6179  1646  0871               	movf	?___ftpack+1,w
  6180  1647  00F9               	movwf	?___lwtoft+1
  6181  1648  0872               	movf	?___ftpack+2,w
  6182  1649  00FA               	movwf	?___lwtoft+2
  6183  164A  0008               	return
  6184  164B                     __end_of___lwtoft:	
  6185                           
  6186                           	psect	text22
  6187  0B8C                     __ptext22:	
  6188 ;; *************** function ___ftdiv *****************
  6189 ;; Defined at:
  6190 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  f2              3   24[BANK0 ] float 
  6193 ;;  f1              3   27[BANK0 ] float 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  f3              3   35[BANK0 ] float 
  6196 ;;  sign            1   39[BANK0 ] unsigned char 
  6197 ;;  exp             1   38[BANK0 ] unsigned char 
  6198 ;;  cntr            1   34[BANK0 ] unsigned char 
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  3   24[BANK0 ] float 
  6201 ;; Registers used:
  6202 ;;		wreg, status,2, status,0, pclath, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6208 ;;      Params:         0       6       0       0       0       0       0       0
  6209 ;;      Locals:         0       6       0       0       0       0       0       0
  6210 ;;      Temps:          0       4       0       0       0       0       0       0
  6211 ;;      Totals:         0      16       0       0       0       0       0       0
  6212 ;;Total ram usage:       16 bytes
  6213 ;; Hardware stack levels used:    1
  6214 ;; Hardware stack levels required when called:    1
  6215 ;; This function calls:
  6216 ;;		___ftpack
  6217 ;; This function is called by:
  6218 ;;		_loop
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           
  6223                           ;psect for function ___ftdiv
  6224  0B8C                     ___ftdiv:	
  6225                           
  6226                           ;incstack = 0
  6227                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6228  0B8C  0020               	movlb	0	; select bank0
  6229  0B8D  083B               	movf	___ftdiv@f1,w
  6230  0B8E  00BE               	movwf	??___ftdiv
  6231  0B8F  083C               	movf	___ftdiv@f1+1,w
  6232  0B90  00BF               	movwf	??___ftdiv+1
  6233  0B91  083D               	movf	___ftdiv@f1+2,w
  6234  0B92  00C0               	movwf	??___ftdiv+2
  6235  0B93  1003               	clrc
  6236  0B94  0D3F               	rlf	??___ftdiv+1,w
  6237  0B95  0D40               	rlf	??___ftdiv+2,w
  6238  0B96  00C1               	movwf	??___ftdiv+3
  6239  0B97  0841               	movf	??___ftdiv+3,w
  6240  0B98  00C6               	movwf	___ftdiv@exp
  6241  0B99  08C6               	movf	___ftdiv@exp,f
  6242  0B9A  1D03               	skipz
  6243  0B9B  2BA3               	goto	l2537
  6244  0B9C  3000               	movlw	0
  6245  0B9D  00B8               	movwf	?___ftdiv
  6246  0B9E  3000               	movlw	0
  6247  0B9F  00B9               	movwf	?___ftdiv+1
  6248  0BA0  3000               	movlw	0
  6249  0BA1  00BA               	movwf	?___ftdiv+2
  6250  0BA2  0008               	return
  6251  0BA3                     l2537:	
  6252  0BA3  0838               	movf	___ftdiv@f2,w
  6253  0BA4  00BE               	movwf	??___ftdiv
  6254  0BA5  0839               	movf	___ftdiv@f2+1,w
  6255  0BA6  00BF               	movwf	??___ftdiv+1
  6256  0BA7  083A               	movf	___ftdiv@f2+2,w
  6257  0BA8  00C0               	movwf	??___ftdiv+2
  6258  0BA9  1003               	clrc
  6259  0BAA  0D3F               	rlf	??___ftdiv+1,w
  6260  0BAB  0D40               	rlf	??___ftdiv+2,w
  6261  0BAC  00C1               	movwf	??___ftdiv+3
  6262  0BAD  0841               	movf	??___ftdiv+3,w
  6263  0BAE  00C7               	movwf	___ftdiv@sign
  6264  0BAF  08C7               	movf	___ftdiv@sign,f
  6265  0BB0  1D03               	skipz
  6266  0BB1  2BB9               	goto	l2543
  6267  0BB2  3000               	movlw	0
  6268  0BB3  00B8               	movwf	?___ftdiv
  6269  0BB4  3000               	movlw	0
  6270  0BB5  00B9               	movwf	?___ftdiv+1
  6271  0BB6  3000               	movlw	0
  6272  0BB7  00BA               	movwf	?___ftdiv+2
  6273  0BB8  0008               	return
  6274  0BB9                     l2543:	
  6275  0BB9  3000               	movlw	0
  6276  0BBA  00C3               	movwf	___ftdiv@f3
  6277  0BBB  3000               	movlw	0
  6278  0BBC  00C4               	movwf	___ftdiv@f3+1
  6279  0BBD  3000               	movlw	0
  6280  0BBE  00C5               	movwf	___ftdiv@f3+2
  6281  0BBF  3089               	movlw	137
  6282  0BC0  0747               	addwf	___ftdiv@sign,w
  6283  0BC1  00BE               	movwf	??___ftdiv
  6284  0BC2  083E               	movf	??___ftdiv,w
  6285  0BC3  02C6               	subwf	___ftdiv@exp,f
  6286  0BC4  083B               	movf	___ftdiv@f1,w
  6287  0BC5  00BE               	movwf	??___ftdiv
  6288  0BC6  083C               	movf	___ftdiv@f1+1,w
  6289  0BC7  00BF               	movwf	??___ftdiv+1
  6290  0BC8  083D               	movf	___ftdiv@f1+2,w
  6291  0BC9  00C0               	movwf	??___ftdiv+2
  6292  0BCA  3010               	movlw	16
  6293  0BCB                     u3565:	
  6294  0BCB  36C0               	lsrf	??___ftdiv+2,f
  6295  0BCC  0CBF               	rrf	??___ftdiv+1,f
  6296  0BCD  0CBE               	rrf	??___ftdiv,f
  6297  0BCE  0B89               	decfsz	9,f
  6298  0BCF  2BCB               	goto	u3565
  6299  0BD0  083E               	movf	??___ftdiv,w
  6300  0BD1  00C1               	movwf	??___ftdiv+3
  6301  0BD2  0841               	movf	??___ftdiv+3,w
  6302  0BD3  00C7               	movwf	___ftdiv@sign
  6303  0BD4  0838               	movf	___ftdiv@f2,w
  6304  0BD5  00BE               	movwf	??___ftdiv
  6305  0BD6  0839               	movf	___ftdiv@f2+1,w
  6306  0BD7  00BF               	movwf	??___ftdiv+1
  6307  0BD8  083A               	movf	___ftdiv@f2+2,w
  6308  0BD9  00C0               	movwf	??___ftdiv+2
  6309  0BDA  3010               	movlw	16
  6310  0BDB                     u3575:	
  6311  0BDB  36C0               	lsrf	??___ftdiv+2,f
  6312  0BDC  0CBF               	rrf	??___ftdiv+1,f
  6313  0BDD  0CBE               	rrf	??___ftdiv,f
  6314  0BDE  0B89               	decfsz	9,f
  6315  0BDF  2BDB               	goto	u3575
  6316  0BE0  083E               	movf	??___ftdiv,w
  6317  0BE1  00C1               	movwf	??___ftdiv+3
  6318  0BE2  0841               	movf	??___ftdiv+3,w
  6319  0BE3  06C7               	xorwf	___ftdiv@sign,f
  6320  0BE4  3080               	movlw	128
  6321  0BE5  00BE               	movwf	??___ftdiv
  6322  0BE6  083E               	movf	??___ftdiv,w
  6323  0BE7  05C7               	andwf	___ftdiv@sign,f
  6324  0BE8  17BC               	bsf	___ftdiv@f1+1,7
  6325  0BE9  30FF               	movlw	255
  6326  0BEA  05BB               	andwf	___ftdiv@f1,f
  6327  0BEB  30FF               	movlw	255
  6328  0BEC  05BC               	andwf	___ftdiv@f1+1,f
  6329  0BED  3000               	movlw	0
  6330  0BEE  05BD               	andwf	___ftdiv@f1+2,f
  6331  0BEF  17B9               	bsf	___ftdiv@f2+1,7
  6332  0BF0  30FF               	movlw	255
  6333  0BF1  05B8               	andwf	___ftdiv@f2,f
  6334  0BF2  30FF               	movlw	255
  6335  0BF3  05B9               	andwf	___ftdiv@f2+1,f
  6336  0BF4  3000               	movlw	0
  6337  0BF5  05BA               	andwf	___ftdiv@f2+2,f
  6338  0BF6  3018               	movlw	24
  6339  0BF7  00BE               	movwf	??___ftdiv
  6340  0BF8  083E               	movf	??___ftdiv,w
  6341  0BF9  00C2               	movwf	___ftdiv@cntr
  6342  0BFA                     l2557:	
  6343  0BFA  3001               	movlw	1
  6344  0BFB                     u3585:	
  6345  0BFB  35C3               	lslf	___ftdiv@f3,f
  6346  0BFC  0DC4               	rlf	___ftdiv@f3+1,f
  6347  0BFD  0DC5               	rlf	___ftdiv@f3+2,f
  6348  0BFE  0B89               	decfsz	9,f
  6349  0BFF  2BFB               	goto	u3585
  6350  0C00  083A               	movf	___ftdiv@f2+2,w
  6351  0C01  023D               	subwf	___ftdiv@f1+2,w
  6352  0C02  1D03               	skipz
  6353  0C03  2C0A               	goto	u3595
  6354  0C04  0839               	movf	___ftdiv@f2+1,w
  6355  0C05  023C               	subwf	___ftdiv@f1+1,w
  6356  0C06  1D03               	skipz
  6357  0C07  2C0A               	goto	u3595
  6358  0C08  0838               	movf	___ftdiv@f2,w
  6359  0C09  023B               	subwf	___ftdiv@f1,w
  6360  0C0A                     u3595:	
  6361  0C0A  1C03               	skipc
  6362  0C0B  2C13               	goto	l2565
  6363  0C0C  0838               	movf	___ftdiv@f2,w
  6364  0C0D  02BB               	subwf	___ftdiv@f1,f
  6365  0C0E  0839               	movf	___ftdiv@f2+1,w
  6366  0C0F  3BBC               	subwfb	___ftdiv@f1+1,f
  6367  0C10  083A               	movf	___ftdiv@f2+2,w
  6368  0C11  3BBD               	subwfb	___ftdiv@f1+2,f
  6369  0C12  1443               	bsf	___ftdiv@f3,0
  6370  0C13                     l2565:	
  6371  0C13  3001               	movlw	1
  6372  0C14                     u3605:	
  6373  0C14  35BB               	lslf	___ftdiv@f1,f
  6374  0C15  0DBC               	rlf	___ftdiv@f1+1,f
  6375  0C16  0DBD               	rlf	___ftdiv@f1+2,f
  6376  0C17  0B89               	decfsz	9,f
  6377  0C18  2C14               	goto	u3605
  6378  0C19  3001               	movlw	1
  6379  0C1A  02C2               	subwf	___ftdiv@cntr,f
  6380  0C1B  1D03               	btfss	3,2
  6381  0C1C  2BFA               	goto	l2557
  6382  0C1D  0843               	movf	___ftdiv@f3,w
  6383  0C1E  00F0               	movwf	___ftpack@arg
  6384  0C1F  0844               	movf	___ftdiv@f3+1,w
  6385  0C20  00F1               	movwf	___ftpack@arg+1
  6386  0C21  0845               	movf	___ftdiv@f3+2,w
  6387  0C22  00F2               	movwf	___ftpack@arg+2
  6388  0C23  0846               	movf	___ftdiv@exp,w
  6389  0C24  00BE               	movwf	??___ftdiv
  6390  0C25  083E               	movf	??___ftdiv,w
  6391  0C26  00F3               	movwf	___ftpack@exp
  6392  0C27  0847               	movf	___ftdiv@sign,w
  6393  0C28  00BF               	movwf	??___ftdiv+1
  6394  0C29  083F               	movf	??___ftdiv+1,w
  6395  0C2A  00F4               	movwf	___ftpack@sign
  6396  0C2B  3188  2058         	fcall	___ftpack
  6397  0C2D  0870               	movf	?___ftpack,w
  6398  0C2E  0020               	movlb	0	; select bank0
  6399  0C2F  00B8               	movwf	?___ftdiv
  6400  0C30  0871               	movf	?___ftpack+1,w
  6401  0C31  00B9               	movwf	?___ftdiv+1
  6402  0C32  0872               	movf	?___ftpack+2,w
  6403  0C33  00BA               	movwf	?___ftdiv+2
  6404  0C34  0008               	return
  6405  0C35                     __end_of___ftdiv:	
  6406                           
  6407                           	psect	text23
  6408  0858                     __ptext23:	
  6409 ;; *************** function ___ftpack *****************
  6410 ;; Defined at:
  6411 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;  arg             3    0[COMMON] unsigned um
  6414 ;;  exp             1    3[COMMON] unsigned char 
  6415 ;;  sign            1    4[COMMON] unsigned char 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  3    0[COMMON] float 
  6420 ;; Registers used:
  6421 ;;		wreg, status,2, status,0
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6427 ;;      Params:         5       0       0       0       0       0       0       0
  6428 ;;      Locals:         0       0       0       0       0       0       0       0
  6429 ;;      Temps:          3       0       0       0       0       0       0       0
  6430 ;;      Totals:         8       0       0       0       0       0       0       0
  6431 ;;Total ram usage:        8 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		___ftadd
  6437 ;;		___ftdiv
  6438 ;;		___ftmul
  6439 ;;		___lltoft
  6440 ;;		___lwtoft
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           
  6445                           ;psect for function ___ftpack
  6446  0858                     ___ftpack:	
  6447                           
  6448                           ;incstack = 0
  6449                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6450  0858  0873               	movf	___ftpack@exp,w
  6451  0859  1903               	btfsc	3,2
  6452  085A  2860               	goto	l1669
  6453  085B  0872               	movf	___ftpack@arg+2,w
  6454  085C  0471               	iorwf	___ftpack@arg+1,w
  6455  085D  0470               	iorwf	___ftpack@arg,w
  6456  085E  1D03               	skipz
  6457  085F  2871               	goto	l1675
  6458  0860                     l1669:	
  6459  0860  3000               	movlw	0
  6460  0861  00F0               	movwf	?___ftpack
  6461  0862  3000               	movlw	0
  6462  0863  00F1               	movwf	?___ftpack+1
  6463  0864  3000               	movlw	0
  6464  0865  00F2               	movwf	?___ftpack+2
  6465  0866  0008               	return
  6466  0867                     l1673:	
  6467  0867  3001               	movlw	1
  6468  0868  00F5               	movwf	??___ftpack
  6469  0869  0875               	movf	??___ftpack,w
  6470  086A  07F3               	addwf	___ftpack@exp,f
  6471  086B  3001               	movlw	1
  6472  086C                     u1855:	
  6473  086C  36F2               	lsrf	___ftpack@arg+2,f
  6474  086D  0CF1               	rrf	___ftpack@arg+1,f
  6475  086E  0CF0               	rrf	___ftpack@arg,f
  6476  086F  0B89               	decfsz	9,f
  6477  0870  286C               	goto	u1855
  6478  0871                     l1675:	
  6479  0871  30FE               	movlw	254
  6480  0872  0572               	andwf	___ftpack@arg+2,w
  6481  0873  1903               	btfsc	3,2
  6482  0874  288A               	goto	l434
  6483  0875  2867               	goto	l1673
  6484  0876                     l1677:	
  6485  0876  3001               	movlw	1
  6486  0877  00F5               	movwf	??___ftpack
  6487  0878  0875               	movf	??___ftpack,w
  6488  0879  07F3               	addwf	___ftpack@exp,f
  6489  087A  3001               	movlw	1
  6490  087B  07F0               	addwf	___ftpack@arg,f
  6491  087C  3000               	movlw	0
  6492  087D  1803               	skipnc
  6493  087E  3001               	movlw	1
  6494  087F  07F1               	addwf	___ftpack@arg+1,f
  6495  0880  3000               	movlw	0
  6496  0881  1803               	skipnc
  6497  0882  3001               	movlw	1
  6498  0883  07F2               	addwf	___ftpack@arg+2,f
  6499  0884  3001               	movlw	1
  6500  0885                     u1875:	
  6501  0885  36F2               	lsrf	___ftpack@arg+2,f
  6502  0886  0CF1               	rrf	___ftpack@arg+1,f
  6503  0887  0CF0               	rrf	___ftpack@arg,f
  6504  0888  0B89               	decfsz	9,f
  6505  0889  2885               	goto	u1875
  6506  088A                     l434:	
  6507  088A  30FF               	movlw	255
  6508  088B  0572               	andwf	___ftpack@arg+2,w
  6509  088C  1903               	btfsc	3,2
  6510  088D  2897               	goto	l1685
  6511  088E  2876               	goto	l1677
  6512  088F                     l1683:	
  6513  088F  3001               	movlw	1
  6514  0890  02F3               	subwf	___ftpack@exp,f
  6515  0891  3001               	movlw	1
  6516  0892                     u1895:	
  6517  0892  35F0               	lslf	___ftpack@arg,f
  6518  0893  0DF1               	rlf	___ftpack@arg+1,f
  6519  0894  0DF2               	rlf	___ftpack@arg+2,f
  6520  0895  0B89               	decfsz	9,f
  6521  0896  2892               	goto	u1895
  6522  0897                     l1685:	
  6523  0897  1FF1               	btfss	___ftpack@arg+1,7
  6524  0898  288F               	goto	l1683
  6525  0899  1873               	btfsc	___ftpack@exp,0
  6526  089A  28A1               	goto	l440
  6527  089B  30FF               	movlw	255
  6528  089C  05F0               	andwf	___ftpack@arg,f
  6529  089D  307F               	movlw	127
  6530  089E  05F1               	andwf	___ftpack@arg+1,f
  6531  089F  30FF               	movlw	255
  6532  08A0  05F2               	andwf	___ftpack@arg+2,f
  6533  08A1                     l440:	
  6534  08A1  1003               	clrc
  6535  08A2  0CF3               	rrf	___ftpack@exp,f
  6536  08A3  0873               	movf	___ftpack@exp,w
  6537  08A4  00F5               	movwf	??___ftpack
  6538  08A5  01F6               	clrf	??___ftpack+1
  6539  08A6  01F7               	clrf	??___ftpack+2
  6540  08A7  3010               	movlw	16
  6541  08A8                     u1925:	
  6542  08A8  35F5               	lslf	??___ftpack,f
  6543  08A9  0DF6               	rlf	??___ftpack+1,f
  6544  08AA  0DF7               	rlf	??___ftpack+2,f
  6545  08AB  0B89               	decfsz	9,f
  6546  08AC  28A8               	goto	u1925
  6547  08AD  0875               	movf	??___ftpack,w
  6548  08AE  04F0               	iorwf	___ftpack@arg,f
  6549  08AF  0876               	movf	??___ftpack+1,w
  6550  08B0  04F1               	iorwf	___ftpack@arg+1,f
  6551  08B1  0877               	movf	??___ftpack+2,w
  6552  08B2  04F2               	iorwf	___ftpack@arg+2,f
  6553  08B3  0874               	movf	___ftpack@sign,w
  6554  08B4  1903               	btfsc	3,2
  6555  08B5  0008               	return
  6556  08B6  17F2               	bsf	___ftpack@arg+2,7
  6557  08B7  0008               	return
  6558  08B8                     __end_of___ftpack:	
  6559                           
  6560                           	psect	text24
  6561  16B5                     __ptext24:	
  6562 ;; *************** function _Lcd_Out *****************
  6563 ;; Defined at:
  6564 ;;		line 101 in file "lcd.h"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  y               1    wreg     unsigned char 
  6567 ;;  x               1    3[COMMON] unsigned char 
  6568 ;;  buffer          1    4[COMMON] PTR const unsigned char 
  6569 ;;		 -> buffer(30), 
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;  y               1    6[COMMON] unsigned char 
  6572 ;;  data            1    7[COMMON] unsigned char 
  6573 ;; Return value:  Size  Location     Type
  6574 ;;		None               void
  6575 ;; Registers used:
  6576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6582 ;;      Params:         2       0       0       0       0       0       0       0
  6583 ;;      Locals:         2       0       0       0       0       0       0       0
  6584 ;;      Temps:          1       0       0       0       0       0       0       0
  6585 ;;      Totals:         5       0       0       0       0       0       0       0
  6586 ;;Total ram usage:        5 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    1
  6589 ;; This function calls:
  6590 ;;		_Lcd_Chr_CP
  6591 ;;		_Lcd_Cmd
  6592 ;; This function is called by:
  6593 ;;		_loop
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           
  6598                           ;psect for function _Lcd_Out
  6599  16B5                     _Lcd_Out:	
  6600                           
  6601                           ;incstack = 0
  6602                           ; Regs used in _Lcd_Out: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6603                           ;Lcd_Out@y stored from wreg
  6604  16B5  00F6               	movwf	Lcd_Out@y
  6605                           
  6606                           ;lcd.h: 103: unsigned char data;
  6607                           ;lcd.h: 104: switch (y)
  6608  16B6  2EC6               	goto	l2351
  6609  16B7                     l2341:	
  6610                           ;lcd.h: 105: {
  6611                           ;lcd.h: 106: case 1: data = 128 + x; break;
  6612                           
  6613  16B7  0873               	movf	Lcd_Out@x,w
  6614  16B8  3E80               	addlw	128
  6615  16B9  2EC2               	goto	L10
  6616  16BA                     l2343:	
  6617                           ;lcd.h: 107: case 2: data = 192 + x; break;
  6618                           
  6619  16BA  0873               	movf	Lcd_Out@x,w
  6620  16BB  3EC0               	addlw	192
  6621  16BC  2EC2               	goto	L10
  6622  16BD                     l2345:	
  6623                           ;lcd.h: 108: case 3: data = 148 + x; break;
  6624                           
  6625  16BD  0873               	movf	Lcd_Out@x,w
  6626  16BE  3E94               	addlw	148
  6627  16BF  2EC2               	goto	L10
  6628  16C0                     l2347:	
  6629                           ;lcd.h: 109: case 4: data = 212 + x; break;
  6630                           
  6631  16C0  0873               	movf	Lcd_Out@x,w
  6632  16C1  3ED4               	addlw	212
  6633  16C2                     L10:	
  6634  16C2  00F5               	movwf	??_Lcd_Out
  6635  16C3  0875               	movf	??_Lcd_Out,w
  6636  16C4  00F7               	movwf	Lcd_Out@data
  6637                           
  6638                           ;lcd.h: 111: }
  6639                           
  6640                           ;lcd.h: 110: default: break;
  6641  16C5  2ED4               	goto	l2353
  6642  16C6                     l2351:	
  6643  16C6  0876               	movf	Lcd_Out@y,w
  6644                           
  6645                           ; Switch size 1, requested type "space"
  6646                           ; Number of cases is 4, Range of values is 1 to 4
  6647                           ; switch strategies available:
  6648                           ; Name         Instructions Cycles
  6649                           ; simple_byte           13     7 (average)
  6650                           ; direct_byte           17     9 (fixed)
  6651                           ; jumptable            263     9 (fixed)
  6652                           ;	Chosen strategy is simple_byte
  6653  16C7  3A01               	xorlw	1	; case 1
  6654  16C8  1903               	skipnz
  6655  16C9  2EB7               	goto	l2341
  6656  16CA  3A03               	xorlw	3	; case 2
  6657  16CB  1903               	skipnz
  6658  16CC  2EBA               	goto	l2343
  6659  16CD  3A01               	xorlw	1	; case 3
  6660  16CE  1903               	skipnz
  6661  16CF  2EBD               	goto	l2345
  6662  16D0  3A07               	xorlw	7	; case 4
  6663  16D1  1903               	skipnz
  6664  16D2  2EC0               	goto	l2347
  6665  16D3  2ED4               	goto	l2353
  6666  16D4                     l2353:	
  6667                           
  6668                           ;lcd.h: 112: Lcd_Cmd(data);
  6669  16D4  0877               	movf	Lcd_Out@data,w
  6670  16D5  3189  213F  3196   	fcall	_Lcd_Cmd
  6671  16D8                     l2359:	
  6672                           ;lcd.h: 113: while(*buffer)
  6673                           
  6674  16D8  0874               	movf	Lcd_Out@buffer,w
  6675  16D9  0086               	movwf	6
  6676  16DA  0187               	clrf	7
  6677  16DB  0881               	movf	1,f
  6678  16DC  1903               	btfsc	3,2
  6679  16DD  0008               	return
  6680                           
  6681                           ;lcd.h: 114: {
  6682                           ;lcd.h: 115: Lcd_Chr_CP(*buffer);
  6683  16DE  0874               	movf	Lcd_Out@buffer,w
  6684  16DF  0086               	movwf	6
  6685  16E0  0187               	clrf	7
  6686  16E1  0801               	movf	1,w
  6687  16E2  3189  21D0  3196   	fcall	_Lcd_Chr_CP
  6688                           
  6689                           ;lcd.h: 116: buffer++;
  6690  16E5  3001               	movlw	1
  6691  16E6  00F5               	movwf	??_Lcd_Out
  6692  16E7  0875               	movf	??_Lcd_Out,w
  6693  16E8  07F4               	addwf	Lcd_Out@buffer,f
  6694  16E9  2ED8               	goto	l2359
  6695  16EA                     __end_of_Lcd_Out:	
  6696                           ;lcd.h: 117: }
  6697                           ;lcd.h: 118: return;
  6698                           
  6699                           
  6700                           	psect	text25
  6701  093F                     __ptext25:	
  6702 ;; *************** function _Lcd_Cmd *****************
  6703 ;; Defined at:
  6704 ;;		line 157 in file "lcd.h"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  data            1    wreg     unsigned char 
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;  data            1    2[COMMON] unsigned char 
  6709 ;; Return value:  Size  Location     Type
  6710 ;;		None               void
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, status,0
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6718 ;;      Params:         0       0       0       0       0       0       0       0
  6719 ;;      Locals:         1       0       0       0       0       0       0       0
  6720 ;;      Temps:          2       0       0       0       0       0       0       0
  6721 ;;      Totals:         3       0       0       0       0       0       0       0
  6722 ;;Total ram usage:        3 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_Lcd_Init
  6728 ;;		_Lcd_Out
  6729 ;;		_setup
  6730 ;;		_loop
  6731 ;;		_Lcd_Out2
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           
  6736                           ;psect for function _Lcd_Cmd
  6737  093F                     _Lcd_Cmd:	
  6738                           
  6739                           ;incstack = 0
  6740                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0]
  6741                           ;Lcd_Cmd@data stored from wreg
  6742  093F  00F2               	movwf	Lcd_Cmd@data
  6743                           
  6744                           ;lcd.h: 158: PORTBbits.RB2 = 0; PORTBbits.RB1 = 0;
  6745  0940  0020               	movlb	0	; select bank0
  6746  0941  110D               	bcf	13,2	;volatile
  6747  0942  108D               	bcf	13,1	;volatile
  6748                           
  6749                           ;lcd.h: 159: PORTBbits.RB7 = (data & 0b10000000)>>7; PORTBbits.RB6 = (data & 0b01000000)
      +                          >>6;
  6750  0943  0872               	movf	Lcd_Cmd@data,w
  6751  0944  00F0               	movwf	??_Lcd_Cmd
  6752  0945  3007               	movlw	7
  6753  0946                     u2525:	
  6754  0946  36F0               	lsrf	??_Lcd_Cmd,f
  6755  0947  0B89               	decfsz	9,f
  6756  0948  2946               	goto	u2525
  6757  0949  0870               	movf	??_Lcd_Cmd,w
  6758  094A  3901               	andlw	1
  6759  094B  00F1               	movwf	??_Lcd_Cmd+1
  6760  094C  0CF1               	rrf	??_Lcd_Cmd+1,f
  6761  094D  0CF1               	rrf	??_Lcd_Cmd+1,f
  6762  094E  080D               	movf	13,w	;volatile
  6763  094F  0671               	xorwf	??_Lcd_Cmd+1,w
  6764  0950  397F               	andlw	-129
  6765  0951  0671               	xorwf	??_Lcd_Cmd+1,w
  6766  0952  008D               	movwf	13	;volatile
  6767  0953  0872               	movf	Lcd_Cmd@data,w
  6768  0954  00F0               	movwf	??_Lcd_Cmd
  6769  0955  3006               	movlw	6
  6770  0956                     u2535:	
  6771  0956  36F0               	lsrf	??_Lcd_Cmd,f
  6772  0957  0B89               	decfsz	9,f
  6773  0958  2956               	goto	u2535
  6774  0959  0870               	movf	??_Lcd_Cmd,w
  6775  095A  3901               	andlw	1
  6776  095B  00F1               	movwf	??_Lcd_Cmd+1
  6777  095C  0EF1               	swapf	??_Lcd_Cmd+1,f
  6778  095D  0DF1               	rlf	??_Lcd_Cmd+1,f
  6779  095E  0DF1               	rlf	??_Lcd_Cmd+1,f
  6780  095F  080D               	movf	13,w	;volatile
  6781  0960  0671               	xorwf	??_Lcd_Cmd+1,w
  6782  0961  39BF               	andlw	-65
  6783  0962  0671               	xorwf	??_Lcd_Cmd+1,w
  6784  0963  008D               	movwf	13	;volatile
  6785                           
  6786                           ;lcd.h: 160: PORTBbits.RB5 = (data & 0b00100000)>>5; PORTBbits.RB4 = (data & 0b00010000)
      +                          >>4;
  6787  0964  0872               	movf	Lcd_Cmd@data,w
  6788  0965  00F0               	movwf	??_Lcd_Cmd
  6789  0966  3005               	movlw	5
  6790  0967                     u2545:	
  6791  0967  36F0               	lsrf	??_Lcd_Cmd,f
  6792  0968  0B89               	decfsz	9,f
  6793  0969  2967               	goto	u2545
  6794  096A  0870               	movf	??_Lcd_Cmd,w
  6795  096B  3901               	andlw	1
  6796  096C  00F1               	movwf	??_Lcd_Cmd+1
  6797  096D  0EF1               	swapf	??_Lcd_Cmd+1,f
  6798  096E  0DF1               	rlf	??_Lcd_Cmd+1,f
  6799  096F  080D               	movf	13,w	;volatile
  6800  0970  0671               	xorwf	??_Lcd_Cmd+1,w
  6801  0971  39DF               	andlw	-33
  6802  0972  0671               	xorwf	??_Lcd_Cmd+1,w
  6803  0973  008D               	movwf	13	;volatile
  6804  0974  0872               	movf	Lcd_Cmd@data,w
  6805  0975  00F0               	movwf	??_Lcd_Cmd
  6806  0976  3004               	movlw	4
  6807  0977                     u2555:	
  6808  0977  36F0               	lsrf	??_Lcd_Cmd,f
  6809  0978  0B89               	decfsz	9,f
  6810  0979  2977               	goto	u2555
  6811  097A  0870               	movf	??_Lcd_Cmd,w
  6812  097B  3901               	andlw	1
  6813  097C  00F1               	movwf	??_Lcd_Cmd+1
  6814  097D  0EF1               	swapf	??_Lcd_Cmd+1,f
  6815  097E  080D               	movf	13,w	;volatile
  6816  097F  0671               	xorwf	??_Lcd_Cmd+1,w
  6817  0980  39EF               	andlw	-17
  6818  0981  0671               	xorwf	??_Lcd_Cmd+1,w
  6819  0982  008D               	movwf	13	;volatile
  6820                           
  6821                           ;lcd.h: 161: _delay(10);
  6822  0983  3003               	movlw	3
  6823  0984  00F0               	movwf	??_Lcd_Cmd
  6824  0985                     u3747:	
  6825  0985  0BF0               	decfsz	??_Lcd_Cmd,f
  6826  0986  2985               	goto	u3747
  6827                           
  6828                           ;lcd.h: 162: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(1000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  6829  0987  0020               	movlb	0	; select bank0
  6830  0988  150D               	bsf	13,2	;volatile
  6831  0989  0000               	nop
  6832  098A  0020               	movlb	0	; select bank0
  6833  098B  110D               	bcf	13,2	;volatile
  6834                           
  6835                           ;lcd.h: 163: PORTBbits.RB7 = (data & 0b00001000)>>3; PORTBbits.RB6 = (data & 0b00000100)
      +                          >>2;
  6836  098C  0872               	movf	Lcd_Cmd@data,w
  6837  098D  00F0               	movwf	??_Lcd_Cmd
  6838  098E  3003               	movlw	3
  6839  098F                     u2565:	
  6840  098F  36F0               	lsrf	??_Lcd_Cmd,f
  6841  0990  0B89               	decfsz	9,f
  6842  0991  298F               	goto	u2565
  6843  0992  0870               	movf	??_Lcd_Cmd,w
  6844  0993  3901               	andlw	1
  6845  0994  00F1               	movwf	??_Lcd_Cmd+1
  6846  0995  0CF1               	rrf	??_Lcd_Cmd+1,f
  6847  0996  0CF1               	rrf	??_Lcd_Cmd+1,f
  6848  0997  080D               	movf	13,w	;volatile
  6849  0998  0671               	xorwf	??_Lcd_Cmd+1,w
  6850  0999  397F               	andlw	-129
  6851  099A  0671               	xorwf	??_Lcd_Cmd+1,w
  6852  099B  008D               	movwf	13	;volatile
  6853  099C  0872               	movf	Lcd_Cmd@data,w
  6854  099D  00F0               	movwf	??_Lcd_Cmd
  6855  099E  3002               	movlw	2
  6856  099F                     u2575:	
  6857  099F  36F0               	lsrf	??_Lcd_Cmd,f
  6858  09A0  0B89               	decfsz	9,f
  6859  09A1  299F               	goto	u2575
  6860  09A2  0870               	movf	??_Lcd_Cmd,w
  6861  09A3  3901               	andlw	1
  6862  09A4  00F1               	movwf	??_Lcd_Cmd+1
  6863  09A5  0EF1               	swapf	??_Lcd_Cmd+1,f
  6864  09A6  0DF1               	rlf	??_Lcd_Cmd+1,f
  6865  09A7  0DF1               	rlf	??_Lcd_Cmd+1,f
  6866  09A8  080D               	movf	13,w	;volatile
  6867  09A9  0671               	xorwf	??_Lcd_Cmd+1,w
  6868  09AA  39BF               	andlw	-65
  6869  09AB  0671               	xorwf	??_Lcd_Cmd+1,w
  6870  09AC  008D               	movwf	13	;volatile
  6871                           
  6872                           ;lcd.h: 164: PORTBbits.RB5 = (data & 0b00000010)>>1; PORTBbits.RB4 = (data & 0b00000001)
      +                          ;
  6873  09AD  3672               	lsrf	Lcd_Cmd@data,w
  6874  09AE  3901               	andlw	1
  6875  09AF  00F0               	movwf	??_Lcd_Cmd
  6876  09B0  0EF0               	swapf	??_Lcd_Cmd,f
  6877  09B1  0DF0               	rlf	??_Lcd_Cmd,f
  6878  09B2  080D               	movf	13,w	;volatile
  6879  09B3  0670               	xorwf	??_Lcd_Cmd,w
  6880  09B4  39DF               	andlw	-33
  6881  09B5  0670               	xorwf	??_Lcd_Cmd,w
  6882  09B6  008D               	movwf	13	;volatile
  6883  09B7  0872               	movf	Lcd_Cmd@data,w
  6884  09B8  3901               	andlw	1
  6885  09B9  00F0               	movwf	??_Lcd_Cmd
  6886  09BA  0EF0               	swapf	??_Lcd_Cmd,f
  6887  09BB  080D               	movf	13,w	;volatile
  6888  09BC  0670               	xorwf	??_Lcd_Cmd,w
  6889  09BD  39EF               	andlw	-17
  6890  09BE  0670               	xorwf	??_Lcd_Cmd,w
  6891  09BF  008D               	movwf	13	;volatile
  6892                           
  6893                           ;lcd.h: 165: _delay(10);
  6894  09C0  3003               	movlw	3
  6895  09C1  00F0               	movwf	??_Lcd_Cmd
  6896  09C2                     u3757:	
  6897  09C2  0BF0               	decfsz	??_Lcd_Cmd,f
  6898  09C3  29C2               	goto	u3757
  6899                           
  6900                           ;lcd.h: 166: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(1000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  6901  09C4  0020               	movlb	0	; select bank0
  6902  09C5  150D               	bsf	13,2	;volatile
  6903  09C6  0000               	nop
  6904  09C7  0020               	movlb	0	; select bank0
  6905  09C8  110D               	bcf	13,2	;volatile
  6906                           
  6907                           ;lcd.h: 167: _delay((unsigned long)((5500)*(1000000/4000000.0)));
  6908  09C9  30E5               	movlw	229
  6909  09CA  00F0               	movwf	??_Lcd_Cmd
  6910  09CB                     u3767:	
  6911  09CB  3200               	nop2
  6912  09CC  0000               	nop
  6913  09CD  0BF0               	decfsz	??_Lcd_Cmd,f
  6914  09CE  29CB               	goto	u3767
  6915  09CF  0008               	return
  6916  09D0                     __end_of_Lcd_Cmd:	
  6917                           
  6918                           	psect	text26
  6919  09D0                     __ptext26:	
  6920 ;; *************** function _Lcd_Chr_CP *****************
  6921 ;; Defined at:
  6922 ;;		line 143 in file "lcd.h"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;  data            1    wreg     unsigned char 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  data            1    2[COMMON] unsigned char 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;		None               void
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, status,0
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6936 ;;      Params:         0       0       0       0       0       0       0       0
  6937 ;;      Locals:         1       0       0       0       0       0       0       0
  6938 ;;      Temps:          2       0       0       0       0       0       0       0
  6939 ;;      Totals:         3       0       0       0       0       0       0       0
  6940 ;;Total ram usage:        3 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; This function calls:
  6943 ;;		Nothing
  6944 ;; This function is called by:
  6945 ;;		_Lcd_Out
  6946 ;;		_Lcd_Out2
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           
  6951                           ;psect for function _Lcd_Chr_CP
  6952  09D0                     _Lcd_Chr_CP:	
  6953                           
  6954                           ;incstack = 0
  6955                           ; Regs used in _Lcd_Chr_CP: [wreg+status,2+status,0]
  6956                           ;Lcd_Chr_CP@data stored from wreg
  6957  09D0  00F2               	movwf	Lcd_Chr_CP@data
  6958                           
  6959                           ;lcd.h: 144: PORTBbits.RB2 = 0; PORTBbits.RB1 = 1;
  6960  09D1  0020               	movlb	0	; select bank0
  6961  09D2  110D               	bcf	13,2	;volatile
  6962  09D3  148D               	bsf	13,1	;volatile
  6963                           
  6964                           ;lcd.h: 145: PORTBbits.RB7 = (data & 0b10000000)>>7; PORTBbits.RB6 = (data & 0b01000000)
      +                          >>6;
  6965  09D4  0872               	movf	Lcd_Chr_CP@data,w
  6966  09D5  00F0               	movwf	??_Lcd_Chr_CP
  6967  09D6  3007               	movlw	7
  6968  09D7                     u2585:	
  6969  09D7  36F0               	lsrf	??_Lcd_Chr_CP,f
  6970  09D8  0B89               	decfsz	9,f
  6971  09D9  29D7               	goto	u2585
  6972  09DA  0870               	movf	??_Lcd_Chr_CP,w
  6973  09DB  3901               	andlw	1
  6974  09DC  00F1               	movwf	??_Lcd_Chr_CP+1
  6975  09DD  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  6976  09DE  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  6977  09DF  080D               	movf	13,w	;volatile
  6978  09E0  0671               	xorwf	??_Lcd_Chr_CP+1,w
  6979  09E1  397F               	andlw	-129
  6980  09E2  0671               	xorwf	??_Lcd_Chr_CP+1,w
  6981  09E3  008D               	movwf	13	;volatile
  6982  09E4  0872               	movf	Lcd_Chr_CP@data,w
  6983  09E5  00F0               	movwf	??_Lcd_Chr_CP
  6984  09E6  3006               	movlw	6
  6985  09E7                     u2595:	
  6986  09E7  36F0               	lsrf	??_Lcd_Chr_CP,f
  6987  09E8  0B89               	decfsz	9,f
  6988  09E9  29E7               	goto	u2595
  6989  09EA  0870               	movf	??_Lcd_Chr_CP,w
  6990  09EB  3901               	andlw	1
  6991  09EC  00F1               	movwf	??_Lcd_Chr_CP+1
  6992  09ED  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  6993  09EE  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  6994  09EF  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  6995  09F0  080D               	movf	13,w	;volatile
  6996  09F1  0671               	xorwf	??_Lcd_Chr_CP+1,w
  6997  09F2  39BF               	andlw	-65
  6998  09F3  0671               	xorwf	??_Lcd_Chr_CP+1,w
  6999  09F4  008D               	movwf	13	;volatile
  7000                           
  7001                           ;lcd.h: 146: PORTBbits.RB5 = (data & 0b00100000)>>5; PORTBbits.RB4 = (data & 0b00010000)
      +                          >>4;
  7002  09F5  0872               	movf	Lcd_Chr_CP@data,w
  7003  09F6  00F0               	movwf	??_Lcd_Chr_CP
  7004  09F7  3005               	movlw	5
  7005  09F8                     u2605:	
  7006  09F8  36F0               	lsrf	??_Lcd_Chr_CP,f
  7007  09F9  0B89               	decfsz	9,f
  7008  09FA  29F8               	goto	u2605
  7009  09FB  0870               	movf	??_Lcd_Chr_CP,w
  7010  09FC  3901               	andlw	1
  7011  09FD  00F1               	movwf	??_Lcd_Chr_CP+1
  7012  09FE  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7013  09FF  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7014  0A00  080D               	movf	13,w	;volatile
  7015  0A01  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7016  0A02  39DF               	andlw	-33
  7017  0A03  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7018  0A04  008D               	movwf	13	;volatile
  7019  0A05  0872               	movf	Lcd_Chr_CP@data,w
  7020  0A06  00F0               	movwf	??_Lcd_Chr_CP
  7021  0A07  3004               	movlw	4
  7022  0A08                     u2615:	
  7023  0A08  36F0               	lsrf	??_Lcd_Chr_CP,f
  7024  0A09  0B89               	decfsz	9,f
  7025  0A0A  2A08               	goto	u2615
  7026  0A0B  0870               	movf	??_Lcd_Chr_CP,w
  7027  0A0C  3901               	andlw	1
  7028  0A0D  00F1               	movwf	??_Lcd_Chr_CP+1
  7029  0A0E  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7030  0A0F  080D               	movf	13,w	;volatile
  7031  0A10  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7032  0A11  39EF               	andlw	-17
  7033  0A12  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7034  0A13  008D               	movwf	13	;volatile
  7035                           
  7036                           ;lcd.h: 147: _delay(10);
  7037  0A14  3003               	movlw	3
  7038  0A15  00F0               	movwf	??_Lcd_Chr_CP
  7039  0A16                     u3777:	
  7040  0A16  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7041  0A17  2A16               	goto	u3777
  7042                           
  7043                           ;lcd.h: 148: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(1000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  7044  0A18  0020               	movlb	0	; select bank0
  7045  0A19  150D               	bsf	13,2	;volatile
  7046  0A1A  0000               	nop
  7047  0A1B  0020               	movlb	0	; select bank0
  7048  0A1C  110D               	bcf	13,2	;volatile
  7049                           
  7050                           ;lcd.h: 149: PORTBbits.RB7 = (data & 0b00001000)>>3; PORTBbits.RB6 = (data & 0b00000100)
      +                          >>2;
  7051  0A1D  0872               	movf	Lcd_Chr_CP@data,w
  7052  0A1E  00F0               	movwf	??_Lcd_Chr_CP
  7053  0A1F  3003               	movlw	3
  7054  0A20                     u2625:	
  7055  0A20  36F0               	lsrf	??_Lcd_Chr_CP,f
  7056  0A21  0B89               	decfsz	9,f
  7057  0A22  2A20               	goto	u2625
  7058  0A23  0870               	movf	??_Lcd_Chr_CP,w
  7059  0A24  3901               	andlw	1
  7060  0A25  00F1               	movwf	??_Lcd_Chr_CP+1
  7061  0A26  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  7062  0A27  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  7063  0A28  080D               	movf	13,w	;volatile
  7064  0A29  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7065  0A2A  397F               	andlw	-129
  7066  0A2B  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7067  0A2C  008D               	movwf	13	;volatile
  7068  0A2D  0872               	movf	Lcd_Chr_CP@data,w
  7069  0A2E  00F0               	movwf	??_Lcd_Chr_CP
  7070  0A2F  3002               	movlw	2
  7071  0A30                     u2635:	
  7072  0A30  36F0               	lsrf	??_Lcd_Chr_CP,f
  7073  0A31  0B89               	decfsz	9,f
  7074  0A32  2A30               	goto	u2635
  7075  0A33  0870               	movf	??_Lcd_Chr_CP,w
  7076  0A34  3901               	andlw	1
  7077  0A35  00F1               	movwf	??_Lcd_Chr_CP+1
  7078  0A36  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  7079  0A37  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7080  0A38  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  7081  0A39  080D               	movf	13,w	;volatile
  7082  0A3A  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7083  0A3B  39BF               	andlw	-65
  7084  0A3C  0671               	xorwf	??_Lcd_Chr_CP+1,w
  7085  0A3D  008D               	movwf	13	;volatile
  7086                           
  7087                           ;lcd.h: 150: PORTBbits.RB5 = (data & 0b00000010)>>1; PORTBbits.RB4 = (data & 0b00000001)
      +                          ;
  7088  0A3E  3672               	lsrf	Lcd_Chr_CP@data,w
  7089  0A3F  3901               	andlw	1
  7090  0A40  00F0               	movwf	??_Lcd_Chr_CP
  7091  0A41  0EF0               	swapf	??_Lcd_Chr_CP,f
  7092  0A42  0DF0               	rlf	??_Lcd_Chr_CP,f
  7093  0A43  080D               	movf	13,w	;volatile
  7094  0A44  0670               	xorwf	??_Lcd_Chr_CP,w
  7095  0A45  39DF               	andlw	-33
  7096  0A46  0670               	xorwf	??_Lcd_Chr_CP,w
  7097  0A47  008D               	movwf	13	;volatile
  7098  0A48  0872               	movf	Lcd_Chr_CP@data,w
  7099  0A49  3901               	andlw	1
  7100  0A4A  00F0               	movwf	??_Lcd_Chr_CP
  7101  0A4B  0EF0               	swapf	??_Lcd_Chr_CP,f
  7102  0A4C  080D               	movf	13,w	;volatile
  7103  0A4D  0670               	xorwf	??_Lcd_Chr_CP,w
  7104  0A4E  39EF               	andlw	-17
  7105  0A4F  0670               	xorwf	??_Lcd_Chr_CP,w
  7106  0A50  008D               	movwf	13	;volatile
  7107                           
  7108                           ;lcd.h: 151: _delay(10);
  7109  0A51  3003               	movlw	3
  7110  0A52  00F0               	movwf	??_Lcd_Chr_CP
  7111  0A53                     u3787:	
  7112  0A53  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7113  0A54  2A53               	goto	u3787
  7114                           
  7115                           ;lcd.h: 152: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(1000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  7116  0A55  0020               	movlb	0	; select bank0
  7117  0A56  150D               	bsf	13,2	;volatile
  7118  0A57  0000               	nop
  7119  0A58  0020               	movlb	0	; select bank0
  7120  0A59  110D               	bcf	13,2	;volatile
  7121                           
  7122                           ;lcd.h: 153: _delay((unsigned long)((5)*(1000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(1000000/4000000.0)));
  7123  0A5A  0000               	nop
  7124  0A5B  30E5               	movlw	229
  7125  0A5C  00F0               	movwf	??_Lcd_Chr_CP
  7126  0A5D                     u3797:	
  7127  0A5D  3200               	nop2
  7128  0A5E  0000               	nop
  7129  0A5F  0BF0               	decfsz	??_Lcd_Chr_CP,f
  7130  0A60  2A5D               	goto	u3797
  7131  0A61  0008               	return
  7132  0A62                     __end_of_Lcd_Chr_CP:	
  7133  007E                     btemp	set	126	;btemp
  7134  007E                     pic14e$flags	set	126
  7135  007E                     wtemp	set	126
  7136  007E                     wtemp0	set	126
  7137  0080                     wtemp1	set	128
  7138  0082                     wtemp2	set	130
  7139  0084                     wtemp3	set	132
  7140  0086                     wtemp4	set	134
  7141  0088                     wtemp5	set	136
  7142  007F                     wtemp6	set	127
  7143  007E                     ttemp	set	126
  7144  007E                     ttemp0	set	126
  7145  0081                     ttemp1	set	129
  7146  0084                     ttemp2	set	132
  7147  0087                     ttemp3	set	135
  7148  007F                     ttemp4	set	127
  7149  007E                     ltemp	set	126
  7150  007E                     ltemp0	set	126
  7151  0082                     ltemp1	set	130
  7152  0086                     ltemp2	set	134
  7153  0080                     ltemp3	set	128


Data Sizes:
    Strings     7
    Constant    118
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     74      78
    BANK1            80     34      67
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 30
		 -> buffer(BANK1[30]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S385$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    Lcd_Out@buffer	PTR const unsigned char  size(1) Largest target is 30
		 -> buffer(BANK1[30]), 


Critical Paths under _main in COMMON

    _setup->_Lcd_Init
    _Lcd_Init->_Lcd_Cmd
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___lwtoft->___ftpack
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _loop->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52951
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     490
                            _Lcd_Cmd
                           _Lcd_Init
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     314
                                              3 COMMON     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _loop                                                 6     6      0   52461
                                             68 BANK0      6     6      0
                            _Lcd_Cmd
                            _Lcd_Out
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             51    46      5   42623
                                             57 BANK0     11     6      5
                                              0 BANK1     34    34      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               12     9      3   10374
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              17    14      3   10176
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2524
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    4333
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1580
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     431
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     574
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2220
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     543
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     418
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     444
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3356
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             38 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     648
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2173
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2495
                                             24 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              5     3      2     661
                                              3 COMMON     5     3      2
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _Lcd_Cmd
     _Lcd_Out
       _Lcd_Chr_CP
       _Lcd_Cmd
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _setup
     _Lcd_Cmd
     _Lcd_Init
       _Lcd_Cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      9F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4A      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     22      43       8       83.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      9F      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed May 06 08:57:51 2015

                      _i 006A                        _j 006C              __CFG_CP$OFF 0000  
                     l33 0B30                       l34 0B53                       l81 0A62  
                     l82 0A6F             ___awdiv@sign 0021      ___wmul@multiplicand 0026  
           ___ftadd@exp1 0052             ___ftadd@exp2 0051             ___ftadd@sign 0050  
                    l130 03B3                      l135 04DA                      l440 08A1  
                    l256 1654                      l434 088A                      l463 0E3E  
                    l489 0D1A             __CFG_CPD$OFF 0000             ___awmod@sign 0076  
           __CFG_BORV$LO 0000                      wreg 0009              _sprintf$813 00A0  
            _sprintf$398 00A3             __CFG_LVP$OFF 0000             ___ftdiv@cntr 0042  
           ___ftdiv@sign 0047                     l2101 005B                     l2013 024B  
                   l2111 00A6                     l2031 0370                     l2007 01EA  
                   l2041 0D02                     l2025 030F                     l2017 0268  
                   l2211 091C                     l2203 0901                     l2131 011B  
                   l2213 0925                     l2205 090F                     l2141 0134  
                   l2215 0928                     l2231 17CC                     l2119 00EE  
                   l2063 0D55                     l2055 0D3B                     l2153 1716  
                   l2137 0128                     l2129 010D                     l2081 0D8A  
                   l2073 0D6F                     l2219 0936                     l2243 17F7  
                   l2139 0131                     l2083 0D93                     l2075 0D7D  
                   l2341 16B7                     l2149 1700                     l2229 17BE  
                   l2253 172D                     l2085 0D96                     l2413 04C3  
                   l2405 0476                     l2343 16BA                     l2351 16C6  
                   l2239 17EC                     l2255 173B                     l2263 175E  
                   l2271 1691                     l2095 003E                     l2511 07B7  
                   l2431 055A                     l2345 16BD                     l2353 16D4  
                   l1801 0DCE                     l2185 08D1                     l2273 16A1  
                   l1721 081A                     l2347 16C0                     l2259 1753  
                   l1731 0822                     l1715 080F                     l2443 0596  
                   l2427 0546                     l2419 050F                     l1733 082E  
                   l1901 0CC1                     l2517 07CA                     l2461 0621  
                   l2453 05EA                     l2373 03B5                     l2525 0395  
                   l2359 16D8                     l2543 0BB9                     l1831 0E1D  
                   l1807 0DDD                     l1743 0849                     l2447 05E4  
                   l2519 07CF                     l2375 03CB                     l2527 07EC  
                   l1673 0867                     l2537 0BA3                     l1825 0E0A  
                   l2369 03B0                     l1683 088F                     l1675 0871  
                   l1843 0E50                     l1827 0E14                     l1819 0DF7  
                   l1747 0851                     l1739 0840                     l1771 177E  
                   l1763 1778                     l2483 06A4                     l2475 063C  
                   l1685 0897                     l1677 0876                     l1669 0860  
                   l2565 0C13                     l2557 0BFA                     l1837 0E30  
                   l1829 0E19                     l1773 178A                     l1781 179F  
                   l2477 0691                     l2389 0412                     l1847 0E62  
                   l1839 0E3A                     l1759 1771                     l2495 06E7  
                   l1857 0E7D                     l1785 17A7                     l1777 1796  
                   l1873 0C62                     l1697 164D                     l2489 06C1  
                   l1867 0C4C                     l1797 0DC7                     l1885 0C9D  
                   l1991 0FD3                     l1983 0F59                     l1897 0CB9  
                   l1889 0CA5                     STR_1 1076                     u2015 0825  
                   u2035 082F                     u2115 1781                     u2045 0839  
                   u3015 08D8                     u2055 0841                     u2135 1790  
                   u2145 1797                     u3115 17C1                     u2325 0E1E  
                   u3045 0902                     u3205 1749                     u3135 17CD  
                   u3215 1754                     u2265 0DF8                     u3145 17E1  
                   u2505 0CC8                     u2425 0C6E                     u2355 0E31  
                   u3075 091D                     u3155 17ED                     u3235 1696  
                   u2435 0C7E                     u2605 09F8                     u2525 0946  
                   u3405 0544                     u3325 0427                     u2615 0A08  
                   u2535 0956                     u2295 0E0B                     u2455 0CA6  
                   u2625 0A20                     u2545 0967                     u3185 1730  
                   u2465 0CAC                     u2635 0A30                     u2555 0977  
                   u3435 0615                     u2565 098F                     u1925 08A8  
                   u3605 0C14                     u3365 04E6                     u2575 099F  
                   u1855 086C                     u2735 0D3C                     u2495 0CC2  
                   u3375 051B                     u2585 09D7                     u2825 0D8B  
                   u2745 0D4C                     u2595 09E7                     u1875 0885  
                   u2915 010E                     u2755 0D56                     u1955 1655  
                   u3475 06AF                     u3635 0A93                     u3707 0B26  
                   u3565 0BCB                     u1965 165A                     u3485 06BD  
                   u3717 0B47                     u1895 0892                     u3575 0BDB  
                   u3727 0B6A                     u3585 0BFB                     u2945 0129  
                   u2865 00A7                     u3737 0A6A                     u3657 0B08  
                   u3747 0985                     u3595 0C0A                     u2875 00D1  
                   u2795 0D70                     u3667 0B0E                     u3757 09C2  
                   u3677 0B14                     u3767 09CB                     u3687 0B1A  
                   u3777 0A16                     u3697 0B20                     u3787 0A53  
                   u3797 0A5D             __CFG_WRT$OFF 0000                     _main 1629  
           ___ftpack@arg 0070                     _loop 0A62             ___ftpack@exp 0073  
                   fsr0h 0005                     fsr1h 0007                     fsr0l 0004  
                   indf0 0000                     indf1 0001                     fsr1l 0006  
                   btemp 007E                     ltemp 007E                     start 0002  
                   ttemp 007E                     wtemp 007E            __CFG_IESO$OFF 0000  
        __end_of_Lcd_Cmd 09D0          __end_of_Lcd_Out 16EA             ___ftmul@cntr 0036  
           ___ftmul@sign 0037               _Lcd_Chr_CP 09D0             ___fttol@exp1 004E  
           ___fttol@lval 004A                    ?_main 0070          __end_of___awdiv 0858  
                  ?_loop 0070          __end_of___ftadd 0E95            __CFG_WDTE$OFF 0000  
        __end_of___awmod 17AE          __end_of___ftdiv 0C35          __end_of___ftneg 1638  
        __end_of___lldiv 1800          __end_of___ftmul 0CE9          ___awdiv@divisor 0077  
        __end_of___llmod 1767          __end_of___ftsub 0020          __end_of___fttol 093F  
        ___awdiv@counter 0020             ___lltoft@exp 007D           __CFG_FCMEN$OFF 0000  
        __end_of_dpowers 1028                    _scale 013D            ___ftpack@sign 0074  
                  _valor 00C2                    _setup 1669           __CFG_BOREN$OFF 0000  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __end_of_sprintf 07F1  
       __end_of_Lcd_Init 0B8C           __CFG_MCLRE$OFF 0000          __initialization 07F1  
           __end_of_main 1630             __end_of_loop 0AF6                   ??_main 007E  
          ___fttol@sign1 0049                   ??_loop 0064           __CFG_PLLEN$OFF 0000  
   __size_of__tdiv_to_l_ 00B6         ___llmod@dividend 0074                   ?_scale 0038  
                 _ADRESH 009C                   _ADRESL 009B         ___awdiv@dividend 0079  
                 ?_setup 0070                   _ANSELB 018D         __end_of___ftpack 08B8  
       __end_of___lltoft 16B5         __end_of___lwtoft 164B                ??_Lcd_Cmd 0070  
              ??_Lcd_Out 0075           __CFG_PWRTE$OFF 0000         __end_of__powers_ 1076  
                 ___ftge 16EA              ?_Lcd_Chr_CP 0070                   ___wmul 164B  
              ??___awdiv 007B                ??___ftadd 004C                ??___awmod 0074  
              ??___ftdiv 003E                ??___ftneg 0073                ??___lldiv 0078  
              ??___ftmul 002E                ??___llmod 0078                ??___ftsub 007E  
              ??___fttol 0045                   _buffer 00C5                   _fround 0E95  
       ___awdiv@quotient 0022          ___awmod@divisor 0070          ___awmod@counter 0075  
  ___ftmul@f3_as_product 0033                ??_sprintf 005E  __end_of__initialization 07FC  
             ___ftadd@f1 0046               ___ftadd@f2 0049               ___ftge@ff1 0070  
             ___ftge@ff2 0073               ___ftdiv@f1 003B               ___ftdiv@f2 0038  
             ___ftdiv@f3 0043               ___ftneg@f1 0070               ___ftmul@f1 0028  
             ___ftmul@f2 002B               ___ftsub@f1 0056               ___ftsub@f2 0053  
             ___fttol@f1 0041           __pcstackCOMMON 0070               ___lltoft@c 0078  
          __end_of_scale 038D            __end_of_setup 168D               ___lwtoft@c 0078  
             __div_to_l_ 0020                ?_Lcd_Init 0070          __div_to_l_@exp1 0025  
        __div_to_l_@cntr 0024             sprintf@integ 00B8                  ??_scale 003B  
        __div_to_l_@quot 0020                  ??_setup 0075      __size_of_Lcd_Chr_CP 0092  
             __pbssBANK0 006A               __pbssBANK1 00C2            __div_to_l_@f1 0070  
          __div_to_l_@f2 0073               __pmaintext 1629                  ?___ftge 0070  
                ?___wmul 0024                  ?_fround 0038                ?___ftpack 0070  
              ?___lltoft 0078                ?___lwtoft 0078               ??_Lcd_Init 0073  
                _Lcd_Cmd 093F                  _Lcd_Out 16B5        __end_of__npowers_ 104F  
        __size_of___ftge 003B                  ___awdiv 0804                  ___ftadd 0D9F  
                ___awmod 1767                  ___ftdiv 0B8C                  ___ftneg 1630  
                ___lldiv 17AE          __size_of___wmul 001E                  ___ftmul 0C35  
                ___llmod 1725                  ___ftsub 0007                  ___fttol 08B8  
             _fround$810 0042               _fround$811 003F          __CFG_STVREN$OFF 0000  
             ??___ftpack 0075          __size_of_fround 016B               ??___lltoft 007C  
                __ptext1 1669                  __ptext2 0AF6                  __ptext3 0A62  
                __ptext4 038D                  __ptext5 013D                  __ptext6 0E95  
                __ptext7 164B                  __ptext8 0C35                  __ptext9 1767  
             ??___lwtoft 007B              ?__div_to_l_ 0070                  _dpowers 1000  
       ___awmod@dividend 0072                  _sprintf 038D                  clrloop0 1624  
   end_of_initialization 07FC          ___lldiv@divisor 0070          ___lldiv@counter 007D  
           ??_Lcd_Chr_CP 0070             __pstringtext 1000           __tdiv_to_l_@f1 0070  
         __tdiv_to_l_@f2 0073            ??__tdiv_to_l_ 0076                _PORTAbits 000C  
              _PORTBbits 000D         __CFG_FOSC$INTOSC 0000                _TRISAbits 008C  
              _TRISBbits 008D       __end_of_Lcd_Chr_CP 0A62              ___ftdiv@exp 0046  
    __size_of__div_to_l_ 011D              ___ftmul@exp 0032           __end_of___ftge 1725  
         __end_of___wmul 1669           __end_of_fround 1000      start_initialization 07F1  
    __end_of__tdiv_to_l_ 0D9F            Lcd_Out@buffer 0074        __size_of_Lcd_Init 0096  
        ___llmod@divisor 0070          ___llmod@counter 0079                 ??___ftge 0076  
               ??___wmul 007C            sprintf@vd_400 00AC                 ??_fround 003B  
             fround@prec 0045        __size_of___ftpack 0060        __size_of___lltoft 0028  
              ___latbits 0002        __size_of___lwtoft 0013            __pcstackBANK0 0020  
          __pcstackBANK1 00A0      __end_of__stringdata 107D                 ?_Lcd_Cmd 0070  
            sprintf@_val 00B4              sprintf@flag 00B0                 ?_Lcd_Out 0073  
            sprintf@fval 00BE              sprintf@prec 00B2                 ?___awdiv 0077  
               ?___ftadd 0046                 ?___awmod 0070                 ?___ftdiv 0038  
               ?___ftneg 0070                 ?___lldiv 0070                 ?___ftmul 0028  
               ?___llmod 0070                 ?___ftsub 0053                __npowers_ 1028  
               ?___fttol 0041              __tdiv_to_l_ 0CE9             ??__div_to_l_ 0076  
              _scale$812 003D                 ?_sprintf 0059           __size_of_scale 0250  
         __size_of_setup 0024           ___wmul@product 007C                clear_ram0 1623  
     __end_of__div_to_l_ 013D                 Lcd_Out@x 0073                 Lcd_Out@y 0076  
           Lcd_Init@data 0074               _ADCON0bits 009D               _ADCON1bits 009E  
            __stringdata 1076        ___wmul@multiplier 0024                 _Lcd_Init 0AF6  
       __size_of_Lcd_Cmd 0091         __size_of_Lcd_Out 0035         __size_of___awdiv 0054  
       __size_of___ftadd 00F6         __size_of___awmod 0047         __size_of___ftdiv 00A9  
       __size_of___ftneg 0008         __size_of___lldiv 0052         __size_of___ftmul 00B4  
       __size_of___llmod 0042         __size_of___ftsub 0019         __size_of___fttol 0087  
               ___ftpack 0858                 ___lltoft 168D               _ANSELAbits 018C  
               ___lwtoft 1638               sprintf@exp 00BB           Lcd_Chr_CP@data 0072  
               __ptext10 0804                 __ptext11 0CE9                 __ptext20 16EA  
               __ptext12 0020                 __ptext21 1638                 __ptext13 168D  
               __ptext22 0B8C                 __ptext14 1725                 __ptext23 0858  
               __ptext15 17AE                 __ptext24 16B5                 __ptext16 08B8  
               __ptext25 093F                 __ptext17 0007                 __ptext26 09D0  
               __ptext18 0D9F                 __ptext19 1630                 __powers_ 104F  
       __size_of_sprintf 0464              Lcd_Cmd@data 0072            __size_of_main 0007  
          __size_of_loop 0094              Lcd_Out@data 0077              pic14e$flags 007E  
               scale@scl 0040                sprintf@ap 00A7         __tdiv_to_l_@exp1 0025  
              sprintf@vd 00A8         __tdiv_to_l_@cntr 0024                sprintf@sp 00BD  
       __tdiv_to_l_@quot 0020         ___lldiv@dividend 0074        __CFG_CLKOUTEN$OFF 0000  
             _OSCCONbits 0099             ?__tdiv_to_l_ 0070                 sprintf@c 00C1  
               sprintf@f 0059         ___lldiv@quotient 0079  
